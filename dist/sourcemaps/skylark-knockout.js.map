{"version":3,"sources":["skylark-knockout.js"],"names":["define","ko","koExports","exportSymbol","koPath","object","tokens","split","target","i","length","exportProperty","owner","publicName","version","options","deferUpdates","useOnlyNativeEvents","foreachHidesDestroyed","utils","hasOwnProperty","Object","prototype","objectForEach","obj","action","prop","call","extend","source","setPrototypeOf","proto","__proto__","canSetPrototype","Array","canUseSymbols","DEBUG","Symbol","knownEvents","knownEventTypesByEventName","keyEventTypeName","navigator","test","userAgent","eventType","knownEventsForType","j","eventsThatMustBeRegisteredUsingAttachEvent","propertychange","ieVersion","document","div","createElement","iElems","getElementsByTagName","innerHTML","undefined","isIe6","isIe7","jQueryEventAttachName","cssClassNameRegex","toggleObjectClassPropertyString","classNames","shouldHaveClass","currentClassNames","match","arrayForEach","className","addOrRemoveItem","join","fieldsIncludedWithJsonPost","array","actionOwner","arrayIndexOf","indexOf","item","arrayFirst","predicate","predicateOwner","arrayRemoveItem","itemToRemove","index","splice","shift","arrayGetDistinctValues","result","push","arrayMap","mapping","mappingOwner","arrayFilter","arrayPushAll","valuesToPush","apply","value","included","existingEntryIndex","peekObservable","setPrototypeOfOrExtend","objectMap","emptyDomNode","domNode","firstChild","removeNode","moveCleanedNodesToContainerElement","nodes","nodesArray","makeArray","templateDocument","ownerDocument","container","appendChild","cleanNode","cloneNodes","shouldCleanNodes","newNodesArray","clonedNode","cloneNode","setDomNodeChildren","childNodes","replaceDomNodes","nodeToReplaceOrNodeArray","nodesToReplaceArray","nodeType","insertionPoint","parent","parentNode","insertBefore","fixUpContinuousNodeArray","continuousNodeArray","current","last","nextSibling","setOptionNodeSelectionState","optionNode","isSelected","setAttribute","selected","stringTrim","string","trim","toString","replace","stringStartsWith","startsWith","substring","domNodeIsContainedBy","node","containedByNode","contains","compareDocumentPosition","domNodeIsAttachedToDocument","documentElement","anyDomNodeIsAttachedToDocument","tagNameLower","element","tagName","toLowerCase","catchFunctionErrors","delegate","this","arguments","e","setTimeout","handler","timeout","deferError","error","registerEventHandler","wrappedHandler","mustUseAttachEvent","jQueryInstance","addEventListener","attachEvent","Error","attachEventHandler","event","attachEventName","domNodeDisposal","addDisposeCallback","detachEvent","triggerEvent","useClickWorkaround","type","inputType","isClickOnCheckableElement","createEvent","dispatchEvent","eventCategory","initEvent","window","click","fireEvent","unwrapObservable","isObservable","peek","toggleDomNodeCssClass","addOrRemoveFn","classList","setTextContent","textContent","innerTextNode","virtualElements","createTextNode","data","forceRefresh","setElementName","name","escapedName","r","charCodeAt","mergeAttributes","elem","style","zoom","ensureSelectElementIsRenderedCorrectly","selectElement","originalWidth","width","range","min","max","arrayLikeObject","createSymbolOrString","identifier","getFormFields","form","fieldName","fields","concat","isMatchingField","field","matches","parseJson","jsonString","JSON","parse","Function","stringifyJson","replacer","space","stringify","postJson","urlOrForm","params","includeFields","url","originalForm","key","display","method","input","body","submit","removeChild","originalFunction","partialArgs","slice","args","domData","getDataForNode","clear","uniqueId","dataStoreKeyExpandoPropertyName","Date","getTime","dataStore","createIfNotFound","dataStoreKey","hasExistingDataStore","dataForNode","get","set","getOrSet","nextKey","domDataKey","cleanableNodeTypes","1","8","9","cleanableNodeTypesWithDescendants","getDisposeCallbacksCollection","allDisposeCallbacks","cleanSingleNode","callbacks","cleanNodesInList","nodeList","onlyComments","lastCleanedNode","cleanedNodes","callback","removeDisposeCallback","callbacksCollection","destroyCallbacksCollection","cleanExternalData","none","table","tr","select","lookup","thead","tbody","tfoot","td","th","option","optgroup","mayRequireCreateElementHack","simpleHtmlParse","html","documentContext","windowContext","tags","wrap","m","getWrap","depth","markup","lastChild","parseHtmlFragment","elems","jQueryHtmlParse","parseHtmlForTemplateNodes","parentElement","setHtml","parsedNodes","memoization","memos","randomMax8HexChars","Math","random","memoize","memoId","unmemoize","callbackParams","unmemoizeDomNodeAndDescendants","extraCallbackParamsArray","findMemoNodes","rootNode","appendToArray","parseMemoText","nodeValue","combinedParams","memoText","tasks","scheduler","taskQueue","taskQueueLength","nextHandle","nextIndexToProcess","processTasks","task","mark","countMarks","ex","scheduledProcess","MutationObserver","observe","attributes","toggle","script","onreadystatechange","schedule","func","cancel","handle","resetForTesting","runEarly","extenders","throttle","writeTimeoutInstance","dependentObservable","read","write","clearTimeout","rateLimit","limitFunction","_deferUpdates","debounce","limit","deferred","ignoreUpdates","notify","notifyWhen","valuesArePrimitiveAndEqual","primitiveTypes","boolean","number","a","b","oldValueIsPrimitive","timeoutInstance","subscription","disposeCallback","_target","_callback","_disposeCallback","_isDisposed","_node","_domNodeDisposalCallback","dispose","disposeWhenNodeIsRemoved","bind","subscribable","ko_subscribable_fn","init","defaultEvent","limitNotifySubscribers","_limitBeforeChange","_origNotifySubscribers","_limitChange","instance","_subscriptions","change","_versionNumber","subscribe","callbackTarget","self","boundCallback","afterSubscriptionRemove","beforeSubscriptionAdd","notifySubscribers","valueToNotify","updateVersion","hasSubscriptionsForEvent","subs","_changeSubscriptions","dependencyDetection","begin","end","getVersion","hasChanged","versionToCheck","ignoreBeforeChange","notifyNextChange","previousValue","pendingValue","didUpdate","selfIsObservable","finish","_notificationIsPending","_evalIfChanged","shouldNotify","isDifferent","isDirty","_recordUpdate","_notifyNextChangeIfValueIsDifferent","getSubscriptionsCount","total","eventName","subscriptions","oldValue","newValue","requestedExtenders","extenderHandler","isSubscribable","computedContext","currentFrame","outerFrames","lastId","pop","registerDependency","_id","ignore","callbackArgs","getDependenciesCount","computed","getDependencies","isInitial","ignoreDependencies","observableLatestValue","observable","initialValue","valueWillMutate","valueHasMutated","observableFn","equalityComparer","protoProperty","isWriteableObservable","hasWriteFunction","observableArray","initialValues","trackArrayChanges","remove","valueOrPredicate","underlyingArray","removedValues","removeAll","arrayOfValues","allValues","destroy","destroyAll","oldItem","newItem","sorted","compareFunction","arrayCopy","sort","reversed","reverse","methodName","cacheDiffForKnownOperation","methodCallResult","isObservableArray","arrayChangeEventName","compareArrayOptions","arrayChangeSubscription","underlyingNotifySubscribersFunction","trackingChanges","cachedDiff","pendingNotifications","underlyingBeforeSubscriptionAddFunction","underlyingAfterSubscriptionRemoveFunction","previousContents","currentContents","changes","compareArrays","getChanges","trackChanges","rawArray","operationName","diff","arrayLength","argsLength","offset","pushDiff","startIndex","endDeleteIndex","endAddIndex","endIndex","additions","deletions","argsIndex","findMovesInArrayComparison","status","computedState","computedDisposeDependencyCallback","id","entryToDispose","computedBeginDependencyDetectionCallback","computedObservable","state","isDisposed","disposalCount","disposalCandidates","addDependencyTracking","dependencyTracking","isSleeping","subscribeToDependency","evaluatorFunctionOrOptions","evaluatorFunctionTarget","writeFunction","latestValue","isStale","isBeingEvaluated","suppressDisposalUntilDisposeWhenReturnsFalse","pure","readFunction","disposeWhen","domNodeDisposalCallback","dependenciesCount","evaluationTimeoutInstance","haveDependenciesChanged","evaluateImmediate","computedFn","pureComputedOverrides","deferEvaluationOverrides","isActive","dependentObservables","dependency","_order","trackingObj","_version","_evalDelayed","markDirty","respondToChange","evaluatePossiblyAsync","dirtySub","changeSub","throttleEvaluationTimeout","notifyChange","changed","evaluateImmediate_CallReadWithDependencyDetection","dependencyDetectionContext","evaluateImmediate_CallReadThenEndDependencyDetection","_latestValue","evaluate","isChange","dependenciesOrder","order","protoProp","isComputed","isPureComputed","pureComputed","objectLookup","keys","values","toJS","rootObject","mapJsObjectGraph","mapInputCallback","visitedObjects","canHaveProperties","RegExp","String","Number","Boolean","outputProperties","save","visitorCallback","propertyName","visitPropertiesOrArrayEntries","indexer","propertyValue","previouslyMappedValue","valueToMap","toJSON","plainJavaScriptObject","constructor","existingIndex","when","context","kowhen","resolve","Promise","selectExtensions","readValue","bindingHandlers","optionValueDomDataKey","getAttributeNode","specified","text","selectedIndex","writeValue","allowUnset","optionValue","selection","n","size","expressionRewriting","javaScriptReservedWords","javaScriptAssignmentTarget","bindingToken","divisionLookBehind","keywordRegexLookBehind","in","return","typeof","parseObjectLiteral","objectLiteralString","str","toks","tok","c","unknown","substr","twoWayBindings","bindingRewriteValidators","preProcessBindings","bindingsStringOrKeyValueArray","bindingOptions","processKeyValue","val","writableVal","bindingParams","expression","getWriteableValue","writeKey","propertyAccessorResultStrings","makeValueAccessors","resultStrings","keyValueArray","keyValue","keyValueArrayContainsKey","writeValueToProperty","property","allBindings","checkIfDifferent","propWriters","commentNodesHaveTextProperty","createComment","startCommentRegex","endCommentRegex","htmlTagsWithOptionallyClosingChildren","ul","ol","isStartComment","isEndComment","matchedEndCommentDataKey","getVirtualChildren","startComment","allowUnbalanced","currentNode","children","getMatchingEndComment","allVirtualChildren","getUnbalancedChildTags","childNode","captureRemaining","matchingEndComment","allowedBindings","emptyNode","virtualChildren","endCommentNode","prepend","containerNode","nodeToPrepend","insertAfter","nodeToInsert","insertAfterNode","isUnmatchedEndComment","hasBindingValue","virtualNodeBindingValue","regexMatch","normaliseVirtualElementDomStructure","elementVerified","unbalancedTags","nodeToInsertBefore","bindingProvider","bindingCache","nodeHasBindings","getAttribute","components","getBindings","bindingContext","bindingsString","parsedBindings","addBindingsForCustomElement","getBindingAccessors","valueAccessors","getBindingsString","parseBindingsString","bindingFunction","cache","cacheKey","rewrittenBindings","createBindingsStringEvaluator","createBindingsStringEvaluatorViaCache","message","contextSubscribable","contextAncestorBindingInfo","bindingDoesNotRecurseIntoElementTypes","textarea","template","bindingKey","inheritParentVm","dataItemOrAccessor","parentContext","dataItemAlias","extendCallback","updateContext","dataItemOrObservable","isFunc","realDataItemOrAccessor","dataItem","shouldInheritData","unshift","properties","boundElementDomDataKey","asyncContextDispose","bindingInfo","asyncContext","notifyAncestor","AsyncCompleteContext","ancestorBindingInfo","asyncDescendants","childrenComplete","makeValueAccessor","evaluateValueAccessor","valueAccessor","makeAccessorsFromFunction","getBindingsAndMakeAccessors","applyBindingsToDescendantsInternal","elementOrVirtualElement","nextInQueue","currentChild","provider","preprocessNode","applyBindingsToNodeAndDescendantsInternal","bindingEvent","nodeVerified","bindingContextForDescendants","isElement","shouldApplyBindings","applyBindingsToNodeInternal","sourceBindings","bindings","alreadyBound","bindingsUpdater","bindingHandlerThatControlsDescendantBindings","contextToExtend","getValueAccessor","dataFor","descendantsComplete","startPossiblyAsyncContentBinding","orderedBindings","bindingsConsidered","cyclicDependencyStack","pushBinding","binding","bindingDependencyKey","topologicalSortBindings","bindingKeyAndHandler","handlerInitFn","handlerUpdateFn","bindingName","validateThatBindingIsAllowedForVirtualElements","initResult","shouldBindDescendants","getBindingContext","viewModelOrBindingContext","extendContextCallback","descendantComplete","completeChildren","eventSubscribable","ctx","storedBindingContextForNode","applyBindingAccessorsToNode","applyBindingsToNode","makeBindingAccessors","applyBindingsToDescendants","applyBindings","contextFor","loadingSubscribablesCache","loadedDefinitionsCache","getObjectOwnProperty","propName","getFirstResultFromLoaders","argsExceptCallback","candidateLoaders","currentCandidateLoader","methodInstance","wasAborted","synchronousReturnValue","componentName","cachedDefinition","isSynchronousComponent","definition","completedAsync","config","beginLoadingComponent","loadComponentAndNotify","clearCachedDefinition","_getFirstResultFromLoaders","defaultConfigRegistry","register","isRegistered","unregister","defaultLoader","getConfig","loadComponent","errorCallback","makeErrorCallback","possiblyGetConfigFromAmd","loadedConfig","makeCallBackWhenZero","tryIssueCallback","templateConfig","viewModelConfig","resolvedTemplate","resolvedViewModel","createViewModelKey","resolveConfig","loadTemplate","isDocumentFragment","HTMLElement","cloneNodesFromTemplateSourceElement","elemInstance","getElementById","resolveTemplate","loadViewModel","resolveViewModel","fixedInstance","componentInfo","content","DocumentFragment","amdRequire","_allRegisteredComponents","componentBindingValue","paramsAttribute","nativeBindingProviderInstance","rawParamComputedValues","paramValue","paramName","paramValueComputed","$raw","getComponentParamsFromCustomElement","createDocumentFragment","newDocFrag","allComponents","componentLoadingOperationUniqueId","ignored1","ignored2","currentViewModel","currentLoadingOperationId","afterRenderSub","disposeAssociatedComponentViewModel","currentViewModelDispose","originalChildNodes","componentParams","loadingOperationId","componentDefinition","clonedNodesArray","cloneTemplateIntoElement","templateNodes","componentViewModel","componentViewModelFactory","createViewModel","childBindingContext","controlsDescendantBindings","attrHtmlToJavaScriptMap","class","for","update","attrName","attrValue","prefixLen","namespace","lookupNamespaceURI","toRemove","removeAttributeNS","removeAttribute","setAttributeNS","after","checkedValue","useElementValue","updateModel","isChecked","checked","elemValue","isRadio","modelValue","valueIsArray","writableValue","rawValueIsNonArrayObservable","saveOldValue","oldElemValue","isCheckbox","rawValue","disabled","viewModel","eventsToHandle","handlerReturnValue","handlerFunction","argsForHandler","preventDefault","returnValue","bubble","cancelBubble","stopPropagation","makeTemplateValueAccessor","unwrappedValue","foreach","as","noChildContext","includeDestroyed","afterAdd","beforeRemove","afterRender","beforeMove","afterMove","templateEngine","nativeTemplateEngine","handleElementFocusChange","isFocused","ownerDoc","active","activeElement","handleElementFocusIn","handleElementFocusOut","focus","blur","makeWithIfBinding","isWith","isNot","savedNodes","withOptions","ifCondition","completeOnRender","needAsyncContext","wrapCondition","childContext","shouldDisplay","isFirstRender","innerContext","captionPlaceholder","selectedOptions","captionValue","filteredArray","selectWasPreviouslyEmpty","multiple","previousScrollTop","scrollTop","unwrappedArray","valueAllowUnset","arrayToDomNodeChildrenOptions","previousSelectedValues","applyToObject","defaultValue","predicateType","itemUpdate","setSelectionCallback","arrayEntry","newOptions","setDomNodeChildrenFromArrayMapping","oldOptions","optionText","abs","valueToWrite","styleName","styleValue","setProperty","all","letter","toUpperCase","previousStyle","isNaN","operaVersion","safariVersion","firefoxVersion","edgeVersion","parseVersion","parseFloat","opera","parseInt","selectionChangeRegisteredName","selectionChangeHandlerName","selectionChangeHandler","registerForSelectionChangeEvent","timeoutHandle","elementValueBeforeEvent","previousElementValue","elementValue","deferUpdateModel","ieUpdateModel","ourUpdate","updateView","onEvent","preprocess","addBinding","currentIndex","isInputElement","eventsToCatch","requestedEventsToCatch","propertyChangedFired","updateFromModel","valueUpdateHandler","ieAutoCompleteHackNeeded","autocomplete","valueHasChanged","isCurrentlyVisible","templateSource","templateSources","domElement","anonymousTemplate","rewriterCallback","rewritten","templateRewriting","memoizeDataBindingAttributeSyntaxRegex","memoizeVirtualContainerBindingSyntaxRegex","constructMemoizedTagReplacement","dataBindAttributeValue","tagToRetain","nodeName","dataBindKeyValueArray","allValidators","validator","possibleErrorMessage","validateDataBindValuesForRewriting","rewrittenDataBindAttributeValue","applyBindingsToNextSiblingScript","ensureTemplateIsRewritten","htmlString","memoizeBindingAttributeSyntax","applyMemoizedBindingsToNextSibling","nodeToBind","templateType","elemContentsProperty","dataDomDataPrefix","templatesDomDataKey","getTemplateDomData","setTemplateDomData","templateData","containerData","alwaysCheckText","textData","_templateEngine","invokeForEachNodeInContinuousRange","firstNode","lastNode","firstOutOfRangeNode","activateBindingsOnContinuousNodeArray","nextNodeInRange","nodePreviousSibling","previousSibling","newNodes","getFirstNodeFromPossibleArray","nodeOrNodeArray","executeTemplate","targetNodeOrNodeArray","renderMode","firstTargetNode","templateEngineToUse","renderedNodesArray","haveAddedNodesToParent","resolveTemplateName","setTemplateEngine","renderTemplate","dataOrBindingContext","activelyDisposeWhenNodeIsRemoved","exportDependencies","templateName","renderTemplateForEach","arrayOrObservableArray","targetNode","parentBindingContext","arrayItemContext","asName","executeTemplateForArrayItem","arrayValue","activateBindingsCallback","addedNodesArray","newArray","changeList","shouldHideDestroyed","templateComputedDomDataKey","cleanContainerDomDataKey","bindingValue","templateComputed","dataArray","innerBindingContext","newComputed","oldComputed","disposeOldComputedAndStoreNewOne","parsedBindingValue","left","right","limitFailedCompares","failedCompares","l","leftItem","rightItem","statusNotInOld","statusNotInNew","compareSmallArrayToBigArray","smlArray","bigArray","statusNotInSml","statusNotInBig","smlIndex","bigIndex","thisRow","lastRow","bigIndexMaxForRow","bigIndexMinForRow","myMin","myMax","editDistanceMatrix","smlIndexMax","bigIndexMax","compareRange","maxDistance","northDistance","westDistance","meMinusOne","editScript","notInSml","notInBig","oldArray","dontLimitMoves","mapNodeAndRefreshWhenChanged","callbackAfterAddingNodes","mappedNodes","newMappedNodes","lastMappingResultDomDataKey","deletedItemDummyValue","mapData","nextNodeInDom","lastMappingResult","isFirstExecution","newMappingResult","lastMappingResultIndex","newMappingResultIndex","nodesToDelete","itemsToMoveFirstIndexes","itemsForBeforeRemoveCallbacks","itemsForMoveCallbacks","itemsForAfterAddCallbacks","countWaitingForRemove","itemAdded","indexObservable","itemMovedOrRetained","oldPosition","callCallback","items","lastArray","x","compareOptions","sparse","editScriptItem","movedIndex","itemIndex","initialized","useNodesIfAvailable","templateNodesFunc","templateText","jqueryTmplTemplateEngine","jQueryTmplVersion","ensureHasReferencedJQueryTemplates","precompiled","jQueryTemplateOptions","koBindingContext","resultNodes","compiledTemplate","templateMarkup","open","close","jqueryTmplTemplateEngineInstance","main"],"mappings":"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","file":"../skylark-knockout.js","sourcesContent":["define('skylark-knockout/main',[],function(){\r\n\r\n\r\n    /*!\r\n     * Knockout JavaScript library v3.5.0-pre builded in 2018/10/07 \r\n     * (c) The Knockout.js team - http://knockoutjs.com/\r\n     * License: MIT (http://www.opensource.org/licenses/mit-license.php)\r\n     */\r\n\r\n\r\n    // Internally, all KO objects are attached to koExports (even the non-exported ones whose names will be minified by the closure compiler).\r\n    // In the future, the following \"ko\" variable may be made distinct from \"koExports\" so that private objects are not externally reachable.\r\n    var ko = typeof koExports !== 'undefined' ? koExports : {};\r\n    // Google Closure Compiler helpers (used only to make the minified file smaller)\r\n    ko.exportSymbol = function(koPath, object) {\r\n        var tokens = koPath.split(\".\");\r\n\r\n        // In the future, \"ko\" may become distinct from \"koExports\" (so that non-exported objects are not reachable)\r\n        // At that point, \"target\" would be set to: (typeof koExports !== \"undefined\" ? koExports : ko)\r\n        var target = ko;\r\n\r\n        for (var i = 0; i < tokens.length - 1; i++)\r\n            target = target[tokens[i]];\r\n        target[tokens[tokens.length - 1]] = object;\r\n    };\r\n    ko.exportProperty = function(owner, publicName, object) {\r\n        owner[publicName] = object;\r\n    };\r\n    ko.version = \"3.5.0-pre\";\r\n\r\n    ko.exportSymbol('version', ko.version);\r\n    // For any options that may affect various areas of Knockout and aren't directly associated with data binding.\r\n    ko.options = {\r\n        'deferUpdates': false,\r\n        'useOnlyNativeEvents': false,\r\n        'foreachHidesDestroyed': false\r\n    };\r\n\r\n    //ko.exportSymbol('options', ko.options);   // 'options' isn't minified\r\n    ko.utils = (function () {\r\n        var hasOwnProperty = Object.prototype.hasOwnProperty;\r\n\r\n        function objectForEach(obj, action) {\r\n            for (var prop in obj) {\r\n                if (hasOwnProperty.call(obj, prop)) {\r\n                    action(prop, obj[prop]);\r\n                }\r\n            }\r\n        }\r\n\r\n        function extend(target, source) {\r\n            if (source) {\r\n                for(var prop in source) {\r\n                    if(hasOwnProperty.call(source, prop)) {\r\n                        target[prop] = source[prop];\r\n                    }\r\n                }\r\n            }\r\n            return target;\r\n        }\r\n\r\n        function setPrototypeOf(obj, proto) {\r\n            obj.__proto__ = proto;\r\n            return obj;\r\n        }\r\n\r\n        var canSetPrototype = ({ __proto__: [] } instanceof Array);\r\n        var canUseSymbols = !DEBUG && typeof Symbol === 'function';\r\n\r\n        // Represent the known event types in a compact way, then at runtime transform it into a hash with event name as key (for fast lookup)\r\n        var knownEvents = {}, knownEventTypesByEventName = {};\r\n        var keyEventTypeName = (navigator && /Firefox\\/2/i.test(navigator.userAgent)) ? 'KeyboardEvent' : 'UIEvents';\r\n        knownEvents[keyEventTypeName] = ['keyup', 'keydown', 'keypress'];\r\n        knownEvents['MouseEvents'] = ['click', 'dblclick', 'mousedown', 'mouseup', 'mousemove', 'mouseover', 'mouseout', 'mouseenter', 'mouseleave'];\r\n        objectForEach(knownEvents, function(eventType, knownEventsForType) {\r\n            if (knownEventsForType.length) {\r\n                for (var i = 0, j = knownEventsForType.length; i < j; i++)\r\n                    knownEventTypesByEventName[knownEventsForType[i]] = eventType;\r\n            }\r\n        });\r\n        var eventsThatMustBeRegisteredUsingAttachEvent = { 'propertychange': true }; // Workaround for an IE9 issue - https://github.com/SteveSanderson/knockout/issues/406\r\n\r\n        // Detect IE versions for bug workarounds (uses IE conditionals, not UA string, for robustness)\r\n        // Note that, since IE 10 does not support conditional comments, the following logic only detects IE < 10.\r\n        // Currently this is by design, since IE 10+ behaves correctly when treated as a standard browser.\r\n        // If there is a future need to detect specific versions of IE10+, we will amend this.\r\n        var ieVersion = document && (function() {\r\n            var version = 3, div = document.createElement('div'), iElems = div.getElementsByTagName('i');\r\n\r\n            // Keep constructing conditional HTML blocks until we hit one that resolves to an empty fragment\r\n            while (\r\n                div.innerHTML = '<!--[if gt IE ' + (++version) + ']><i></i><![endif]-->',\r\n                iElems[0]\r\n            ) {}\r\n            return version > 4 ? version : undefined;\r\n        }());\r\n        var isIe6 = ieVersion === 6,\r\n            isIe7 = ieVersion === 7;\r\n\r\n        function isClickOnCheckableElement(element, eventType) {\r\n            if ((ko.utils.tagNameLower(element) !== \"input\") || !element.type) return false;\r\n            if (eventType.toLowerCase() != \"click\") return false;\r\n            var inputType = element.type;\r\n            return (inputType == \"checkbox\") || (inputType == \"radio\");\r\n        }\r\n\r\n        // For details on the pattern for changing node classes\r\n        // see: https://github.com/knockout/knockout/issues/1597\r\n        var cssClassNameRegex = /\\S+/g;\r\n\r\n        var jQueryEventAttachName;\r\n\r\n        function toggleDomNodeCssClass(node, classNames, shouldHaveClass) {\r\n            var addOrRemoveFn;\r\n            if (classNames) {\r\n                if (typeof node.classList === 'object') {\r\n                    addOrRemoveFn = node.classList[shouldHaveClass ? 'add' : 'remove'];\r\n                    ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\r\n                        addOrRemoveFn.call(node.classList, className);\r\n                    });\r\n                } else if (typeof node.className['baseVal'] === 'string') {\r\n                    // SVG tag .classNames is an SVGAnimatedString instance\r\n                    toggleObjectClassPropertyString(node.className, 'baseVal', classNames, shouldHaveClass);\r\n                } else {\r\n                    // node.className ought to be a string.\r\n                    toggleObjectClassPropertyString(node, 'className', classNames, shouldHaveClass);\r\n                }\r\n            }\r\n        }\r\n\r\n        function toggleObjectClassPropertyString(obj, prop, classNames, shouldHaveClass) {\r\n            // obj/prop is either a node/'className' or a SVGAnimatedString/'baseVal'.\r\n            var currentClassNames = obj[prop].match(cssClassNameRegex) || [];\r\n            ko.utils.arrayForEach(classNames.match(cssClassNameRegex), function(className) {\r\n                ko.utils.addOrRemoveItem(currentClassNames, className, shouldHaveClass);\r\n            });\r\n            obj[prop] = currentClassNames.join(\" \");\r\n        }\r\n\r\n        return {\r\n            fieldsIncludedWithJsonPost: ['authenticity_token', /^__RequestVerificationToken(_.*)?$/],\r\n\r\n            arrayForEach: function (array, action, actionOwner) {\r\n                for (var i = 0, j = array.length; i < j; i++) {\r\n                    action.call(actionOwner, array[i], i, array);\r\n                }\r\n            },\r\n\r\n            arrayIndexOf: typeof Array.prototype.indexOf == \"function\"\r\n                ? function (array, item) {\r\n                    return Array.prototype.indexOf.call(array, item);\r\n                }\r\n                : function (array, item) {\r\n                    for (var i = 0, j = array.length; i < j; i++) {\r\n                        if (array[i] === item)\r\n                            return i;\r\n                    }\r\n                    return -1;\r\n                },\r\n\r\n            arrayFirst: function (array, predicate, predicateOwner) {\r\n                for (var i = 0, j = array.length; i < j; i++) {\r\n                    if (predicate.call(predicateOwner, array[i], i, array))\r\n                        return array[i];\r\n                }\r\n                return undefined;\r\n            },\r\n\r\n            arrayRemoveItem: function (array, itemToRemove) {\r\n                var index = ko.utils.arrayIndexOf(array, itemToRemove);\r\n                if (index > 0) {\r\n                    array.splice(index, 1);\r\n                }\r\n                else if (index === 0) {\r\n                    array.shift();\r\n                }\r\n            },\r\n\r\n            arrayGetDistinctValues: function (array) {\r\n                var result = [];\r\n                if (array) {\r\n                    ko.utils.arrayForEach(array, function(item) {\r\n                        if (ko.utils.arrayIndexOf(result, item) < 0)\r\n                            result.push(item);\r\n                    });\r\n                }\r\n                return result;\r\n            },\r\n\r\n            arrayMap: function (array, mapping, mappingOwner) {\r\n                var result = [];\r\n                if (array) {\r\n                    for (var i = 0, j = array.length; i < j; i++)\r\n                        result.push(mapping.call(mappingOwner, array[i], i));\r\n                }\r\n                return result;\r\n            },\r\n\r\n            arrayFilter: function (array, predicate, predicateOwner) {\r\n                var result = [];\r\n                if (array) {\r\n                    for (var i = 0, j = array.length; i < j; i++)\r\n                        if (predicate.call(predicateOwner, array[i], i))\r\n                            result.push(array[i]);\r\n                }\r\n                return result;\r\n            },\r\n\r\n            arrayPushAll: function (array, valuesToPush) {\r\n                if (valuesToPush instanceof Array)\r\n                    array.push.apply(array, valuesToPush);\r\n                else\r\n                    for (var i = 0, j = valuesToPush.length; i < j; i++)\r\n                        array.push(valuesToPush[i]);\r\n                return array;\r\n            },\r\n\r\n            addOrRemoveItem: function(array, value, included) {\r\n                var existingEntryIndex = ko.utils.arrayIndexOf(ko.utils.peekObservable(array), value);\r\n                if (existingEntryIndex < 0) {\r\n                    if (included)\r\n                        array.push(value);\r\n                } else {\r\n                    if (!included)\r\n                        array.splice(existingEntryIndex, 1);\r\n                }\r\n            },\r\n\r\n            canSetPrototype: canSetPrototype,\r\n\r\n            extend: extend,\r\n\r\n            setPrototypeOf: setPrototypeOf,\r\n\r\n            setPrototypeOfOrExtend: canSetPrototype ? setPrototypeOf : extend,\r\n\r\n            objectForEach: objectForEach,\r\n\r\n            objectMap: function(source, mapping, mappingOwner) {\r\n                if (!source)\r\n                    return source;\r\n                var target = {};\r\n                for (var prop in source) {\r\n                    if (hasOwnProperty.call(source, prop)) {\r\n                        target[prop] = mapping.call(mappingOwner, source[prop], prop, source);\r\n                    }\r\n                }\r\n                return target;\r\n            },\r\n\r\n            emptyDomNode: function (domNode) {\r\n                while (domNode.firstChild) {\r\n                    ko.removeNode(domNode.firstChild);\r\n                }\r\n            },\r\n\r\n            moveCleanedNodesToContainerElement: function(nodes) {\r\n                // Ensure it's a real array, as we're about to reparent the nodes and\r\n                // we don't want the underlying collection to change while we're doing that.\r\n                var nodesArray = ko.utils.makeArray(nodes);\r\n                var templateDocument = (nodesArray[0] && nodesArray[0].ownerDocument) || document;\r\n\r\n                var container = templateDocument.createElement('div');\r\n                for (var i = 0, j = nodesArray.length; i < j; i++) {\r\n                    container.appendChild(ko.cleanNode(nodesArray[i]));\r\n                }\r\n                return container;\r\n            },\r\n\r\n            cloneNodes: function (nodesArray, shouldCleanNodes) {\r\n                for (var i = 0, j = nodesArray.length, newNodesArray = []; i < j; i++) {\r\n                    var clonedNode = nodesArray[i].cloneNode(true);\r\n                    newNodesArray.push(shouldCleanNodes ? ko.cleanNode(clonedNode) : clonedNode);\r\n                }\r\n                return newNodesArray;\r\n            },\r\n\r\n            setDomNodeChildren: function (domNode, childNodes) {\r\n                ko.utils.emptyDomNode(domNode);\r\n                if (childNodes) {\r\n                    for (var i = 0, j = childNodes.length; i < j; i++)\r\n                        domNode.appendChild(childNodes[i]);\r\n                }\r\n            },\r\n\r\n            replaceDomNodes: function (nodeToReplaceOrNodeArray, newNodesArray) {\r\n                var nodesToReplaceArray = nodeToReplaceOrNodeArray.nodeType ? [nodeToReplaceOrNodeArray] : nodeToReplaceOrNodeArray;\r\n                if (nodesToReplaceArray.length > 0) {\r\n                    var insertionPoint = nodesToReplaceArray[0];\r\n                    var parent = insertionPoint.parentNode;\r\n                    for (var i = 0, j = newNodesArray.length; i < j; i++)\r\n                        parent.insertBefore(newNodesArray[i], insertionPoint);\r\n                    for (var i = 0, j = nodesToReplaceArray.length; i < j; i++) {\r\n                        ko.removeNode(nodesToReplaceArray[i]);\r\n                    }\r\n                }\r\n            },\r\n\r\n            fixUpContinuousNodeArray: function(continuousNodeArray, parentNode) {\r\n                // Before acting on a set of nodes that were previously outputted by a template function, we have to reconcile\r\n                // them against what is in the DOM right now. It may be that some of the nodes have already been removed, or that\r\n                // new nodes might have been inserted in the middle, for example by a binding. Also, there may previously have been\r\n                // leading comment nodes (created by rewritten string-based templates) that have since been removed during binding.\r\n                // So, this function translates the old \"map\" output array into its best guess of the set of current DOM nodes.\r\n                //\r\n                // Rules:\r\n                //   [A] Any leading nodes that have been removed should be ignored\r\n                //       These most likely correspond to memoization nodes that were already removed during binding\r\n                //       See https://github.com/knockout/knockout/pull/440\r\n                //   [B] Any trailing nodes that have been remove should be ignored\r\n                //       This prevents the code here from adding unrelated nodes to the array while processing rule [C]\r\n                //       See https://github.com/knockout/knockout/pull/1903\r\n                //   [C] We want to output a continuous series of nodes. So, ignore any nodes that have already been removed,\r\n                //       and include any nodes that have been inserted among the previous collection\r\n\r\n                if (continuousNodeArray.length) {\r\n                    // The parent node can be a virtual element; so get the real parent node\r\n                    parentNode = (parentNode.nodeType === 8 && parentNode.parentNode) || parentNode;\r\n\r\n                    // Rule [A]\r\n                    while (continuousNodeArray.length && continuousNodeArray[0].parentNode !== parentNode)\r\n                        continuousNodeArray.splice(0, 1);\r\n\r\n                    // Rule [B]\r\n                    while (continuousNodeArray.length > 1 && continuousNodeArray[continuousNodeArray.length - 1].parentNode !== parentNode)\r\n                        continuousNodeArray.length--;\r\n\r\n                    // Rule [C]\r\n                    if (continuousNodeArray.length > 1) {\r\n                        var current = continuousNodeArray[0], last = continuousNodeArray[continuousNodeArray.length - 1];\r\n                        // Replace with the actual new continuous node set\r\n                        continuousNodeArray.length = 0;\r\n                        while (current !== last) {\r\n                            continuousNodeArray.push(current);\r\n                            current = current.nextSibling;\r\n                        }\r\n                        continuousNodeArray.push(last);\r\n                    }\r\n                }\r\n                return continuousNodeArray;\r\n            },\r\n\r\n            setOptionNodeSelectionState: function (optionNode, isSelected) {\r\n                // IE6 sometimes throws \"unknown error\" if you try to write to .selected directly, whereas Firefox struggles with setAttribute. Pick one based on browser.\r\n                if (ieVersion < 7)\r\n                    optionNode.setAttribute(\"selected\", isSelected);\r\n                else\r\n                    optionNode.selected = isSelected;\r\n            },\r\n\r\n            stringTrim: function (string) {\r\n                return string === null || string === undefined ? '' :\r\n                    string.trim ?\r\n                        string.trim() :\r\n                        string.toString().replace(/^[\\s\\xa0]+|[\\s\\xa0]+$/g, '');\r\n            },\r\n\r\n            stringStartsWith: function (string, startsWith) {\r\n                string = string || \"\";\r\n                if (startsWith.length > string.length)\r\n                    return false;\r\n                return string.substring(0, startsWith.length) === startsWith;\r\n            },\r\n\r\n            domNodeIsContainedBy: function (node, containedByNode) {\r\n                if (node === containedByNode)\r\n                    return true;\r\n                if (node.nodeType === 11)\r\n                    return false; // Fixes issue #1162 - can't use node.contains for document fragments on IE8\r\n                if (containedByNode.contains)\r\n                    return containedByNode.contains(node.nodeType !== 1 ? node.parentNode : node);\r\n                if (containedByNode.compareDocumentPosition)\r\n                    return (containedByNode.compareDocumentPosition(node) & 16) == 16;\r\n                while (node && node != containedByNode) {\r\n                    node = node.parentNode;\r\n                }\r\n                return !!node;\r\n            },\r\n\r\n            domNodeIsAttachedToDocument: function (node) {\r\n                return ko.utils.domNodeIsContainedBy(node, node.ownerDocument.documentElement);\r\n            },\r\n\r\n            anyDomNodeIsAttachedToDocument: function(nodes) {\r\n                return !!ko.utils.arrayFirst(nodes, ko.utils.domNodeIsAttachedToDocument);\r\n            },\r\n\r\n            tagNameLower: function(element) {\r\n                // For HTML elements, tagName will always be upper case; for XHTML elements, it'll be lower case.\r\n                // Possible future optimization: If we know it's an element from an XHTML document (not HTML),\r\n                // we don't need to do the .toLowerCase() as it will always be lower case anyway.\r\n                return element && element.tagName && element.tagName.toLowerCase();\r\n            },\r\n\r\n            catchFunctionErrors: function (delegate) {\r\n                return ko['onError'] ? function () {\r\n                    try {\r\n                        return delegate.apply(this, arguments);\r\n                    } catch (e) {\r\n                        ko['onError'] && ko['onError'](e);\r\n                        throw e;\r\n                    }\r\n                } : delegate;\r\n            },\r\n\r\n            setTimeout: function (handler, timeout) {\r\n                return setTimeout(ko.utils.catchFunctionErrors(handler), timeout);\r\n            },\r\n\r\n            deferError: function (error) {\r\n                setTimeout(function () {\r\n                    ko['onError'] && ko['onError'](error);\r\n                    throw error;\r\n                }, 0);\r\n            },\r\n\r\n            registerEventHandler: function (element, eventType, handler) {\r\n                var wrappedHandler = ko.utils.catchFunctionErrors(handler);\r\n\r\n                var mustUseAttachEvent = eventsThatMustBeRegisteredUsingAttachEvent[eventType];\r\n                if (!ko.options['useOnlyNativeEvents'] && !mustUseAttachEvent && jQueryInstance) {\r\n                    if (!jQueryEventAttachName) {\r\n                        jQueryEventAttachName = (typeof jQueryInstance(element)['on'] == 'function') ? 'on' : 'bind';\r\n                    }\r\n                    jQueryInstance(element)[jQueryEventAttachName](eventType, wrappedHandler);\r\n                } else if (!mustUseAttachEvent && typeof element.addEventListener == \"function\")\r\n                    element.addEventListener(eventType, wrappedHandler, false);\r\n                else if (typeof element.attachEvent != \"undefined\") {\r\n                    var attachEventHandler = function (event) { wrappedHandler.call(element, event); },\r\n                        attachEventName = \"on\" + eventType;\r\n                    element.attachEvent(attachEventName, attachEventHandler);\r\n\r\n                    // IE does not dispose attachEvent handlers automatically (unlike with addEventListener)\r\n                    // so to avoid leaks, we have to remove them manually. See bug #856\r\n                    ko.utils.domNodeDisposal.addDisposeCallback(element, function() {\r\n                        element.detachEvent(attachEventName, attachEventHandler);\r\n                    });\r\n                } else\r\n                    throw new Error(\"Browser doesn't support addEventListener or attachEvent\");\r\n            },\r\n\r\n            triggerEvent: function (element, eventType) {\r\n                if (!(element && element.nodeType))\r\n                    throw new Error(\"element must be a DOM node when calling triggerEvent\");\r\n\r\n                // For click events on checkboxes and radio buttons, jQuery toggles the element checked state *after* the\r\n                // event handler runs instead of *before*. (This was fixed in 1.9 for checkboxes but not for radio buttons.)\r\n                // IE doesn't change the checked state when you trigger the click event using \"fireEvent\".\r\n                // In both cases, we'll use the click method instead.\r\n                var useClickWorkaround = isClickOnCheckableElement(element, eventType);\r\n\r\n                if (!ko.options['useOnlyNativeEvents'] && jQueryInstance && !useClickWorkaround) {\r\n                    jQueryInstance(element)['trigger'](eventType);\r\n                } else if (typeof document.createEvent == \"function\") {\r\n                    if (typeof element.dispatchEvent == \"function\") {\r\n                        var eventCategory = knownEventTypesByEventName[eventType] || \"HTMLEvents\";\r\n                        var event = document.createEvent(eventCategory);\r\n                        event.initEvent(eventType, true, true, window, 0, 0, 0, 0, 0, false, false, false, false, 0, element);\r\n                        element.dispatchEvent(event);\r\n                    }\r\n                    else\r\n                        throw new Error(\"The supplied element doesn't support dispatchEvent\");\r\n                } else if (useClickWorkaround && element.click) {\r\n                    element.click();\r\n                } else if (typeof element.fireEvent != \"undefined\") {\r\n                    element.fireEvent(\"on\" + eventType);\r\n                } else {\r\n                    throw new Error(\"Browser doesn't support triggering events\");\r\n                }\r\n            },\r\n\r\n            unwrapObservable: function (value) {\r\n                return ko.isObservable(value) ? value() : value;\r\n            },\r\n\r\n            peekObservable: function (value) {\r\n                return ko.isObservable(value) ? value.peek() : value;\r\n            },\r\n\r\n            toggleDomNodeCssClass: toggleDomNodeCssClass,\r\n\r\n            setTextContent: function(element, textContent) {\r\n                var value = ko.utils.unwrapObservable(textContent);\r\n                if ((value === null) || (value === undefined))\r\n                    value = \"\";\r\n\r\n                // We need there to be exactly one child: a text node.\r\n                // If there are no children, more than one, or if it's not a text node,\r\n                // we'll clear everything and create a single text node.\r\n                var innerTextNode = ko.virtualElements.firstChild(element);\r\n                if (!innerTextNode || innerTextNode.nodeType != 3 || ko.virtualElements.nextSibling(innerTextNode)) {\r\n                    ko.virtualElements.setDomNodeChildren(element, [element.ownerDocument.createTextNode(value)]);\r\n                } else {\r\n                    innerTextNode.data = value;\r\n                }\r\n\r\n                ko.utils.forceRefresh(element);\r\n            },\r\n\r\n            setElementName: function(element, name) {\r\n                element.name = name;\r\n\r\n                // Workaround IE 6/7 issue\r\n                // - https://github.com/SteveSanderson/knockout/issues/197\r\n                // - http://www.matts411.com/post/setting_the_name_attribute_in_ie_dom/\r\n                if (ieVersion <= 7) {\r\n                    try {\r\n                        var escapedName = element.name.replace(/[&<>'\"]/g, function(r){ return \"&#\" + r.charCodeAt(0) + \";\"; });\r\n                        element.mergeAttributes(document.createElement(\"<input name='\" + escapedName + \"'/>\"), false);\r\n                    }\r\n                    catch(e) {} // For IE9 with doc mode \"IE9 Standards\" and browser mode \"IE9 Compatibility View\"\r\n                }\r\n            },\r\n\r\n            forceRefresh: function(node) {\r\n                // Workaround for an IE9 rendering bug - https://github.com/SteveSanderson/knockout/issues/209\r\n                if (ieVersion >= 9) {\r\n                    // For text nodes and comment nodes (most likely virtual elements), we will have to refresh the container\r\n                    var elem = node.nodeType == 1 ? node : node.parentNode;\r\n                    if (elem.style)\r\n                        elem.style.zoom = elem.style.zoom;\r\n                }\r\n            },\r\n\r\n            ensureSelectElementIsRenderedCorrectly: function(selectElement) {\r\n                // Workaround for IE9 rendering bug - it doesn't reliably display all the text in dynamically-added select boxes unless you force it to re-render by updating the width.\r\n                // (See https://github.com/SteveSanderson/knockout/issues/312, http://stackoverflow.com/questions/5908494/select-only-shows-first-char-of-selected-option)\r\n                // Also fixes IE7 and IE8 bug that causes selects to be zero width if enclosed by 'if' or 'with'. (See issue #839)\r\n                if (ieVersion) {\r\n                    var originalWidth = selectElement.style.width;\r\n                    selectElement.style.width = 0;\r\n                    selectElement.style.width = originalWidth;\r\n                }\r\n            },\r\n\r\n            range: function (min, max) {\r\n                min = ko.utils.unwrapObservable(min);\r\n                max = ko.utils.unwrapObservable(max);\r\n                var result = [];\r\n                for (var i = min; i <= max; i++)\r\n                    result.push(i);\r\n                return result;\r\n            },\r\n\r\n            makeArray: function(arrayLikeObject) {\r\n                var result = [];\r\n                for (var i = 0, j = arrayLikeObject.length; i < j; i++) {\r\n                    result.push(arrayLikeObject[i]);\r\n                };\r\n                return result;\r\n            },\r\n\r\n            createSymbolOrString: function(identifier) {\r\n                return canUseSymbols ? Symbol(identifier) : identifier;\r\n            },\r\n\r\n            isIe6 : isIe6,\r\n            isIe7 : isIe7,\r\n            ieVersion : ieVersion,\r\n\r\n            getFormFields: function(form, fieldName) {\r\n                var fields = ko.utils.makeArray(form.getElementsByTagName(\"input\")).concat(ko.utils.makeArray(form.getElementsByTagName(\"textarea\")));\r\n                var isMatchingField = (typeof fieldName == 'string')\r\n                    ? function(field) { return field.name === fieldName }\r\n                    : function(field) { return fieldName.test(field.name) }; // Treat fieldName as regex or object containing predicate\r\n                var matches = [];\r\n                for (var i = fields.length - 1; i >= 0; i--) {\r\n                    if (isMatchingField(fields[i]))\r\n                        matches.push(fields[i]);\r\n                };\r\n                return matches;\r\n            },\r\n\r\n            parseJson: function (jsonString) {\r\n                if (typeof jsonString == \"string\") {\r\n                    jsonString = ko.utils.stringTrim(jsonString);\r\n                    if (jsonString) {\r\n                        if (JSON && JSON.parse) // Use native parsing where available\r\n                            return JSON.parse(jsonString);\r\n                        return (new Function(\"return \" + jsonString))(); // Fallback on less safe parsing for older browsers\r\n                    }\r\n                }\r\n                return null;\r\n            },\r\n\r\n            stringifyJson: function (data, replacer, space) {   // replacer and space are optional\r\n                if (!JSON || !JSON.stringify)\r\n                    throw new Error(\"Cannot find JSON.stringify(). Some browsers (e.g., IE < 8) don't support it natively, but you can overcome this by adding a script reference to json2.js, downloadable from http://www.json.org/json2.js\");\r\n                return JSON.stringify(ko.utils.unwrapObservable(data), replacer, space);\r\n            },\r\n\r\n            postJson: function (urlOrForm, data, options) {\r\n                options = options || {};\r\n                var params = options['params'] || {};\r\n                var includeFields = options['includeFields'] || this.fieldsIncludedWithJsonPost;\r\n                var url = urlOrForm;\r\n\r\n                // If we were given a form, use its 'action' URL and pick out any requested field values\r\n                if((typeof urlOrForm == 'object') && (ko.utils.tagNameLower(urlOrForm) === \"form\")) {\r\n                    var originalForm = urlOrForm;\r\n                    url = originalForm.action;\r\n                    for (var i = includeFields.length - 1; i >= 0; i--) {\r\n                        var fields = ko.utils.getFormFields(originalForm, includeFields[i]);\r\n                        for (var j = fields.length - 1; j >= 0; j--)\r\n                            params[fields[j].name] = fields[j].value;\r\n                    }\r\n                }\r\n\r\n                data = ko.utils.unwrapObservable(data);\r\n                var form = document.createElement(\"form\");\r\n                form.style.display = \"none\";\r\n                form.action = url;\r\n                form.method = \"post\";\r\n                for (var key in data) {\r\n                    // Since 'data' this is a model object, we include all properties including those inherited from its prototype\r\n                    var input = document.createElement(\"input\");\r\n                    input.type = \"hidden\";\r\n                    input.name = key;\r\n                    input.value = ko.utils.stringifyJson(ko.utils.unwrapObservable(data[key]));\r\n                    form.appendChild(input);\r\n                }\r\n                objectForEach(params, function(key, value) {\r\n                    var input = document.createElement(\"input\");\r\n                    input.type = \"hidden\";\r\n                    input.name = key;\r\n                    input.value = value;\r\n                    form.appendChild(input);\r\n                });\r\n                document.body.appendChild(form);\r\n                options['submitter'] ? options['submitter'](form) : form.submit();\r\n                setTimeout(function () { form.parentNode.removeChild(form); }, 0);\r\n            }\r\n        }\r\n    }());\r\n\r\n    ko.exportSymbol('utils', ko.utils);\r\n    ko.exportSymbol('utils.arrayForEach', ko.utils.arrayForEach);\r\n    ko.exportSymbol('utils.arrayFirst', ko.utils.arrayFirst);\r\n    ko.exportSymbol('utils.arrayFilter', ko.utils.arrayFilter);\r\n    ko.exportSymbol('utils.arrayGetDistinctValues', ko.utils.arrayGetDistinctValues);\r\n    ko.exportSymbol('utils.arrayIndexOf', ko.utils.arrayIndexOf);\r\n    ko.exportSymbol('utils.arrayMap', ko.utils.arrayMap);\r\n    ko.exportSymbol('utils.arrayPushAll', ko.utils.arrayPushAll);\r\n    ko.exportSymbol('utils.arrayRemoveItem', ko.utils.arrayRemoveItem);\r\n    ko.exportSymbol('utils.cloneNodes', ko.utils.cloneNodes);\r\n    ko.exportSymbol('utils.createSymbolOrString', ko.utils.createSymbolOrString);\r\n    ko.exportSymbol('utils.extend', ko.utils.extend);\r\n    ko.exportSymbol('utils.fieldsIncludedWithJsonPost', ko.utils.fieldsIncludedWithJsonPost);\r\n    ko.exportSymbol('utils.getFormFields', ko.utils.getFormFields);\r\n    ko.exportSymbol('utils.objectMap', ko.utils.objectMap);\r\n    ko.exportSymbol('utils.peekObservable', ko.utils.peekObservable);\r\n    ko.exportSymbol('utils.postJson', ko.utils.postJson);\r\n    ko.exportSymbol('utils.parseJson', ko.utils.parseJson);\r\n    ko.exportSymbol('utils.registerEventHandler', ko.utils.registerEventHandler);\r\n    ko.exportSymbol('utils.stringifyJson', ko.utils.stringifyJson);\r\n    ko.exportSymbol('utils.range', ko.utils.range);\r\n    ko.exportSymbol('utils.toggleDomNodeCssClass', ko.utils.toggleDomNodeCssClass);\r\n    ko.exportSymbol('utils.triggerEvent', ko.utils.triggerEvent);\r\n    ko.exportSymbol('utils.unwrapObservable', ko.utils.unwrapObservable);\r\n    ko.exportSymbol('utils.objectForEach', ko.utils.objectForEach);\r\n    ko.exportSymbol('utils.addOrRemoveItem', ko.utils.addOrRemoveItem);\r\n    ko.exportSymbol('utils.setTextContent', ko.utils.setTextContent);\r\n    ko.exportSymbol('unwrap', ko.utils.unwrapObservable); // Convenient shorthand, because this is used so commonly\r\n\r\n    if (!Function.prototype['bind']) {\r\n        // Function.prototype.bind is a standard part of ECMAScript 5th Edition (December 2009, http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-262.pdf)\r\n        // In case the browser doesn't implement it natively, provide a JavaScript implementation. This implementation is based on the one in prototype.js\r\n        Function.prototype['bind'] = function (object) {\r\n            var originalFunction = this;\r\n            if (arguments.length === 1) {\r\n                return function () {\r\n                    return originalFunction.apply(object, arguments);\r\n                };\r\n            } else {\r\n                var partialArgs = Array.prototype.slice.call(arguments, 1);\r\n                return function () {\r\n                    var args = partialArgs.slice(0);\r\n                    args.push.apply(args, arguments);\r\n                    return originalFunction.apply(object, args);\r\n                };\r\n            }\r\n        };\r\n    }\r\n\r\n    ko.utils.domData = new (function () {\r\n        var uniqueId = 0;\r\n        var dataStoreKeyExpandoPropertyName = \"__ko__\" + (new Date).getTime();\r\n        var dataStore = {};\r\n\r\n        var getDataForNode, clear;\r\n        if (!ko.utils.ieVersion) {\r\n            // We considered using WeakMap, but it has a problem in IE 11 and Edge that prevents using\r\n            // it cross-window, so instead we just store the data directly on the node.\r\n            // See https://github.com/knockout/knockout/issues/2141\r\n            getDataForNode = function (node, createIfNotFound) {\r\n                var dataForNode = node[dataStoreKeyExpandoPropertyName];\r\n                if (!dataForNode && createIfNotFound) {\r\n                    dataForNode = node[dataStoreKeyExpandoPropertyName] = {};\r\n                }\r\n                return dataForNode;\r\n            };\r\n            clear = function (node) {\r\n                if (node[dataStoreKeyExpandoPropertyName]) {\r\n                    delete node[dataStoreKeyExpandoPropertyName];\r\n                    return true; // Exposing \"did clean\" flag purely so specs can infer whether things have been cleaned up as intended\r\n                }\r\n                return false;\r\n            };\r\n        } else {\r\n            // Old IE versions have memory issues if you store objects on the node, so we use a\r\n            // separate data storage and link to it from the node using a string key.\r\n            getDataForNode = function (node, createIfNotFound) {\r\n                var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\r\n                var hasExistingDataStore = dataStoreKey && (dataStoreKey !== \"null\") && dataStore[dataStoreKey];\r\n                if (!hasExistingDataStore) {\r\n                    if (!createIfNotFound)\r\n                        return undefined;\r\n                    dataStoreKey = node[dataStoreKeyExpandoPropertyName] = \"ko\" + uniqueId++;\r\n                    dataStore[dataStoreKey] = {};\r\n                }\r\n                return dataStore[dataStoreKey];\r\n            };\r\n            clear = function (node) {\r\n                var dataStoreKey = node[dataStoreKeyExpandoPropertyName];\r\n                if (dataStoreKey) {\r\n                    delete dataStore[dataStoreKey];\r\n                    node[dataStoreKeyExpandoPropertyName] = null;\r\n                    return true; // Exposing \"did clean\" flag purely so specs can infer whether things have been cleaned up as intended\r\n                }\r\n                return false;\r\n            };\r\n        }\r\n\r\n        return {\r\n            get: function (node, key) {\r\n                var dataForNode = getDataForNode(node, false);\r\n                return dataForNode && dataForNode[key];\r\n            },\r\n            set: function (node, key, value) {\r\n                // Make sure we don't actually create a new domData key if we are actually deleting a value\r\n                var dataForNode = getDataForNode(node, value !== undefined /* createIfNotFound */);\r\n                dataForNode && (dataForNode[key] = value);\r\n            },\r\n            getOrSet: function (node, key, value) {\r\n                var dataForNode = getDataForNode(node, true /* createIfNotFound */);\r\n                return dataForNode[key] || (dataForNode[key] = value);\r\n            },\r\n            clear: clear,\r\n\r\n            nextKey: function () {\r\n                return (uniqueId++) + dataStoreKeyExpandoPropertyName;\r\n            }\r\n        };\r\n    })();\r\n\r\n    ko.exportSymbol('utils.domData', ko.utils.domData);\r\n    ko.exportSymbol('utils.domData.clear', ko.utils.domData.clear); // Exporting only so specs can clear up after themselves fully\r\n\r\n    ko.utils.domNodeDisposal = new (function () {\r\n        var domDataKey = ko.utils.domData.nextKey();\r\n        var cleanableNodeTypes = { 1: true, 8: true, 9: true };       // Element, Comment, Document\r\n        var cleanableNodeTypesWithDescendants = { 1: true, 9: true }; // Element, Document\r\n\r\n        function getDisposeCallbacksCollection(node, createIfNotFound) {\r\n            var allDisposeCallbacks = ko.utils.domData.get(node, domDataKey);\r\n            if ((allDisposeCallbacks === undefined) && createIfNotFound) {\r\n                allDisposeCallbacks = [];\r\n                ko.utils.domData.set(node, domDataKey, allDisposeCallbacks);\r\n            }\r\n            return allDisposeCallbacks;\r\n        }\r\n        function destroyCallbacksCollection(node) {\r\n            ko.utils.domData.set(node, domDataKey, undefined);\r\n        }\r\n\r\n        function cleanSingleNode(node) {\r\n            // Run all the dispose callbacks\r\n            var callbacks = getDisposeCallbacksCollection(node, false);\r\n            if (callbacks) {\r\n                callbacks = callbacks.slice(0); // Clone, as the array may be modified during iteration (typically, callbacks will remove themselves)\r\n                for (var i = 0; i < callbacks.length; i++)\r\n                    callbacks[i](node);\r\n            }\r\n\r\n            // Erase the DOM data\r\n            ko.utils.domData.clear(node);\r\n\r\n            // Perform cleanup needed by external libraries (currently only jQuery, but can be extended)\r\n            ko.utils.domNodeDisposal[\"cleanExternalData\"](node);\r\n\r\n            // Clear any immediate-child comment nodes, as these wouldn't have been found by\r\n            // node.getElementsByTagName(\"*\") in cleanNode() (comment nodes aren't elements)\r\n            if (cleanableNodeTypesWithDescendants[node.nodeType]) {\r\n                cleanNodesInList(node.childNodes, true/*onlyComments*/);\r\n            }\r\n        }\r\n\r\n        function cleanNodesInList(nodeList, onlyComments) {\r\n            var cleanedNodes = [], lastCleanedNode;\r\n            for (var i = 0; i < nodeList.length; i++) {\r\n                if (!onlyComments || nodeList[i].nodeType === 8) {\r\n                    cleanSingleNode(cleanedNodes[cleanedNodes.length] = lastCleanedNode = nodeList[i]);\r\n                    if (nodeList[i] !== lastCleanedNode) {\r\n                        while (i-- && ko.utils.arrayIndexOf(cleanedNodes, nodeList[i]) == -1) {}\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        return {\r\n            addDisposeCallback : function(node, callback) {\r\n                if (typeof callback != \"function\")\r\n                    throw new Error(\"Callback must be a function\");\r\n                getDisposeCallbacksCollection(node, true).push(callback);\r\n            },\r\n\r\n            removeDisposeCallback : function(node, callback) {\r\n                var callbacksCollection = getDisposeCallbacksCollection(node, false);\r\n                if (callbacksCollection) {\r\n                    ko.utils.arrayRemoveItem(callbacksCollection, callback);\r\n                    if (callbacksCollection.length == 0)\r\n                        destroyCallbacksCollection(node);\r\n                }\r\n            },\r\n\r\n            cleanNode : function(node) {\r\n                // First clean this node, where applicable\r\n                if (cleanableNodeTypes[node.nodeType]) {\r\n                    cleanSingleNode(node);\r\n\r\n                    // ... then its descendants, where applicable\r\n                    if (cleanableNodeTypesWithDescendants[node.nodeType]) {\r\n                        cleanNodesInList(node.getElementsByTagName(\"*\"));\r\n                    }\r\n                }\r\n                return node;\r\n            },\r\n\r\n            removeNode : function(node) {\r\n                ko.cleanNode(node);\r\n                if (node.parentNode)\r\n                    node.parentNode.removeChild(node);\r\n            },\r\n\r\n            \"cleanExternalData\" : function (node) {\r\n                // Special support for jQuery here because it's so commonly used.\r\n                // Many jQuery plugins (including jquery.tmpl) store data using jQuery's equivalent of domData\r\n                // so notify it to tear down any resources associated with the node & descendants here.\r\n                if (jQueryInstance && (typeof jQueryInstance['cleanData'] == \"function\"))\r\n                    jQueryInstance['cleanData']([node]);\r\n            }\r\n        };\r\n    })();\r\n    ko.cleanNode = ko.utils.domNodeDisposal.cleanNode; // Shorthand name for convenience\r\n    ko.removeNode = ko.utils.domNodeDisposal.removeNode; // Shorthand name for convenience\r\n    ko.exportSymbol('cleanNode', ko.cleanNode);\r\n    ko.exportSymbol('removeNode', ko.removeNode);\r\n    ko.exportSymbol('utils.domNodeDisposal', ko.utils.domNodeDisposal);\r\n    ko.exportSymbol('utils.domNodeDisposal.addDisposeCallback', ko.utils.domNodeDisposal.addDisposeCallback);\r\n    ko.exportSymbol('utils.domNodeDisposal.removeDisposeCallback', ko.utils.domNodeDisposal.removeDisposeCallback);\r\n    (function () {\r\n        var none = [0, \"\", \"\"],\r\n            table = [1, \"<table>\", \"</table>\"],\r\n            tbody = [2, \"<table><tbody>\", \"</tbody></table>\"],\r\n            tr = [3, \"<table><tbody><tr>\", \"</tr></tbody></table>\"],\r\n            select = [1, \"<select multiple='multiple'>\", \"</select>\"],\r\n            lookup = {\r\n                'thead': table,\r\n                'tbody': table,\r\n                'tfoot': table,\r\n                'tr': tbody,\r\n                'td': tr,\r\n                'th': tr,\r\n                'option': select,\r\n                'optgroup': select\r\n            },\r\n\r\n            // This is needed for old IE if you're *not* using either jQuery or innerShiv. Doesn't affect other cases.\r\n            mayRequireCreateElementHack = ko.utils.ieVersion <= 8;\r\n\r\n        function getWrap(tags) {\r\n            var m = tags.match(/^(?:<!--.*?-->\\s*?)*?<([a-z]+)[\\s>]/);\r\n            return (m && lookup[m[1]]) || none;\r\n        }\r\n\r\n        function simpleHtmlParse(html, documentContext) {\r\n            documentContext || (documentContext = document);\r\n            var windowContext = documentContext['parentWindow'] || documentContext['defaultView'] || window;\r\n\r\n            // Based on jQuery's \"clean\" function, but only accounting for table-related elements.\r\n            // If you have referenced jQuery, this won't be used anyway - KO will use jQuery's \"clean\" function directly\r\n\r\n            // Note that there's still an issue in IE < 9 whereby it will discard comment nodes that are the first child of\r\n            // a descendant node. For example: \"<div><!-- mycomment -->abc</div>\" will get parsed as \"<div>abc</div>\"\r\n            // This won't affect anyone who has referenced jQuery, and there's always the workaround of inserting a dummy node\r\n            // (possibly a text node) in front of the comment. So, KO does not attempt to workaround this IE issue automatically at present.\r\n\r\n            // Trim whitespace, otherwise indexOf won't work as expected\r\n            var tags = ko.utils.stringTrim(html).toLowerCase(), div = documentContext.createElement(\"div\"),\r\n                wrap = getWrap(tags),\r\n                depth = wrap[0];\r\n\r\n            // Go to html and back, then peel off extra wrappers\r\n            // Note that we always prefix with some dummy text, because otherwise, IE<9 will strip out leading comment nodes in descendants. Total madness.\r\n            var markup = \"ignored<div>\" + wrap[1] + html + wrap[2] + \"</div>\";\r\n            if (typeof windowContext['innerShiv'] == \"function\") {\r\n                // Note that innerShiv is deprecated in favour of html5shiv. We should consider adding\r\n                // support for html5shiv (except if no explicit support is needed, e.g., if html5shiv\r\n                // somehow shims the native APIs so it just works anyway)\r\n                div.appendChild(windowContext['innerShiv'](markup));\r\n            } else {\r\n                if (mayRequireCreateElementHack) {\r\n                    // The document.createElement('my-element') trick to enable custom elements in IE6-8\r\n                    // only works if we assign innerHTML on an element associated with that document.\r\n                    documentContext.body.appendChild(div);\r\n                }\r\n\r\n                div.innerHTML = markup;\r\n\r\n                if (mayRequireCreateElementHack) {\r\n                    div.parentNode.removeChild(div);\r\n                }\r\n            }\r\n\r\n            // Move to the right depth\r\n            while (depth--)\r\n                div = div.lastChild;\r\n\r\n            return ko.utils.makeArray(div.lastChild.childNodes);\r\n        }\r\n\r\n        function jQueryHtmlParse(html, documentContext) {\r\n            // jQuery's \"parseHTML\" function was introduced in jQuery 1.8.0 and is a documented public API.\r\n            if (jQueryInstance['parseHTML']) {\r\n                return jQueryInstance['parseHTML'](html, documentContext) || []; // Ensure we always return an array and never null\r\n            } else {\r\n                // For jQuery < 1.8.0, we fall back on the undocumented internal \"clean\" function.\r\n                var elems = jQueryInstance['clean']([html], documentContext);\r\n\r\n                // As of jQuery 1.7.1, jQuery parses the HTML by appending it to some dummy parent nodes held in an in-memory document fragment.\r\n                // Unfortunately, it never clears the dummy parent nodes from the document fragment, so it leaks memory over time.\r\n                // Fix this by finding the top-most dummy parent element, and detaching it from its owner fragment.\r\n                if (elems && elems[0]) {\r\n                    // Find the top-most parent element that's a direct child of a document fragment\r\n                    var elem = elems[0];\r\n                    while (elem.parentNode && elem.parentNode.nodeType !== 11 /* i.e., DocumentFragment */)\r\n                        elem = elem.parentNode;\r\n                    // ... then detach it\r\n                    if (elem.parentNode)\r\n                        elem.parentNode.removeChild(elem);\r\n                }\r\n\r\n                return elems;\r\n            }\r\n        }\r\n\r\n        ko.utils.parseHtmlFragment = function(html, documentContext) {\r\n            return jQueryInstance ?\r\n                jQueryHtmlParse(html, documentContext) :   // As below, benefit from jQuery's optimisations where possible\r\n                simpleHtmlParse(html, documentContext);  // ... otherwise, this simple logic will do in most common cases.\r\n        };\r\n\r\n        ko.utils.parseHtmlForTemplateNodes = function(html, documentContext) {\r\n            var nodes = ko.utils.parseHtmlFragment(html, documentContext);\r\n            return (nodes.length && nodes[0].parentElement) || ko.utils.moveCleanedNodesToContainerElement(nodes);\r\n        };\r\n\r\n        ko.utils.setHtml = function(node, html) {\r\n            ko.utils.emptyDomNode(node);\r\n\r\n            // There's no legitimate reason to display a stringified observable without unwrapping it, so we'll unwrap it\r\n            html = ko.utils.unwrapObservable(html);\r\n\r\n            if ((html !== null) && (html !== undefined)) {\r\n                if (typeof html != 'string')\r\n                    html = html.toString();\r\n\r\n                // jQuery contains a lot of sophisticated code to parse arbitrary HTML fragments,\r\n                // for example <tr> elements which are not normally allowed to exist on their own.\r\n                // If you've referenced jQuery we'll use that rather than duplicating its code.\r\n                if (jQueryInstance) {\r\n                    jQueryInstance(node)['html'](html);\r\n                } else {\r\n                    // ... otherwise, use KO's own parsing logic.\r\n                    var parsedNodes = ko.utils.parseHtmlFragment(html, node.ownerDocument);\r\n                    for (var i = 0; i < parsedNodes.length; i++)\r\n                        node.appendChild(parsedNodes[i]);\r\n                }\r\n            }\r\n        };\r\n    })();\r\n\r\n    ko.exportSymbol('utils.parseHtmlFragment', ko.utils.parseHtmlFragment);\r\n    ko.exportSymbol('utils.setHtml', ko.utils.setHtml);\r\n\r\n    ko.memoization = (function () {\r\n        var memos = {};\r\n\r\n        function randomMax8HexChars() {\r\n            return (((1 + Math.random()) * 0x100000000) | 0).toString(16).substring(1);\r\n        }\r\n        function generateRandomId() {\r\n            return randomMax8HexChars() + randomMax8HexChars();\r\n        }\r\n        function findMemoNodes(rootNode, appendToArray) {\r\n            if (!rootNode)\r\n                return;\r\n            if (rootNode.nodeType == 8) {\r\n                var memoId = ko.memoization.parseMemoText(rootNode.nodeValue);\r\n                if (memoId != null)\r\n                    appendToArray.push({ domNode: rootNode, memoId: memoId });\r\n            } else if (rootNode.nodeType == 1) {\r\n                for (var i = 0, childNodes = rootNode.childNodes, j = childNodes.length; i < j; i++)\r\n                    findMemoNodes(childNodes[i], appendToArray);\r\n            }\r\n        }\r\n\r\n        return {\r\n            memoize: function (callback) {\r\n                if (typeof callback != \"function\")\r\n                    throw new Error(\"You can only pass a function to ko.memoization.memoize()\");\r\n                var memoId = generateRandomId();\r\n                memos[memoId] = callback;\r\n                return \"<!--[ko_memo:\" + memoId + \"]-->\";\r\n            },\r\n\r\n            unmemoize: function (memoId, callbackParams) {\r\n                var callback = memos[memoId];\r\n                if (callback === undefined)\r\n                    throw new Error(\"Couldn't find any memo with ID \" + memoId + \". Perhaps it's already been unmemoized.\");\r\n                try {\r\n                    callback.apply(null, callbackParams || []);\r\n                    return true;\r\n                }\r\n                finally { delete memos[memoId]; }\r\n            },\r\n\r\n            unmemoizeDomNodeAndDescendants: function (domNode, extraCallbackParamsArray) {\r\n                var memos = [];\r\n                findMemoNodes(domNode, memos);\r\n                for (var i = 0, j = memos.length; i < j; i++) {\r\n                    var node = memos[i].domNode;\r\n                    var combinedParams = [node];\r\n                    if (extraCallbackParamsArray)\r\n                        ko.utils.arrayPushAll(combinedParams, extraCallbackParamsArray);\r\n                    ko.memoization.unmemoize(memos[i].memoId, combinedParams);\r\n                    node.nodeValue = \"\"; // Neuter this node so we don't try to unmemoize it again\r\n                    if (node.parentNode)\r\n                        node.parentNode.removeChild(node); // If possible, erase it totally (not always possible - someone else might just hold a reference to it then call unmemoizeDomNodeAndDescendants again)\r\n                }\r\n            },\r\n\r\n            parseMemoText: function (memoText) {\r\n                var match = memoText.match(/^\\[ko_memo\\:(.*?)\\]$/);\r\n                return match ? match[1] : null;\r\n            }\r\n        };\r\n    })();\r\n\r\n    ko.exportSymbol('memoization', ko.memoization);\r\n    ko.exportSymbol('memoization.memoize', ko.memoization.memoize);\r\n    ko.exportSymbol('memoization.unmemoize', ko.memoization.unmemoize);\r\n    ko.exportSymbol('memoization.parseMemoText', ko.memoization.parseMemoText);\r\n    ko.exportSymbol('memoization.unmemoizeDomNodeAndDescendants', ko.memoization.unmemoizeDomNodeAndDescendants);\r\n    ko.tasks = (function () {\r\n        var scheduler,\r\n            taskQueue = [],\r\n            taskQueueLength = 0,\r\n            nextHandle = 1,\r\n            nextIndexToProcess = 0;\r\n\r\n        if (window['MutationObserver']) {\r\n            // Chrome 27+, Firefox 14+, IE 11+, Opera 15+, Safari 6.1+\r\n            // From https://github.com/petkaantonov/bluebird * Copyright (c) 2014 Petka Antonov * License: MIT\r\n            scheduler = (function (callback) {\r\n                var div = document.createElement(\"div\");\r\n                new MutationObserver(callback).observe(div, {attributes: true});\r\n                return function () { div.classList.toggle(\"foo\"); };\r\n            })(scheduledProcess);\r\n        } else if (document && \"onreadystatechange\" in document.createElement(\"script\")) {\r\n            // IE 6-10\r\n            // From https://github.com/YuzuJS/setImmediate * Copyright (c) 2012 Barnesandnoble.com, llc, Donavon West, and Domenic Denicola * License: MIT\r\n            scheduler = function (callback) {\r\n                var script = document.createElement(\"script\");\r\n                script.onreadystatechange = function () {\r\n                    script.onreadystatechange = null;\r\n                    document.documentElement.removeChild(script);\r\n                    script = null;\r\n                    callback();\r\n                };\r\n                document.documentElement.appendChild(script);\r\n            };\r\n        } else {\r\n            scheduler = function (callback) {\r\n                setTimeout(callback, 0);\r\n            };\r\n        }\r\n\r\n        function processTasks() {\r\n            if (taskQueueLength) {\r\n                // Each mark represents the end of a logical group of tasks and the number of these groups is\r\n                // limited to prevent unchecked recursion.\r\n                var mark = taskQueueLength, countMarks = 0;\r\n\r\n                // nextIndexToProcess keeps track of where we are in the queue; processTasks can be called recursively without issue\r\n                for (var task; nextIndexToProcess < taskQueueLength; ) {\r\n                    if (task = taskQueue[nextIndexToProcess++]) {\r\n                        if (nextIndexToProcess > mark) {\r\n                            if (++countMarks >= 5000) {\r\n                                nextIndexToProcess = taskQueueLength;   // skip all tasks remaining in the queue since any of them could be causing the recursion\r\n                                ko.utils.deferError(Error(\"'Too much recursion' after processing \" + countMarks + \" task groups.\"));\r\n                                break;\r\n                            }\r\n                            mark = taskQueueLength;\r\n                        }\r\n                        try {\r\n                            task();\r\n                        } catch (ex) {\r\n                            ko.utils.deferError(ex);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function scheduledProcess() {\r\n            processTasks();\r\n\r\n            // Reset the queue\r\n            nextIndexToProcess = taskQueueLength = taskQueue.length = 0;\r\n        }\r\n\r\n        function scheduleTaskProcessing() {\r\n            ko.tasks['scheduler'](scheduledProcess);\r\n        }\r\n\r\n        var tasks = {\r\n            'scheduler': scheduler,     // Allow overriding the scheduler\r\n\r\n            schedule: function (func) {\r\n                if (!taskQueueLength) {\r\n                    scheduleTaskProcessing();\r\n                }\r\n\r\n                taskQueue[taskQueueLength++] = func;\r\n                return nextHandle++;\r\n            },\r\n\r\n            cancel: function (handle) {\r\n                var index = handle - (nextHandle - taskQueueLength);\r\n                if (index >= nextIndexToProcess && index < taskQueueLength) {\r\n                    taskQueue[index] = null;\r\n                }\r\n            },\r\n\r\n            // For testing only: reset the queue and return the previous queue length\r\n            'resetForTesting': function () {\r\n                var length = taskQueueLength - nextIndexToProcess;\r\n                nextIndexToProcess = taskQueueLength = taskQueue.length = 0;\r\n                return length;\r\n            },\r\n\r\n            runEarly: processTasks\r\n        };\r\n\r\n        return tasks;\r\n    })();\r\n\r\n    ko.exportSymbol('tasks', ko.tasks);\r\n    ko.exportSymbol('tasks.schedule', ko.tasks.schedule);\r\n    //ko.exportSymbol('tasks.cancel', ko.tasks.cancel);  \"cancel\" isn't minified\r\n    ko.exportSymbol('tasks.runEarly', ko.tasks.runEarly);\r\n    ko.extenders = {\r\n        'throttle': function(target, timeout) {\r\n            // Throttling means two things:\r\n\r\n            // (1) For dependent observables, we throttle *evaluations* so that, no matter how fast its dependencies\r\n            //     notify updates, the target doesn't re-evaluate (and hence doesn't notify) faster than a certain rate\r\n            target['throttleEvaluation'] = timeout;\r\n\r\n            // (2) For writable targets (observables, or writable dependent observables), we throttle *writes*\r\n            //     so the target cannot change value synchronously or faster than a certain rate\r\n            var writeTimeoutInstance = null;\r\n            return ko.dependentObservable({\r\n                'read': target,\r\n                'write': function(value) {\r\n                    clearTimeout(writeTimeoutInstance);\r\n                    writeTimeoutInstance = ko.utils.setTimeout(function() {\r\n                        target(value);\r\n                    }, timeout);\r\n                }\r\n            });\r\n        },\r\n\r\n        'rateLimit': function(target, options) {\r\n            var timeout, method, limitFunction;\r\n\r\n            if (typeof options == 'number') {\r\n                timeout = options;\r\n            } else {\r\n                timeout = options['timeout'];\r\n                method = options['method'];\r\n            }\r\n\r\n            // rateLimit supersedes deferred updates\r\n            target._deferUpdates = false;\r\n\r\n            limitFunction = typeof method == 'function' ? method : method == 'notifyWhenChangesStop' ?  debounce : throttle;\r\n            target.limit(function(callback) {\r\n                return limitFunction(callback, timeout, options);\r\n            });\r\n        },\r\n\r\n        'deferred': function(target, options) {\r\n            if (options !== true) {\r\n                throw new Error('The \\'deferred\\' extender only accepts the value \\'true\\', because it is not supported to turn deferral off once enabled.')\r\n            }\r\n\r\n            if (!target._deferUpdates) {\r\n                target._deferUpdates = true;\r\n                target.limit(function (callback) {\r\n                    var handle,\r\n                        ignoreUpdates = false;\r\n                    return function () {\r\n                        if (!ignoreUpdates) {\r\n                            ko.tasks.cancel(handle);\r\n                            handle = ko.tasks.schedule(callback);\r\n\r\n                            try {\r\n                                ignoreUpdates = true;\r\n                                target['notifySubscribers'](undefined, 'dirty');\r\n                            } finally {\r\n                                ignoreUpdates = false;\r\n                            }\r\n                        }\r\n                    };\r\n                });\r\n            }\r\n        },\r\n\r\n        'notify': function(target, notifyWhen) {\r\n            target[\"equalityComparer\"] = notifyWhen == \"always\" ?\r\n                null :  // null equalityComparer means to always notify\r\n                valuesArePrimitiveAndEqual;\r\n        }\r\n    };\r\n\r\n    var primitiveTypes = { 'undefined':1, 'boolean':1, 'number':1, 'string':1 };\r\n    function valuesArePrimitiveAndEqual(a, b) {\r\n        var oldValueIsPrimitive = (a === null) || (typeof(a) in primitiveTypes);\r\n        return oldValueIsPrimitive ? (a === b) : false;\r\n    }\r\n\r\n    function throttle(callback, timeout) {\r\n        var timeoutInstance;\r\n        return function () {\r\n            if (!timeoutInstance) {\r\n                timeoutInstance = ko.utils.setTimeout(function () {\r\n                    timeoutInstance = undefined;\r\n                    callback();\r\n                }, timeout);\r\n            }\r\n        };\r\n    }\r\n\r\n    function debounce(callback, timeout) {\r\n        var timeoutInstance;\r\n        return function () {\r\n            clearTimeout(timeoutInstance);\r\n            timeoutInstance = ko.utils.setTimeout(callback, timeout);\r\n        };\r\n    }\r\n\r\n    function applyExtenders(requestedExtenders) {\r\n        var target = this;\r\n        if (requestedExtenders) {\r\n            ko.utils.objectForEach(requestedExtenders, function(key, value) {\r\n                var extenderHandler = ko.extenders[key];\r\n                if (typeof extenderHandler == 'function') {\r\n                    target = extenderHandler(target, value) || target;\r\n                }\r\n            });\r\n        }\r\n        return target;\r\n    }\r\n\r\n    ko.exportSymbol('extenders', ko.extenders);\r\n\r\n    ko.subscription = function (target, callback, disposeCallback) {\r\n        this._target = target;\r\n        this._callback = callback;\r\n        this._disposeCallback = disposeCallback;\r\n        this._isDisposed = false;\r\n        this._node = null;\r\n        this._domNodeDisposalCallback = null;\r\n        ko.exportProperty(this, 'dispose', this.dispose);\r\n        ko.exportProperty(this, 'disposeWhenNodeIsRemoved', this.disposeWhenNodeIsRemoved);\r\n    };\r\n    ko.subscription.prototype.dispose = function () {\r\n        if (this._domNodeDisposalCallback) {\r\n            ko.utils.domNodeDisposal.removeDisposeCallback(this._node, this._domNodeDisposalCallback);\r\n        }\r\n        this._isDisposed = true;\r\n        this._disposeCallback();\r\n    };\r\n    ko.subscription.prototype.disposeWhenNodeIsRemoved = function (node) {\r\n        this._node = node;\r\n        ko.utils.domNodeDisposal.addDisposeCallback(node, this._domNodeDisposalCallback = this.dispose.bind(this));\r\n    };\r\n\r\n    ko.subscribable = function () {\r\n        ko.utils.setPrototypeOfOrExtend(this, ko_subscribable_fn);\r\n        ko_subscribable_fn.init(this);\r\n    }\r\n\r\n    var defaultEvent = \"change\";\r\n\r\n    // Moved out of \"limit\" to avoid the extra closure\r\n    function limitNotifySubscribers(value, event) {\r\n        if (!event || event === defaultEvent) {\r\n            this._limitChange(value);\r\n        } else if (event === 'beforeChange') {\r\n            this._limitBeforeChange(value);\r\n        } else {\r\n            this._origNotifySubscribers(value, event);\r\n        }\r\n    }\r\n\r\n    var ko_subscribable_fn = {\r\n        init: function(instance) {\r\n            instance._subscriptions = { \"change\": [] };\r\n            instance._versionNumber = 1;\r\n        },\r\n\r\n        subscribe: function (callback, callbackTarget, event) {\r\n            var self = this;\r\n\r\n            event = event || defaultEvent;\r\n            var boundCallback = callbackTarget ? callback.bind(callbackTarget) : callback;\r\n\r\n            var subscription = new ko.subscription(self, boundCallback, function () {\r\n                ko.utils.arrayRemoveItem(self._subscriptions[event], subscription);\r\n                if (self.afterSubscriptionRemove)\r\n                    self.afterSubscriptionRemove(event);\r\n            });\r\n\r\n            if (self.beforeSubscriptionAdd)\r\n                self.beforeSubscriptionAdd(event);\r\n\r\n            if (!self._subscriptions[event])\r\n                self._subscriptions[event] = [];\r\n            self._subscriptions[event].push(subscription);\r\n\r\n            return subscription;\r\n        },\r\n\r\n        \"notifySubscribers\": function (valueToNotify, event) {\r\n            event = event || defaultEvent;\r\n            if (event === defaultEvent) {\r\n                this.updateVersion();\r\n            }\r\n            if (this.hasSubscriptionsForEvent(event)) {\r\n                var subs = event === defaultEvent && this._changeSubscriptions || this._subscriptions[event].slice(0);\r\n                try {\r\n                    ko.dependencyDetection.begin(); // Begin suppressing dependency detection (by setting the top frame to undefined)\r\n                    for (var i = 0, subscription; subscription = subs[i]; ++i) {\r\n                        // In case a subscription was disposed during the arrayForEach cycle, check\r\n                        // for isDisposed on each subscription before invoking its callback\r\n                        if (!subscription._isDisposed)\r\n                            subscription._callback(valueToNotify);\r\n                    }\r\n                } finally {\r\n                    ko.dependencyDetection.end(); // End suppressing dependency detection\r\n                }\r\n            }\r\n        },\r\n\r\n        getVersion: function () {\r\n            return this._versionNumber;\r\n        },\r\n\r\n        hasChanged: function (versionToCheck) {\r\n            return this.getVersion() !== versionToCheck;\r\n        },\r\n\r\n        updateVersion: function () {\r\n            ++this._versionNumber;\r\n        },\r\n\r\n        limit: function(limitFunction) {\r\n            var self = this, selfIsObservable = ko.isObservable(self),\r\n                ignoreBeforeChange, notifyNextChange, previousValue, pendingValue, didUpdate,\r\n                beforeChange = 'beforeChange';\r\n\r\n            if (!self._origNotifySubscribers) {\r\n                self._origNotifySubscribers = self[\"notifySubscribers\"];\r\n                self[\"notifySubscribers\"] = limitNotifySubscribers;\r\n            }\r\n\r\n            var finish = limitFunction(function() {\r\n                self._notificationIsPending = false;\r\n\r\n                // If an observable provided a reference to itself, access it to get the latest value.\r\n                // This allows computed observables to delay calculating their value until needed.\r\n                if (selfIsObservable && pendingValue === self) {\r\n                    pendingValue = self._evalIfChanged ? self._evalIfChanged() : self();\r\n                }\r\n                var shouldNotify = notifyNextChange || (didUpdate && self.isDifferent(previousValue, pendingValue));\r\n\r\n                didUpdate = notifyNextChange = ignoreBeforeChange = false;\r\n\r\n                if (shouldNotify) {\r\n                    self._origNotifySubscribers(previousValue = pendingValue);\r\n                }\r\n            });\r\n\r\n            self._limitChange = function(value, isDirty) {\r\n                if (!isDirty || !self._notificationIsPending) {\r\n                    didUpdate = !isDirty;\r\n                }\r\n                self._changeSubscriptions = self._subscriptions[defaultEvent].slice(0);\r\n                self._notificationIsPending = ignoreBeforeChange = true;\r\n                pendingValue = value;\r\n                finish();\r\n            };\r\n            self._limitBeforeChange = function(value) {\r\n                if (!ignoreBeforeChange) {\r\n                    previousValue = value;\r\n                    self._origNotifySubscribers(value, beforeChange);\r\n                }\r\n            };\r\n            self._recordUpdate = function() {\r\n                didUpdate = true;\r\n            };\r\n            self._notifyNextChangeIfValueIsDifferent = function() {\r\n                if (self.isDifferent(previousValue, self.peek(true /*evaluate*/))) {\r\n                    notifyNextChange = true;\r\n                }\r\n            };\r\n        },\r\n\r\n        hasSubscriptionsForEvent: function(event) {\r\n            return this._subscriptions[event] && this._subscriptions[event].length;\r\n        },\r\n\r\n        getSubscriptionsCount: function (event) {\r\n            if (event) {\r\n                return this._subscriptions[event] && this._subscriptions[event].length || 0;\r\n            } else {\r\n                var total = 0;\r\n                ko.utils.objectForEach(this._subscriptions, function(eventName, subscriptions) {\r\n                    if (eventName !== 'dirty')\r\n                        total += subscriptions.length;\r\n                });\r\n                return total;\r\n            }\r\n        },\r\n\r\n        isDifferent: function(oldValue, newValue) {\r\n            return !this['equalityComparer'] || !this['equalityComparer'](oldValue, newValue);\r\n        },\r\n\r\n        toString: function() {\r\n          return '[object Object]'\r\n        },\r\n\r\n        extend: applyExtenders\r\n    };\r\n\r\n    ko.exportProperty(ko_subscribable_fn, 'init', ko_subscribable_fn.init);\r\n    ko.exportProperty(ko_subscribable_fn, 'subscribe', ko_subscribable_fn.subscribe);\r\n    ko.exportProperty(ko_subscribable_fn, 'extend', ko_subscribable_fn.extend);\r\n    ko.exportProperty(ko_subscribable_fn, 'getSubscriptionsCount', ko_subscribable_fn.getSubscriptionsCount);\r\n\r\n    // For browsers that support proto assignment, we overwrite the prototype of each\r\n    // observable instance. Since observables are functions, we need Function.prototype\r\n    // to still be in the prototype chain.\r\n    if (ko.utils.canSetPrototype) {\r\n        ko.utils.setPrototypeOf(ko_subscribable_fn, Function.prototype);\r\n    }\r\n\r\n    ko.subscribable['fn'] = ko_subscribable_fn;\r\n\r\n\r\n    ko.isSubscribable = function (instance) {\r\n        return instance != null && typeof instance.subscribe == \"function\" && typeof instance[\"notifySubscribers\"] == \"function\";\r\n    };\r\n\r\n    ko.exportSymbol('subscribable', ko.subscribable);\r\n    ko.exportSymbol('isSubscribable', ko.isSubscribable);\r\n\r\n    ko.computedContext = ko.dependencyDetection = (function () {\r\n        var outerFrames = [],\r\n            currentFrame,\r\n            lastId = 0;\r\n\r\n        // Return a unique ID that can be assigned to an observable for dependency tracking.\r\n        // Theoretically, you could eventually overflow the number storage size, resulting\r\n        // in duplicate IDs. But in JavaScript, the largest exact integral value is 2^53\r\n        // or 9,007,199,254,740,992. If you created 1,000,000 IDs per second, it would\r\n        // take over 285 years to reach that number.\r\n        // Reference http://blog.vjeux.com/2010/javascript/javascript-max_int-number-limits.html\r\n        function getId() {\r\n            return ++lastId;\r\n        }\r\n\r\n        function begin(options) {\r\n            outerFrames.push(currentFrame);\r\n            currentFrame = options;\r\n        }\r\n\r\n        function end() {\r\n            currentFrame = outerFrames.pop();\r\n        }\r\n\r\n        return {\r\n            begin: begin,\r\n\r\n            end: end,\r\n\r\n            registerDependency: function (subscribable) {\r\n                if (currentFrame) {\r\n                    if (!ko.isSubscribable(subscribable))\r\n                        throw new Error(\"Only subscribable things can act as dependencies\");\r\n                    currentFrame.callback.call(currentFrame.callbackTarget, subscribable, subscribable._id || (subscribable._id = getId()));\r\n                }\r\n            },\r\n\r\n            ignore: function (callback, callbackTarget, callbackArgs) {\r\n                try {\r\n                    begin();\r\n                    return callback.apply(callbackTarget, callbackArgs || []);\r\n                } finally {\r\n                    end();\r\n                }\r\n            },\r\n\r\n            getDependenciesCount: function () {\r\n                if (currentFrame)\r\n                    return currentFrame.computed.getDependenciesCount();\r\n            },\r\n\r\n            getDependencies: function () {\r\n                if (currentFrame)\r\n                    return currentFrame.computed.getDependencies();\r\n            },\r\n\r\n            isInitial: function() {\r\n                if (currentFrame)\r\n                    return currentFrame.isInitial;\r\n            }\r\n        };\r\n    })();\r\n\r\n    ko.exportSymbol('computedContext', ko.computedContext);\r\n    ko.exportSymbol('computedContext.getDependenciesCount', ko.computedContext.getDependenciesCount);\r\n    ko.exportSymbol('computedContext.getDependencies', ko.computedContext.getDependencies);\r\n    ko.exportSymbol('computedContext.isInitial', ko.computedContext.isInitial);\r\n    ko.exportSymbol('computedContext.registerDependency', ko.computedContext.registerDependency);\r\n\r\n    ko.exportSymbol('ignoreDependencies', ko.ignoreDependencies = ko.dependencyDetection.ignore);\r\n    var observableLatestValue = ko.utils.createSymbolOrString('_latestValue');\r\n\r\n    ko.observable = function (initialValue) {\r\n        function observable() {\r\n            if (arguments.length > 0) {\r\n                // Write\r\n\r\n                // Ignore writes if the value hasn't changed\r\n                if (observable.isDifferent(observable[observableLatestValue], arguments[0])) {\r\n                    observable.valueWillMutate();\r\n                    observable[observableLatestValue] = arguments[0];\r\n                    observable.valueHasMutated();\r\n                }\r\n                return this; // Permits chained assignments\r\n            }\r\n            else {\r\n                // Read\r\n                ko.dependencyDetection.registerDependency(observable); // The caller only needs to be notified of changes if they did a \"read\" operation\r\n                return observable[observableLatestValue];\r\n            }\r\n        }\r\n\r\n        observable[observableLatestValue] = initialValue;\r\n\r\n        // Inherit from 'subscribable'\r\n        if (!ko.utils.canSetPrototype) {\r\n            // 'subscribable' won't be on the prototype chain unless we put it there directly\r\n            ko.utils.extend(observable, ko.subscribable['fn']);\r\n        }\r\n        ko.subscribable['fn'].init(observable);\r\n\r\n        // Inherit from 'observable'\r\n        ko.utils.setPrototypeOfOrExtend(observable, observableFn);\r\n\r\n        if (ko.options['deferUpdates']) {\r\n            ko.extenders['deferred'](observable, true);\r\n        }\r\n\r\n        return observable;\r\n    }\r\n\r\n    // Define prototype for observables\r\n    var observableFn = {\r\n        'equalityComparer': valuesArePrimitiveAndEqual,\r\n        peek: function() { return this[observableLatestValue]; },\r\n        valueHasMutated: function () {\r\n            this['notifySubscribers'](this[observableLatestValue], 'spectate');\r\n            this['notifySubscribers'](this[observableLatestValue]);\r\n        },\r\n        valueWillMutate: function () { this['notifySubscribers'](this[observableLatestValue], 'beforeChange'); }\r\n    };\r\n\r\n    // Note that for browsers that don't support proto assignment, the\r\n    // inheritance chain is created manually in the ko.observable constructor\r\n    if (ko.utils.canSetPrototype) {\r\n        ko.utils.setPrototypeOf(observableFn, ko.subscribable['fn']);\r\n    }\r\n\r\n    var protoProperty = ko.observable.protoProperty = '__ko_proto__';\r\n    observableFn[protoProperty] = ko.observable;\r\n\r\n    ko.isObservable = function (instance) {\r\n        var proto = typeof instance == 'function' && instance[protoProperty];\r\n        if (proto && proto !== observableFn[protoProperty] && proto !== ko.computed['fn'][protoProperty]) {\r\n            throw Error(\"Invalid object that looks like an observable; possibly from another Knockout instance\");\r\n        }\r\n        return !!proto;\r\n    };\r\n\r\n    ko.isWriteableObservable = function (instance) {\r\n        return (typeof instance == 'function' && (\r\n            (instance[protoProperty] === observableFn[protoProperty]) ||  // Observable\r\n            (instance[protoProperty] === ko.computed['fn'][protoProperty] && instance.hasWriteFunction)));   // Writable computed observable\r\n    };\r\n\r\n    ko.exportSymbol('observable', ko.observable);\r\n    ko.exportSymbol('isObservable', ko.isObservable);\r\n    ko.exportSymbol('isWriteableObservable', ko.isWriteableObservable);\r\n    ko.exportSymbol('isWritableObservable', ko.isWriteableObservable);\r\n    ko.exportSymbol('observable.fn', observableFn);\r\n    ko.exportProperty(observableFn, 'peek', observableFn.peek);\r\n    ko.exportProperty(observableFn, 'valueHasMutated', observableFn.valueHasMutated);\r\n    ko.exportProperty(observableFn, 'valueWillMutate', observableFn.valueWillMutate);\r\n    ko.observableArray = function (initialValues) {\r\n        initialValues = initialValues || [];\r\n\r\n        if (typeof initialValues != 'object' || !('length' in initialValues))\r\n            throw new Error(\"The argument passed when initializing an observable array must be an array, or null, or undefined.\");\r\n\r\n        var result = ko.observable(initialValues);\r\n        ko.utils.setPrototypeOfOrExtend(result, ko.observableArray['fn']);\r\n        return result.extend({'trackArrayChanges':true});\r\n    };\r\n\r\n    ko.observableArray['fn'] = {\r\n        'remove': function (valueOrPredicate) {\r\n            var underlyingArray = this.peek();\r\n            var removedValues = [];\r\n            var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\r\n            for (var i = 0; i < underlyingArray.length; i++) {\r\n                var value = underlyingArray[i];\r\n                if (predicate(value)) {\r\n                    if (removedValues.length === 0) {\r\n                        this.valueWillMutate();\r\n                    }\r\n                    if (underlyingArray[i] !== value) {\r\n                        throw Error(\"Array modified during remove; cannot remove item\");\r\n                    }\r\n                    removedValues.push(value);\r\n                    underlyingArray.splice(i, 1);\r\n                    i--;\r\n                }\r\n            }\r\n            if (removedValues.length) {\r\n                this.valueHasMutated();\r\n            }\r\n            return removedValues;\r\n        },\r\n\r\n        'removeAll': function (arrayOfValues) {\r\n            // If you passed zero args, we remove everything\r\n            if (arrayOfValues === undefined) {\r\n                var underlyingArray = this.peek();\r\n                var allValues = underlyingArray.slice(0);\r\n                this.valueWillMutate();\r\n                underlyingArray.splice(0, underlyingArray.length);\r\n                this.valueHasMutated();\r\n                return allValues;\r\n            }\r\n            // If you passed an arg, we interpret it as an array of entries to remove\r\n            if (!arrayOfValues)\r\n                return [];\r\n            return this['remove'](function (value) {\r\n                return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\r\n            });\r\n        },\r\n\r\n        'destroy': function (valueOrPredicate) {\r\n            var underlyingArray = this.peek();\r\n            var predicate = typeof valueOrPredicate == \"function\" && !ko.isObservable(valueOrPredicate) ? valueOrPredicate : function (value) { return value === valueOrPredicate; };\r\n            this.valueWillMutate();\r\n            for (var i = underlyingArray.length - 1; i >= 0; i--) {\r\n                var value = underlyingArray[i];\r\n                if (predicate(value))\r\n                    value[\"_destroy\"] = true;\r\n            }\r\n            this.valueHasMutated();\r\n        },\r\n\r\n        'destroyAll': function (arrayOfValues) {\r\n            // If you passed zero args, we destroy everything\r\n            if (arrayOfValues === undefined)\r\n                return this['destroy'](function() { return true });\r\n\r\n            // If you passed an arg, we interpret it as an array of entries to destroy\r\n            if (!arrayOfValues)\r\n                return [];\r\n            return this['destroy'](function (value) {\r\n                return ko.utils.arrayIndexOf(arrayOfValues, value) >= 0;\r\n            });\r\n        },\r\n\r\n        'indexOf': function (item) {\r\n            var underlyingArray = this();\r\n            return ko.utils.arrayIndexOf(underlyingArray, item);\r\n        },\r\n\r\n        'replace': function(oldItem, newItem) {\r\n            var index = this['indexOf'](oldItem);\r\n            if (index >= 0) {\r\n                this.valueWillMutate();\r\n                this.peek()[index] = newItem;\r\n                this.valueHasMutated();\r\n            }\r\n        },\r\n\r\n        'sorted': function (compareFunction) {\r\n            var arrayCopy = this().slice(0);\r\n            return compareFunction ? arrayCopy.sort(compareFunction) : arrayCopy.sort();\r\n        },\r\n\r\n        'reversed': function () {\r\n            return this().slice(0).reverse();\r\n        }\r\n    };\r\n\r\n    // Note that for browsers that don't support proto assignment, the\r\n    // inheritance chain is created manually in the ko.observableArray constructor\r\n    if (ko.utils.canSetPrototype) {\r\n        ko.utils.setPrototypeOf(ko.observableArray['fn'], ko.observable['fn']);\r\n    }\r\n\r\n    // Populate ko.observableArray.fn with read/write functions from native arrays\r\n    // Important: Do not add any additional functions here that may reasonably be used to *read* data from the array\r\n    // because we'll eval them without causing subscriptions, so ko.computed output could end up getting stale\r\n    ko.utils.arrayForEach([\"pop\", \"push\", \"reverse\", \"shift\", \"sort\", \"splice\", \"unshift\"], function (methodName) {\r\n        ko.observableArray['fn'][methodName] = function () {\r\n            // Use \"peek\" to avoid creating a subscription in any computed that we're executing in the context of\r\n            // (for consistency with mutating regular observables)\r\n            var underlyingArray = this.peek();\r\n            this.valueWillMutate();\r\n            this.cacheDiffForKnownOperation(underlyingArray, methodName, arguments);\r\n            var methodCallResult = underlyingArray[methodName].apply(underlyingArray, arguments);\r\n            this.valueHasMutated();\r\n            // The native sort and reverse methods return a reference to the array, but it makes more sense to return the observable array instead.\r\n            return methodCallResult === underlyingArray ? this : methodCallResult;\r\n        };\r\n    });\r\n\r\n    // Populate ko.observableArray.fn with read-only functions from native arrays\r\n    ko.utils.arrayForEach([\"slice\"], function (methodName) {\r\n        ko.observableArray['fn'][methodName] = function () {\r\n            var underlyingArray = this();\r\n            return underlyingArray[methodName].apply(underlyingArray, arguments);\r\n        };\r\n    });\r\n\r\n    ko.isObservableArray = function (instance) {\r\n        return ko.isObservable(instance)\r\n            && typeof instance[\"remove\"] == \"function\"\r\n            && typeof instance[\"push\"] == \"function\";\r\n    };\r\n\r\n    ko.exportSymbol('observableArray', ko.observableArray);\r\n    ko.exportSymbol('isObservableArray', ko.isObservableArray);\r\n    var arrayChangeEventName = 'arrayChange';\r\n    ko.extenders['trackArrayChanges'] = function(target, options) {\r\n        // Use the provided options--each call to trackArrayChanges overwrites the previously set options\r\n        target.compareArrayOptions = {};\r\n        if (options && typeof options == \"object\") {\r\n            ko.utils.extend(target.compareArrayOptions, options);\r\n        }\r\n        target.compareArrayOptions['sparse'] = true;\r\n\r\n        // Only modify the target observable once\r\n        if (target.cacheDiffForKnownOperation) {\r\n            return;\r\n        }\r\n        var trackingChanges = false,\r\n            cachedDiff = null,\r\n            arrayChangeSubscription,\r\n            pendingNotifications = 0,\r\n            underlyingNotifySubscribersFunction,\r\n            underlyingBeforeSubscriptionAddFunction = target.beforeSubscriptionAdd,\r\n            underlyingAfterSubscriptionRemoveFunction = target.afterSubscriptionRemove;\r\n\r\n        // Watch \"subscribe\" calls, and for array change events, ensure change tracking is enabled\r\n        target.beforeSubscriptionAdd = function (event) {\r\n            if (underlyingBeforeSubscriptionAddFunction)\r\n                underlyingBeforeSubscriptionAddFunction.call(target, event);\r\n            if (event === arrayChangeEventName) {\r\n                trackChanges();\r\n            }\r\n        };\r\n        // Watch \"dispose\" calls, and for array change events, ensure change tracking is disabled when all are disposed\r\n        target.afterSubscriptionRemove = function (event) {\r\n            if (underlyingAfterSubscriptionRemoveFunction)\r\n                underlyingAfterSubscriptionRemoveFunction.call(target, event);\r\n            if (event === arrayChangeEventName && !target.hasSubscriptionsForEvent(arrayChangeEventName)) {\r\n                if (underlyingNotifySubscribersFunction) {\r\n                    target['notifySubscribers'] = underlyingNotifySubscribersFunction;\r\n                    underlyingNotifySubscribersFunction = undefined;\r\n                }\r\n                if (arrayChangeSubscription) {\r\n                    arrayChangeSubscription.dispose();\r\n                }\r\n                arrayChangeSubscription = null;\r\n                trackingChanges = false;\r\n            }\r\n        };\r\n\r\n        function trackChanges() {\r\n            // Calling 'trackChanges' multiple times is the same as calling it once\r\n            if (trackingChanges) {\r\n                return;\r\n            }\r\n\r\n            trackingChanges = true;\r\n\r\n            // Intercept \"notifySubscribers\" to track how many times it was called.\r\n            underlyingNotifySubscribersFunction = target['notifySubscribers'];\r\n            target['notifySubscribers'] = function(valueToNotify, event) {\r\n                if (!event || event === defaultEvent) {\r\n                    ++pendingNotifications;\r\n                }\r\n                return underlyingNotifySubscribersFunction.apply(this, arguments);\r\n            };\r\n\r\n            // Each time the array changes value, capture a clone so that on the next\r\n            // change it's possible to produce a diff\r\n            var previousContents = [].concat(target.peek() || []);\r\n            cachedDiff = null;\r\n            arrayChangeSubscription = target.subscribe(function(currentContents) {\r\n                // Make a copy of the current contents and ensure it's an array\r\n                currentContents = [].concat(currentContents || []);\r\n\r\n                // Compute the diff and issue notifications, but only if someone is listening\r\n                if (target.hasSubscriptionsForEvent(arrayChangeEventName)) {\r\n                    var changes = getChanges(previousContents, currentContents);\r\n                }\r\n\r\n                // Eliminate references to the old, removed items, so they can be GCed\r\n                previousContents = currentContents;\r\n                cachedDiff = null;\r\n                pendingNotifications = 0;\r\n\r\n                if (changes && changes.length) {\r\n                    target['notifySubscribers'](changes, arrayChangeEventName);\r\n                }\r\n            });\r\n        }\r\n\r\n        function getChanges(previousContents, currentContents) {\r\n            // We try to re-use cached diffs.\r\n            // The scenarios where pendingNotifications > 1 are when using rate-limiting or the Deferred Updates\r\n            // plugin, which without this check would not be compatible with arrayChange notifications. Normally,\r\n            // notifications are issued immediately so we wouldn't be queueing up more than one.\r\n            if (!cachedDiff || pendingNotifications > 1) {\r\n                cachedDiff = ko.utils.compareArrays(previousContents, currentContents, target.compareArrayOptions);\r\n            }\r\n\r\n            return cachedDiff;\r\n        }\r\n\r\n        target.cacheDiffForKnownOperation = function(rawArray, operationName, args) {\r\n            // Only run if we're currently tracking changes for this observable array\r\n            // and there aren't any pending deferred notifications.\r\n            if (!trackingChanges || pendingNotifications) {\r\n                return;\r\n            }\r\n            var diff = [],\r\n                arrayLength = rawArray.length,\r\n                argsLength = args.length,\r\n                offset = 0;\r\n\r\n            function pushDiff(status, value, index) {\r\n                return diff[diff.length] = { 'status': status, 'value': value, 'index': index };\r\n            }\r\n            switch (operationName) {\r\n                case 'push':\r\n                    offset = arrayLength;\r\n                case 'unshift':\r\n                    for (var index = 0; index < argsLength; index++) {\r\n                        pushDiff('added', args[index], offset + index);\r\n                    }\r\n                    break;\r\n\r\n                case 'pop':\r\n                    offset = arrayLength - 1;\r\n                case 'shift':\r\n                    if (arrayLength) {\r\n                        pushDiff('deleted', rawArray[offset], offset);\r\n                    }\r\n                    break;\r\n\r\n                case 'splice':\r\n                    // Negative start index means 'from end of array'. After that we clamp to [0...arrayLength].\r\n                    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/splice\r\n                    var startIndex = Math.min(Math.max(0, args[0] < 0 ? arrayLength + args[0] : args[0]), arrayLength),\r\n                        endDeleteIndex = argsLength === 1 ? arrayLength : Math.min(startIndex + (args[1] || 0), arrayLength),\r\n                        endAddIndex = startIndex + argsLength - 2,\r\n                        endIndex = Math.max(endDeleteIndex, endAddIndex),\r\n                        additions = [], deletions = [];\r\n                    for (var index = startIndex, argsIndex = 2; index < endIndex; ++index, ++argsIndex) {\r\n                        if (index < endDeleteIndex)\r\n                            deletions.push(pushDiff('deleted', rawArray[index], index));\r\n                        if (index < endAddIndex)\r\n                            additions.push(pushDiff('added', args[argsIndex], index));\r\n                    }\r\n                    ko.utils.findMovesInArrayComparison(deletions, additions);\r\n                    break;\r\n\r\n                default:\r\n                    return;\r\n            }\r\n            cachedDiff = diff;\r\n        };\r\n    };\r\n    var computedState = ko.utils.createSymbolOrString('_state');\r\n\r\n    ko.computed = ko.dependentObservable = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget, options) {\r\n        if (typeof evaluatorFunctionOrOptions === \"object\") {\r\n            // Single-parameter syntax - everything is on this \"options\" param\r\n            options = evaluatorFunctionOrOptions;\r\n        } else {\r\n            // Multi-parameter syntax - construct the options according to the params passed\r\n            options = options || {};\r\n            if (evaluatorFunctionOrOptions) {\r\n                options[\"read\"] = evaluatorFunctionOrOptions;\r\n            }\r\n        }\r\n        if (typeof options[\"read\"] != \"function\")\r\n            throw Error(\"Pass a function that returns the value of the ko.computed\");\r\n\r\n        var writeFunction = options[\"write\"];\r\n        var state = {\r\n            latestValue: undefined,\r\n            isStale: true,\r\n            isDirty: true,\r\n            isBeingEvaluated: false,\r\n            suppressDisposalUntilDisposeWhenReturnsFalse: false,\r\n            isDisposed: false,\r\n            pure: false,\r\n            isSleeping: false,\r\n            readFunction: options[\"read\"],\r\n            evaluatorFunctionTarget: evaluatorFunctionTarget || options[\"owner\"],\r\n            disposeWhenNodeIsRemoved: options[\"disposeWhenNodeIsRemoved\"] || options.disposeWhenNodeIsRemoved || null,\r\n            disposeWhen: options[\"disposeWhen\"] || options.disposeWhen,\r\n            domNodeDisposalCallback: null,\r\n            dependencyTracking: {},\r\n            dependenciesCount: 0,\r\n            evaluationTimeoutInstance: null\r\n        };\r\n\r\n        function computedObservable() {\r\n            if (arguments.length > 0) {\r\n                if (typeof writeFunction === \"function\") {\r\n                    // Writing a value\r\n                    writeFunction.apply(state.evaluatorFunctionTarget, arguments);\r\n                } else {\r\n                    throw new Error(\"Cannot write a value to a ko.computed unless you specify a 'write' option. If you wish to read the current value, don't pass any parameters.\");\r\n                }\r\n                return this; // Permits chained assignments\r\n            } else {\r\n                // Reading the value\r\n                if (!state.isDisposed) {\r\n                    ko.dependencyDetection.registerDependency(computedObservable);\r\n                }\r\n                if (state.isDirty || (state.isSleeping && computedObservable.haveDependenciesChanged())) {\r\n                    computedObservable.evaluateImmediate();\r\n                }\r\n                return state.latestValue;\r\n            }\r\n        }\r\n\r\n        computedObservable[computedState] = state;\r\n        computedObservable.hasWriteFunction = typeof writeFunction === \"function\";\r\n\r\n        // Inherit from 'subscribable'\r\n        if (!ko.utils.canSetPrototype) {\r\n            // 'subscribable' won't be on the prototype chain unless we put it there directly\r\n            ko.utils.extend(computedObservable, ko.subscribable['fn']);\r\n        }\r\n        ko.subscribable['fn'].init(computedObservable);\r\n\r\n        // Inherit from 'computed'\r\n        ko.utils.setPrototypeOfOrExtend(computedObservable, computedFn);\r\n\r\n        if (options['pure']) {\r\n            state.pure = true;\r\n            state.isSleeping = true;     // Starts off sleeping; will awake on the first subscription\r\n            ko.utils.extend(computedObservable, pureComputedOverrides);\r\n        } else if (options['deferEvaluation']) {\r\n            ko.utils.extend(computedObservable, deferEvaluationOverrides);\r\n        }\r\n\r\n        if (ko.options['deferUpdates']) {\r\n            ko.extenders['deferred'](computedObservable, true);\r\n        }\r\n\r\n        if (DEBUG) {\r\n            // #1731 - Aid debugging by exposing the computed's options\r\n            computedObservable[\"_options\"] = options;\r\n        }\r\n\r\n        if (state.disposeWhenNodeIsRemoved) {\r\n            // Since this computed is associated with a DOM node, and we don't want to dispose the computed\r\n            // until the DOM node is *removed* from the document (as opposed to never having been in the document),\r\n            // we'll prevent disposal until \"disposeWhen\" first returns false.\r\n            state.suppressDisposalUntilDisposeWhenReturnsFalse = true;\r\n\r\n            // disposeWhenNodeIsRemoved: true can be used to opt into the \"only dispose after first false result\"\r\n            // behaviour even if there's no specific node to watch. In that case, clear the option so we don't try\r\n            // to watch for a non-node's disposal. This technique is intended for KO's internal use only and shouldn't\r\n            // be documented or used by application code, as it's likely to change in a future version of KO.\r\n            if (!state.disposeWhenNodeIsRemoved.nodeType) {\r\n                state.disposeWhenNodeIsRemoved = null;\r\n            }\r\n        }\r\n\r\n        // Evaluate, unless sleeping or deferEvaluation is true\r\n        if (!state.isSleeping && !options['deferEvaluation']) {\r\n            computedObservable.evaluateImmediate();\r\n        }\r\n\r\n        // Attach a DOM node disposal callback so that the computed will be proactively disposed as soon as the node is\r\n        // removed using ko.removeNode. But skip if isActive is false (there will never be any dependencies to dispose).\r\n        if (state.disposeWhenNodeIsRemoved && computedObservable.isActive()) {\r\n            ko.utils.domNodeDisposal.addDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback = function () {\r\n                computedObservable.dispose();\r\n            });\r\n        }\r\n\r\n        return computedObservable;\r\n    };\r\n\r\n    // Utility function that disposes a given dependencyTracking entry\r\n    function computedDisposeDependencyCallback(id, entryToDispose) {\r\n        if (entryToDispose !== null && entryToDispose.dispose) {\r\n            entryToDispose.dispose();\r\n        }\r\n    }\r\n\r\n    // This function gets called each time a dependency is detected while evaluating a computed.\r\n    // It's factored out as a shared function to avoid creating unnecessary function instances during evaluation.\r\n    function computedBeginDependencyDetectionCallback(subscribable, id) {\r\n        var computedObservable = this.computedObservable,\r\n            state = computedObservable[computedState];\r\n        if (!state.isDisposed) {\r\n            if (this.disposalCount && this.disposalCandidates[id]) {\r\n                // Don't want to dispose this subscription, as it's still being used\r\n                computedObservable.addDependencyTracking(id, subscribable, this.disposalCandidates[id]);\r\n                this.disposalCandidates[id] = null; // No need to actually delete the property - disposalCandidates is a transient object anyway\r\n                --this.disposalCount;\r\n            } else if (!state.dependencyTracking[id]) {\r\n                // Brand new subscription - add it\r\n                computedObservable.addDependencyTracking(id, subscribable, state.isSleeping ? { _target: subscribable } : computedObservable.subscribeToDependency(subscribable));\r\n            }\r\n            // If the observable we've accessed has a pending notification, ensure we get notified of the actual final value (bypass equality checks)\r\n            if (subscribable._notificationIsPending) {\r\n                subscribable._notifyNextChangeIfValueIsDifferent();\r\n            }\r\n        }\r\n    }\r\n\r\n    var computedFn = {\r\n        \"equalityComparer\": valuesArePrimitiveAndEqual,\r\n        getDependenciesCount: function () {\r\n            return this[computedState].dependenciesCount;\r\n        },\r\n        getDependencies: function () {\r\n            var dependencyTracking = this[computedState].dependencyTracking, dependentObservables = [];\r\n\r\n            ko.utils.objectForEach(dependencyTracking, function (id, dependency) {\r\n                dependentObservables[dependency._order] = dependency._target;\r\n            });\r\n\r\n            return dependentObservables;\r\n        },\r\n        addDependencyTracking: function (id, target, trackingObj) {\r\n            if (this[computedState].pure && target === this) {\r\n                throw Error(\"A 'pure' computed must not be called recursively\");\r\n            }\r\n\r\n            this[computedState].dependencyTracking[id] = trackingObj;\r\n            trackingObj._order = this[computedState].dependenciesCount++;\r\n            trackingObj._version = target.getVersion();\r\n        },\r\n        haveDependenciesChanged: function () {\r\n            var id, dependency, dependencyTracking = this[computedState].dependencyTracking;\r\n            for (id in dependencyTracking) {\r\n                if (Object.prototype.hasOwnProperty.call(dependencyTracking, id)) {\r\n                    dependency = dependencyTracking[id];\r\n                    if ((this._evalDelayed && dependency._target._notificationIsPending) || dependency._target.hasChanged(dependency._version)) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n        },\r\n        markDirty: function () {\r\n            // Process \"dirty\" events if we can handle delayed notifications\r\n            if (this._evalDelayed && !this[computedState].isBeingEvaluated) {\r\n                this._evalDelayed(false /*isChange*/);\r\n            }\r\n        },\r\n        isActive: function () {\r\n            var state = this[computedState];\r\n            return state.isDirty || state.dependenciesCount > 0;\r\n        },\r\n        respondToChange: function () {\r\n            // Ignore \"change\" events if we've already scheduled a delayed notification\r\n            if (!this._notificationIsPending) {\r\n                this.evaluatePossiblyAsync();\r\n            } else if (this[computedState].isDirty) {\r\n                this[computedState].isStale = true;\r\n            }\r\n        },\r\n        subscribeToDependency: function (target) {\r\n            if (target._deferUpdates) {\r\n                var dirtySub = target.subscribe(this.markDirty, this, 'dirty'),\r\n                    changeSub = target.subscribe(this.respondToChange, this);\r\n                return {\r\n                    _target: target,\r\n                    dispose: function () {\r\n                        dirtySub.dispose();\r\n                        changeSub.dispose();\r\n                    }\r\n                };\r\n            } else {\r\n                return target.subscribe(this.evaluatePossiblyAsync, this);\r\n            }\r\n        },\r\n        evaluatePossiblyAsync: function () {\r\n            var computedObservable = this,\r\n                throttleEvaluationTimeout = computedObservable['throttleEvaluation'];\r\n            if (throttleEvaluationTimeout && throttleEvaluationTimeout >= 0) {\r\n                clearTimeout(this[computedState].evaluationTimeoutInstance);\r\n                this[computedState].evaluationTimeoutInstance = ko.utils.setTimeout(function () {\r\n                    computedObservable.evaluateImmediate(true /*notifyChange*/);\r\n                }, throttleEvaluationTimeout);\r\n            } else if (computedObservable._evalDelayed) {\r\n                computedObservable._evalDelayed(true /*isChange*/);\r\n            } else {\r\n                computedObservable.evaluateImmediate(true /*notifyChange*/);\r\n            }\r\n        },\r\n        evaluateImmediate: function (notifyChange) {\r\n            var computedObservable = this,\r\n                state = computedObservable[computedState],\r\n                disposeWhen = state.disposeWhen,\r\n                changed = false;\r\n\r\n            if (state.isBeingEvaluated) {\r\n                // If the evaluation of a ko.computed causes side effects, it's possible that it will trigger its own re-evaluation.\r\n                // This is not desirable (it's hard for a developer to realise a chain of dependencies might cause this, and they almost\r\n                // certainly didn't intend infinite re-evaluations). So, for predictability, we simply prevent ko.computeds from causing\r\n                // their own re-evaluation. Further discussion at https://github.com/SteveSanderson/knockout/pull/387\r\n                return;\r\n            }\r\n\r\n            // Do not evaluate (and possibly capture new dependencies) if disposed\r\n            if (state.isDisposed) {\r\n                return;\r\n            }\r\n\r\n            if (state.disposeWhenNodeIsRemoved && !ko.utils.domNodeIsAttachedToDocument(state.disposeWhenNodeIsRemoved) || disposeWhen && disposeWhen()) {\r\n                // See comment above about suppressDisposalUntilDisposeWhenReturnsFalse\r\n                if (!state.suppressDisposalUntilDisposeWhenReturnsFalse) {\r\n                    computedObservable.dispose();\r\n                    return;\r\n                }\r\n            } else {\r\n                // It just did return false, so we can stop suppressing now\r\n                state.suppressDisposalUntilDisposeWhenReturnsFalse = false;\r\n            }\r\n\r\n            state.isBeingEvaluated = true;\r\n            try {\r\n                changed = this.evaluateImmediate_CallReadWithDependencyDetection(notifyChange);\r\n            } finally {\r\n                state.isBeingEvaluated = false;\r\n            }\r\n\r\n            return changed;\r\n        },\r\n        evaluateImmediate_CallReadWithDependencyDetection: function (notifyChange) {\r\n            // This function is really just part of the evaluateImmediate logic. You would never call it from anywhere else.\r\n            // Factoring it out into a separate function means it can be independent of the try/catch block in evaluateImmediate,\r\n            // which contributes to saving about 40% off the CPU overhead of computed evaluation (on V8 at least).\r\n\r\n            var computedObservable = this,\r\n                state = computedObservable[computedState],\r\n                changed = false;\r\n\r\n            // Initially, we assume that none of the subscriptions are still being used (i.e., all are candidates for disposal).\r\n            // Then, during evaluation, we cross off any that are in fact still being used.\r\n            var isInitial = state.pure ? undefined : !state.dependenciesCount,   // If we're evaluating when there are no previous dependencies, it must be the first time\r\n                dependencyDetectionContext = {\r\n                    computedObservable: computedObservable,\r\n                    disposalCandidates: state.dependencyTracking,\r\n                    disposalCount: state.dependenciesCount\r\n                };\r\n\r\n            ko.dependencyDetection.begin({\r\n                callbackTarget: dependencyDetectionContext,\r\n                callback: computedBeginDependencyDetectionCallback,\r\n                computed: computedObservable,\r\n                isInitial: isInitial\r\n            });\r\n\r\n            state.dependencyTracking = {};\r\n            state.dependenciesCount = 0;\r\n\r\n            var newValue = this.evaluateImmediate_CallReadThenEndDependencyDetection(state, dependencyDetectionContext);\r\n\r\n            if (!state.dependenciesCount) {\r\n                computedObservable.dispose();\r\n                changed = true; // When evaluation causes a disposal, make sure all dependent computeds get notified so they'll see the new state\r\n            } else {\r\n                changed = computedObservable.isDifferent(state.latestValue, newValue);\r\n            }\r\n\r\n            if (changed) {\r\n                if (!state.isSleeping) {\r\n                    computedObservable[\"notifySubscribers\"](state.latestValue, \"beforeChange\");\r\n                } else {\r\n                    computedObservable.updateVersion();\r\n                }\r\n\r\n                state.latestValue = newValue;\r\n                if (DEBUG) computedObservable._latestValue = newValue;\r\n\r\n                computedObservable[\"notifySubscribers\"](state.latestValue, \"spectate\");\r\n\r\n                if (!state.isSleeping && notifyChange) {\r\n                    computedObservable[\"notifySubscribers\"](state.latestValue);\r\n                }\r\n                if (computedObservable._recordUpdate) {\r\n                    computedObservable._recordUpdate();\r\n                }\r\n            }\r\n\r\n            if (isInitial) {\r\n                computedObservable[\"notifySubscribers\"](state.latestValue, \"awake\");\r\n            }\r\n\r\n            return changed;\r\n        },\r\n        evaluateImmediate_CallReadThenEndDependencyDetection: function (state, dependencyDetectionContext) {\r\n            // This function is really part of the evaluateImmediate_CallReadWithDependencyDetection logic.\r\n            // You'd never call it from anywhere else. Factoring it out means that evaluateImmediate_CallReadWithDependencyDetection\r\n            // can be independent of try/finally blocks, which contributes to saving about 40% off the CPU\r\n            // overhead of computed evaluation (on V8 at least).\r\n\r\n            try {\r\n                var readFunction = state.readFunction;\r\n                return state.evaluatorFunctionTarget ? readFunction.call(state.evaluatorFunctionTarget) : readFunction();\r\n            } finally {\r\n                ko.dependencyDetection.end();\r\n\r\n                // For each subscription no longer being used, remove it from the active subscriptions list and dispose it\r\n                if (dependencyDetectionContext.disposalCount && !state.isSleeping) {\r\n                    ko.utils.objectForEach(dependencyDetectionContext.disposalCandidates, computedDisposeDependencyCallback);\r\n                }\r\n\r\n                state.isStale = state.isDirty = false;\r\n            }\r\n        },\r\n        peek: function (evaluate) {\r\n            // By default, peek won't re-evaluate, except while the computed is sleeping or to get the initial value when \"deferEvaluation\" is set.\r\n            // Pass in true to evaluate if needed.\r\n            var state = this[computedState];\r\n            if ((state.isDirty && (evaluate || !state.dependenciesCount)) || (state.isSleeping && this.haveDependenciesChanged())) {\r\n                this.evaluateImmediate();\r\n            }\r\n            return state.latestValue;\r\n        },\r\n        limit: function (limitFunction) {\r\n            // Override the limit function with one that delays evaluation as well\r\n            ko.subscribable['fn'].limit.call(this, limitFunction);\r\n            this._evalIfChanged = function () {\r\n                if (!this[computedState].isSleeping) {\r\n                    if (this[computedState].isStale) {\r\n                        this.evaluateImmediate();\r\n                    } else {\r\n                        this[computedState].isDirty = false;\r\n                    }\r\n                }\r\n                return this[computedState].latestValue;\r\n            };\r\n            this._evalDelayed = function (isChange) {\r\n                this._limitBeforeChange(this[computedState].latestValue);\r\n\r\n                // Mark as dirty\r\n                this[computedState].isDirty = true;\r\n                if (isChange) {\r\n                    this[computedState].isStale = true;\r\n                }\r\n\r\n                // Pass the observable to the \"limit\" code, which will evaluate it when\r\n                // it's time to do the notification.\r\n                this._limitChange(this, !isChange /* isDirty */);\r\n            };\r\n        },\r\n        dispose: function () {\r\n            var state = this[computedState];\r\n            if (!state.isSleeping && state.dependencyTracking) {\r\n                ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\r\n                    if (dependency.dispose)\r\n                        dependency.dispose();\r\n                });\r\n            }\r\n            if (state.disposeWhenNodeIsRemoved && state.domNodeDisposalCallback) {\r\n                ko.utils.domNodeDisposal.removeDisposeCallback(state.disposeWhenNodeIsRemoved, state.domNodeDisposalCallback);\r\n            }\r\n            state.dependencyTracking = undefined;\r\n            state.dependenciesCount = 0;\r\n            state.isDisposed = true;\r\n            state.isStale = false;\r\n            state.isDirty = false;\r\n            state.isSleeping = false;\r\n            state.disposeWhenNodeIsRemoved = undefined;\r\n            state.disposeWhen = undefined;\r\n            state.readFunction = undefined;\r\n            if (!this.hasWriteFunction) {\r\n                state.evaluatorFunctionTarget = undefined;\r\n            }\r\n        }\r\n    };\r\n\r\n    var pureComputedOverrides = {\r\n        beforeSubscriptionAdd: function (event) {\r\n            // If asleep, wake up the computed by subscribing to any dependencies.\r\n            var computedObservable = this,\r\n                state = computedObservable[computedState];\r\n            if (!state.isDisposed && state.isSleeping && event == 'change') {\r\n                state.isSleeping = false;\r\n                if (state.isStale || computedObservable.haveDependenciesChanged()) {\r\n                    state.dependencyTracking = null;\r\n                    state.dependenciesCount = 0;\r\n                    if (computedObservable.evaluateImmediate()) {\r\n                        computedObservable.updateVersion();\r\n                    }\r\n                } else {\r\n                    // First put the dependencies in order\r\n                    var dependenciesOrder = [];\r\n                    ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\r\n                        dependenciesOrder[dependency._order] = id;\r\n                    });\r\n                    // Next, subscribe to each one\r\n                    ko.utils.arrayForEach(dependenciesOrder, function (id, order) {\r\n                        var dependency = state.dependencyTracking[id],\r\n                            subscription = computedObservable.subscribeToDependency(dependency._target);\r\n                        subscription._order = order;\r\n                        subscription._version = dependency._version;\r\n                        state.dependencyTracking[id] = subscription;\r\n                    });\r\n                    // Waking dependencies may have triggered effects\r\n                    if (computedObservable.haveDependenciesChanged()) {\r\n                        if (computedObservable.evaluateImmediate()) {\r\n                            computedObservable.updateVersion();\r\n                        }\r\n                    }\r\n                }\r\n\r\n                if (!state.isDisposed) {     // test since evaluating could trigger disposal\r\n                    computedObservable[\"notifySubscribers\"](state.latestValue, \"awake\");\r\n                }\r\n            }\r\n        },\r\n        afterSubscriptionRemove: function (event) {\r\n            var state = this[computedState];\r\n            if (!state.isDisposed && event == 'change' && !this.hasSubscriptionsForEvent('change')) {\r\n                ko.utils.objectForEach(state.dependencyTracking, function (id, dependency) {\r\n                    if (dependency.dispose) {\r\n                        state.dependencyTracking[id] = {\r\n                            _target: dependency._target,\r\n                            _order: dependency._order,\r\n                            _version: dependency._version\r\n                        };\r\n                        dependency.dispose();\r\n                    }\r\n                });\r\n                state.isSleeping = true;\r\n                this[\"notifySubscribers\"](undefined, \"asleep\");\r\n            }\r\n        },\r\n        getVersion: function () {\r\n            // Because a pure computed is not automatically updated while it is sleeping, we can't\r\n            // simply return the version number. Instead, we check if any of the dependencies have\r\n            // changed and conditionally re-evaluate the computed observable.\r\n            var state = this[computedState];\r\n            if (state.isSleeping && (state.isStale || this.haveDependenciesChanged())) {\r\n                this.evaluateImmediate();\r\n            }\r\n            return ko.subscribable['fn'].getVersion.call(this);\r\n        }\r\n    };\r\n\r\n    var deferEvaluationOverrides = {\r\n        beforeSubscriptionAdd: function (event) {\r\n            // This will force a computed with deferEvaluation to evaluate when the first subscription is registered.\r\n            if (event == 'change' || event == 'beforeChange') {\r\n                this.peek();\r\n            }\r\n        }\r\n    };\r\n\r\n    // Note that for browsers that don't support proto assignment, the\r\n    // inheritance chain is created manually in the ko.computed constructor\r\n    if (ko.utils.canSetPrototype) {\r\n        ko.utils.setPrototypeOf(computedFn, ko.subscribable['fn']);\r\n    }\r\n\r\n    // Set the proto values for ko.computed\r\n    var protoProp = ko.observable.protoProperty; // == \"__ko_proto__\"\r\n    computedFn[protoProp] = ko.computed;\r\n\r\n    ko.isComputed = function (instance) {\r\n        return (typeof instance == 'function' && instance[protoProp] === computedFn[protoProp]);\r\n    };\r\n\r\n    ko.isPureComputed = function (instance) {\r\n        return ko.isComputed(instance) && instance[computedState] && instance[computedState].pure;\r\n    };\r\n\r\n    ko.exportSymbol('computed', ko.computed);\r\n    ko.exportSymbol('dependentObservable', ko.computed);    // export ko.dependentObservable for backwards compatibility (1.x)\r\n    ko.exportSymbol('isComputed', ko.isComputed);\r\n    ko.exportSymbol('isPureComputed', ko.isPureComputed);\r\n    ko.exportSymbol('computed.fn', computedFn);\r\n    ko.exportProperty(computedFn, 'peek', computedFn.peek);\r\n    ko.exportProperty(computedFn, 'dispose', computedFn.dispose);\r\n    ko.exportProperty(computedFn, 'isActive', computedFn.isActive);\r\n    ko.exportProperty(computedFn, 'getDependenciesCount', computedFn.getDependenciesCount);\r\n    ko.exportProperty(computedFn, 'getDependencies', computedFn.getDependencies);\r\n\r\n    ko.pureComputed = function (evaluatorFunctionOrOptions, evaluatorFunctionTarget) {\r\n        if (typeof evaluatorFunctionOrOptions === 'function') {\r\n            return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget, {'pure':true});\r\n        } else {\r\n            evaluatorFunctionOrOptions = ko.utils.extend({}, evaluatorFunctionOrOptions);   // make a copy of the parameter object\r\n            evaluatorFunctionOrOptions['pure'] = true;\r\n            return ko.computed(evaluatorFunctionOrOptions, evaluatorFunctionTarget);\r\n        }\r\n    }\r\n    ko.exportSymbol('pureComputed', ko.pureComputed);\r\n\r\n    (function() {\r\n        var maxNestedObservableDepth = 10; // Escape the (unlikely) pathological case where an observable's current value is itself (or similar reference cycle)\r\n\r\n        ko.toJS = function(rootObject) {\r\n            if (arguments.length == 0)\r\n                throw new Error(\"When calling ko.toJS, pass the object you want to convert.\");\r\n\r\n            // We just unwrap everything at every level in the object graph\r\n            return mapJsObjectGraph(rootObject, function(valueToMap) {\r\n                // Loop because an observable's value might in turn be another observable wrapper\r\n                for (var i = 0; ko.isObservable(valueToMap) && (i < maxNestedObservableDepth); i++)\r\n                    valueToMap = valueToMap();\r\n                return valueToMap;\r\n            });\r\n        };\r\n\r\n        ko.toJSON = function(rootObject, replacer, space) {     // replacer and space are optional\r\n            var plainJavaScriptObject = ko.toJS(rootObject);\r\n            return ko.utils.stringifyJson(plainJavaScriptObject, replacer, space);\r\n        };\r\n\r\n        function mapJsObjectGraph(rootObject, mapInputCallback, visitedObjects) {\r\n            visitedObjects = visitedObjects || new objectLookup();\r\n\r\n            rootObject = mapInputCallback(rootObject);\r\n            var canHaveProperties = (typeof rootObject == \"object\") && (rootObject !== null) && (rootObject !== undefined) && (!(rootObject instanceof RegExp)) && (!(rootObject instanceof Date)) && (!(rootObject instanceof String)) && (!(rootObject instanceof Number)) && (!(rootObject instanceof Boolean));\r\n            if (!canHaveProperties)\r\n                return rootObject;\r\n\r\n            var outputProperties = rootObject instanceof Array ? [] : {};\r\n            visitedObjects.save(rootObject, outputProperties);\r\n\r\n            visitPropertiesOrArrayEntries(rootObject, function(indexer) {\r\n                var propertyValue = mapInputCallback(rootObject[indexer]);\r\n\r\n                switch (typeof propertyValue) {\r\n                    case \"boolean\":\r\n                    case \"number\":\r\n                    case \"string\":\r\n                    case \"function\":\r\n                        outputProperties[indexer] = propertyValue;\r\n                        break;\r\n                    case \"object\":\r\n                    case \"undefined\":\r\n                        var previouslyMappedValue = visitedObjects.get(propertyValue);\r\n                        outputProperties[indexer] = (previouslyMappedValue !== undefined)\r\n                            ? previouslyMappedValue\r\n                            : mapJsObjectGraph(propertyValue, mapInputCallback, visitedObjects);\r\n                        break;\r\n                }\r\n            });\r\n\r\n            return outputProperties;\r\n        }\r\n\r\n        function visitPropertiesOrArrayEntries(rootObject, visitorCallback) {\r\n            if (rootObject instanceof Array) {\r\n                for (var i = 0; i < rootObject.length; i++)\r\n                    visitorCallback(i);\r\n\r\n                // For arrays, also respect toJSON property for custom mappings (fixes #278)\r\n                if (typeof rootObject['toJSON'] == 'function')\r\n                    visitorCallback('toJSON');\r\n            } else {\r\n                for (var propertyName in rootObject) {\r\n                    visitorCallback(propertyName);\r\n                }\r\n            }\r\n        };\r\n\r\n        function objectLookup() {\r\n            this.keys = [];\r\n            this.values = [];\r\n        };\r\n\r\n        objectLookup.prototype = {\r\n            constructor: objectLookup,\r\n            save: function(key, value) {\r\n                var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\r\n                if (existingIndex >= 0)\r\n                    this.values[existingIndex] = value;\r\n                else {\r\n                    this.keys.push(key);\r\n                    this.values.push(value);\r\n                }\r\n            },\r\n            get: function(key) {\r\n                var existingIndex = ko.utils.arrayIndexOf(this.keys, key);\r\n                return (existingIndex >= 0) ? this.values[existingIndex] : undefined;\r\n            }\r\n        };\r\n    })();\r\n\r\n    ko.exportSymbol('toJS', ko.toJS);\r\n    ko.exportSymbol('toJSON', ko.toJSON);\r\n    ko.when = function(predicate, callback, context) {\r\n        function kowhen (resolve) {\r\n            var observable = ko.pureComputed(predicate, context).extend({notify:'always'});\r\n            var subscription = observable.subscribe(function(value) {\r\n                if (value) {\r\n                    subscription.dispose();\r\n                    resolve(value);\r\n                }\r\n            });\r\n            // In case the initial value is true, process it right away\r\n            observable['notifySubscribers'](observable.peek());\r\n\r\n            return subscription;\r\n        }\r\n        if (typeof Promise === \"function\" && !callback) {\r\n            return new Promise(kowhen);\r\n        } else {\r\n            return kowhen(callback.bind(context));\r\n        }\r\n    };\r\n\r\n    ko.exportSymbol('when', ko.when);\r\n    (function () {\r\n        var hasDomDataExpandoProperty = '__ko__hasDomDataOptionValue__';\r\n\r\n        // Normally, SELECT elements and their OPTIONs can only take value of type 'string' (because the values\r\n        // are stored on DOM attributes). ko.selectExtensions provides a way for SELECTs/OPTIONs to have values\r\n        // that are arbitrary objects. This is very convenient when implementing things like cascading dropdowns.\r\n        ko.selectExtensions = {\r\n            readValue : function(element) {\r\n                switch (ko.utils.tagNameLower(element)) {\r\n                    case 'option':\r\n                        if (element[hasDomDataExpandoProperty] === true)\r\n                            return ko.utils.domData.get(element, ko.bindingHandlers.options.optionValueDomDataKey);\r\n                        return ko.utils.ieVersion <= 7\r\n                            ? (element.getAttributeNode('value') && element.getAttributeNode('value').specified ? element.value : element.text)\r\n                            : element.value;\r\n                    case 'select':\r\n                        return element.selectedIndex >= 0 ? ko.selectExtensions.readValue(element.options[element.selectedIndex]) : undefined;\r\n                    default:\r\n                        return element.value;\r\n                }\r\n            },\r\n\r\n            writeValue: function(element, value, allowUnset) {\r\n                switch (ko.utils.tagNameLower(element)) {\r\n                    case 'option':\r\n                        if (typeof value === \"string\") {\r\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, undefined);\r\n                            if (hasDomDataExpandoProperty in element) { // IE <= 8 throws errors if you delete non-existent properties from a DOM node\r\n                                delete element[hasDomDataExpandoProperty];\r\n                            }\r\n                            element.value = value;\r\n                        }\r\n                        else {\r\n                            // Store arbitrary object using DomData\r\n                            ko.utils.domData.set(element, ko.bindingHandlers.options.optionValueDomDataKey, value);\r\n                            element[hasDomDataExpandoProperty] = true;\r\n\r\n                            // Special treatment of numbers is just for backward compatibility. KO 1.2.1 wrote numerical values to element.value.\r\n                            element.value = typeof value === \"number\" ? value : \"\";\r\n                        }\r\n                        break;\r\n                    case 'select':\r\n                        if (value === \"\" || value === null)       // A blank string or null value will select the caption\r\n                            value = undefined;\r\n                        var selection = -1;\r\n                        for (var i = 0, n = element.options.length, optionValue; i < n; ++i) {\r\n                            optionValue = ko.selectExtensions.readValue(element.options[i]);\r\n                            // Include special check to handle selecting a caption with a blank string value\r\n                            if (optionValue == value || (optionValue === \"\" && value === undefined)) {\r\n                                selection = i;\r\n                                break;\r\n                            }\r\n                        }\r\n                        if (allowUnset || selection >= 0 || (value === undefined && element.size > 1)) {\r\n                            element.selectedIndex = selection;\r\n                            if (ko.utils.ieVersion === 6) {\r\n                                // Workaround for IE6 bug: It won't reliably apply values to SELECT nodes during the same execution thread\r\n                                // right after you've changed the set of OPTION nodes on it. So for that node type, we'll schedule a second thread\r\n                                // to apply the value as well.\r\n                                ko.utils.setTimeout(function () {\r\n                                    element.selectedIndex = selection;\r\n                                }, 0);\r\n                            }\r\n                        }\r\n                        break;\r\n                    default:\r\n                        if ((value === null) || (value === undefined))\r\n                            value = \"\";\r\n                        element.value = value;\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n    })();\r\n\r\n    ko.exportSymbol('selectExtensions', ko.selectExtensions);\r\n    ko.exportSymbol('selectExtensions.readValue', ko.selectExtensions.readValue);\r\n    ko.exportSymbol('selectExtensions.writeValue', ko.selectExtensions.writeValue);\r\n    ko.expressionRewriting = (function () {\r\n        var javaScriptReservedWords = [\"true\", \"false\", \"null\", \"undefined\"];\r\n\r\n        // Matches something that can be assigned to--either an isolated identifier or something ending with a property accessor\r\n        // This is designed to be simple and avoid false negatives, but could produce false positives (e.g., a+b.c).\r\n        // This also will not properly handle nested brackets (e.g., obj1[obj2['prop']]; see #911).\r\n        var javaScriptAssignmentTarget = /^(?:[$_a-z][$\\w]*|(.+)(\\.\\s*[$_a-z][$\\w]*|\\[.+\\]))$/i;\r\n\r\n        function getWriteableValue(expression) {\r\n            if (ko.utils.arrayIndexOf(javaScriptReservedWords, expression) >= 0)\r\n                return false;\r\n            var match = expression.match(javaScriptAssignmentTarget);\r\n            return match === null ? false : match[1] ? ('Object(' + match[1] + ')' + match[2]) : expression;\r\n        }\r\n\r\n        // The following regular expressions will be used to split an object-literal string into tokens\r\n\r\n        var specials = ',\"\\'`{}()/:[\\\\]',    // These characters have special meaning to the parser and must not appear in the middle of a token, except as part of a string.\r\n            // Create the actual regular expression by or-ing the following regex strings. The order is important.\r\n            bindingToken = RegExp([\r\n                // These match strings, either with double quotes, single quotes, or backticks\r\n                '\"(?:\\\\\\\\.|[^\"])*\"',\r\n                \"'(?:\\\\\\\\.|[^'])*'\",\r\n                \"`(?:\\\\\\\\.|[^`])*`\",\r\n                // Match C style comments\r\n                \"/\\\\*(?:[^*]|\\\\*+[^*/])*\\\\*+/\",\r\n                // Match C++ style comments\r\n                \"//.*\\n\",\r\n                // Match a regular expression (text enclosed by slashes), but will also match sets of divisions\r\n                // as a regular expression (this is handled by the parsing loop below).\r\n                '/(?:\\\\\\\\.|[^/])+/\\w*',\r\n                // Match text (at least two characters) that does not contain any of the above special characters,\r\n                // although some of the special characters are allowed to start it (all but the colon and comma).\r\n                // The text can contain spaces, but leading or trailing spaces are skipped.\r\n                '[^\\\\s:,/][^' + specials + ']*[^\\\\s' + specials + ']',\r\n                // Match any non-space character not matched already. This will match colons and commas, since they're\r\n                // not matched by \"everyThingElse\", but will also match any other single character that wasn't already\r\n                // matched (for example: in \"a: 1, b: 2\", each of the non-space characters will be matched by oneNotSpace).\r\n                '[^\\\\s]'\r\n            ].join('|'), 'g'),\r\n\r\n            // Match end of previous token to determine whether a slash is a division or regex.\r\n            divisionLookBehind = /[\\])\"'A-Za-z0-9_$]+$/,\r\n            keywordRegexLookBehind = {'in':1,'return':1,'typeof':1};\r\n\r\n        function parseObjectLiteral(objectLiteralString) {\r\n            // Trim leading and trailing spaces from the string\r\n            var str = ko.utils.stringTrim(objectLiteralString);\r\n\r\n            // Trim braces '{' surrounding the whole object literal\r\n            if (str.charCodeAt(0) === 123) str = str.slice(1, -1);\r\n\r\n            // Add a newline to correctly match a C++ style comment at the end of the string and\r\n            // add a comma so that we don't need a separate code block to deal with the last item\r\n            str += \"\\n,\";\r\n\r\n            // Split into tokens\r\n            var result = [], toks = str.match(bindingToken), key, values = [], depth = 0;\r\n\r\n            if (toks.length > 1) {\r\n                for (var i = 0, tok; tok = toks[i]; ++i) {\r\n                    var c = tok.charCodeAt(0);\r\n                    // A comma signals the end of a key/value pair if depth is zero\r\n                    if (c === 44) { // \",\"\r\n                        if (depth <= 0) {\r\n                            result.push((key && values.length) ? {key: key, value: values.join('')} : {'unknown': key || values.join('')});\r\n                            key = depth = 0;\r\n                            values = [];\r\n                            continue;\r\n                        }\r\n                    // Simply skip the colon that separates the name and value\r\n                    } else if (c === 58) { // \":\"\r\n                        if (!depth && !key && values.length === 1) {\r\n                            key = values.pop();\r\n                            continue;\r\n                        }\r\n                    // Comments: skip them\r\n                    } else if (c === 47 && tok.length > 1 && (tok.charCodeAt(1) === 47 || tok.charCodeAt(1) === 42)) {  // \"//\" or \"/*\"\r\n                        continue;\r\n                    // A set of slashes is initially matched as a regular expression, but could be division\r\n                    } else if (c === 47 && i && tok.length > 1) {  // \"/\"\r\n                        // Look at the end of the previous token to determine if the slash is actually division\r\n                        var match = toks[i-1].match(divisionLookBehind);\r\n                        if (match && !keywordRegexLookBehind[match[0]]) {\r\n                            // The slash is actually a division punctuator; re-parse the remainder of the string (not including the slash)\r\n                            str = str.substr(str.indexOf(tok) + 1);\r\n                            toks = str.match(bindingToken);\r\n                            i = -1;\r\n                            // Continue with just the slash\r\n                            tok = '/';\r\n                        }\r\n                    // Increment depth for parentheses, braces, and brackets so that interior commas are ignored\r\n                    } else if (c === 40 || c === 123 || c === 91) { // '(', '{', '['\r\n                        ++depth;\r\n                    } else if (c === 41 || c === 125 || c === 93) { // ')', '}', ']'\r\n                        --depth;\r\n                    // The key will be the first token; if it's a string, trim the quotes\r\n                    } else if (!key && !values.length && (c === 34 || c === 39)) { // '\"', \"'\"\r\n                        tok = tok.slice(1, -1);\r\n                    }\r\n                    values.push(tok);\r\n                }\r\n                if (depth > 0) {\r\n                    throw Error(\"Unbalanced parentheses, braces, or brackets\");\r\n                }\r\n            }\r\n            return result;\r\n        }\r\n\r\n        // Two-way bindings include a write function that allow the handler to update the value even if it's not an observable.\r\n        var twoWayBindings = {};\r\n\r\n        function preProcessBindings(bindingsStringOrKeyValueArray, bindingOptions) {\r\n            bindingOptions = bindingOptions || {};\r\n\r\n            function processKeyValue(key, val) {\r\n                var writableVal;\r\n                function callPreprocessHook(obj) {\r\n                    return (obj && obj['preprocess']) ? (val = obj['preprocess'](val, key, processKeyValue)) : true;\r\n                }\r\n                if (!bindingParams) {\r\n                    if (!callPreprocessHook(ko['getBindingHandler'](key)))\r\n                        return;\r\n\r\n                    if (twoWayBindings[key] && (writableVal = getWriteableValue(val))) {\r\n                        // For two-way bindings, provide a write method in case the value\r\n                        // isn't a writable observable.\r\n                        var writeKey = typeof twoWayBindings[key] == 'string' ? twoWayBindings[key] : key;\r\n                        propertyAccessorResultStrings.push(\"'\" + writeKey + \"':function(_z){\" + writableVal + \"=_z}\");\r\n                    }\r\n                }\r\n                // Values are wrapped in a function so that each value can be accessed independently\r\n                if (makeValueAccessors) {\r\n                    val = 'function(){return ' + val + ' }';\r\n                }\r\n                resultStrings.push(\"'\" + key + \"':\" + val);\r\n            }\r\n\r\n            var resultStrings = [],\r\n                propertyAccessorResultStrings = [],\r\n                makeValueAccessors = bindingOptions['valueAccessors'],\r\n                bindingParams = bindingOptions['bindingParams'],\r\n                keyValueArray = typeof bindingsStringOrKeyValueArray === \"string\" ?\r\n                    parseObjectLiteral(bindingsStringOrKeyValueArray) : bindingsStringOrKeyValueArray;\r\n\r\n            ko.utils.arrayForEach(keyValueArray, function(keyValue) {\r\n                processKeyValue(keyValue.key || keyValue['unknown'], keyValue.value);\r\n            });\r\n\r\n            if (propertyAccessorResultStrings.length)\r\n                processKeyValue('_ko_property_writers', \"{\" + propertyAccessorResultStrings.join(\",\") + \" }\");\r\n\r\n            return resultStrings.join(\",\");\r\n        }\r\n\r\n        return {\r\n            bindingRewriteValidators: [],\r\n\r\n            twoWayBindings: twoWayBindings,\r\n\r\n            parseObjectLiteral: parseObjectLiteral,\r\n\r\n            preProcessBindings: preProcessBindings,\r\n\r\n            keyValueArrayContainsKey: function(keyValueArray, key) {\r\n                for (var i = 0; i < keyValueArray.length; i++)\r\n                    if (keyValueArray[i]['key'] == key)\r\n                        return true;\r\n                return false;\r\n            },\r\n\r\n            // Internal, private KO utility for updating model properties from within bindings\r\n            // property:            If the property being updated is (or might be) an observable, pass it here\r\n            //                      If it turns out to be a writable observable, it will be written to directly\r\n            // allBindings:         An object with a get method to retrieve bindings in the current execution context.\r\n            //                      This will be searched for a '_ko_property_writers' property in case you're writing to a non-observable\r\n            // key:                 The key identifying the property to be written. Example: for { hasFocus: myValue }, write to 'myValue' by specifying the key 'hasFocus'\r\n            // value:               The value to be written\r\n            // checkIfDifferent:    If true, and if the property being written is a writable observable, the value will only be written if\r\n            //                      it is !== existing value on that writable observable\r\n            writeValueToProperty: function(property, allBindings, key, value, checkIfDifferent) {\r\n                if (!property || !ko.isObservable(property)) {\r\n                    var propWriters = allBindings.get('_ko_property_writers');\r\n                    if (propWriters && propWriters[key])\r\n                        propWriters[key](value);\r\n                } else if (ko.isWriteableObservable(property) && (!checkIfDifferent || property.peek() !== value)) {\r\n                    property(value);\r\n                }\r\n            }\r\n        };\r\n    })();\r\n\r\n    ko.exportSymbol('expressionRewriting', ko.expressionRewriting);\r\n    ko.exportSymbol('expressionRewriting.bindingRewriteValidators', ko.expressionRewriting.bindingRewriteValidators);\r\n    ko.exportSymbol('expressionRewriting.parseObjectLiteral', ko.expressionRewriting.parseObjectLiteral);\r\n    ko.exportSymbol('expressionRewriting.preProcessBindings', ko.expressionRewriting.preProcessBindings);\r\n\r\n    // Making bindings explicitly declare themselves as \"two way\" isn't ideal in the long term (it would be better if\r\n    // all bindings could use an official 'property writer' API without needing to declare that they might). However,\r\n    // since this is not, and has never been, a public API (_ko_property_writers was never documented), it's acceptable\r\n    // as an internal implementation detail in the short term.\r\n    // For those developers who rely on _ko_property_writers in their custom bindings, we expose _twoWayBindings as an\r\n    // undocumented feature that makes it relatively easy to upgrade to KO 3.0. However, this is still not an official\r\n    // public API, and we reserve the right to remove it at any time if we create a real public property writers API.\r\n    ko.exportSymbol('expressionRewriting._twoWayBindings', ko.expressionRewriting.twoWayBindings);\r\n\r\n    // For backward compatibility, define the following aliases. (Previously, these function names were misleading because\r\n    // they referred to JSON specifically, even though they actually work with arbitrary JavaScript object literal expressions.)\r\n    ko.exportSymbol('jsonExpressionRewriting', ko.expressionRewriting);\r\n    ko.exportSymbol('jsonExpressionRewriting.insertPropertyAccessorsIntoJson', ko.expressionRewriting.preProcessBindings);\r\n    (function() {\r\n        // \"Virtual elements\" is an abstraction on top of the usual DOM API which understands the notion that comment nodes\r\n        // may be used to represent hierarchy (in addition to the DOM's natural hierarchy).\r\n        // If you call the DOM-manipulating functions on ko.virtualElements, you will be able to read and write the state\r\n        // of that virtual hierarchy\r\n        //\r\n        // The point of all this is to support containerless templates (e.g., <!-- ko foreach:someCollection -->blah<!-- /ko -->)\r\n        // without having to scatter special cases all over the binding and templating code.\r\n\r\n        // IE 9 cannot reliably read the \"nodeValue\" property of a comment node (see https://github.com/SteveSanderson/knockout/issues/186)\r\n        // but it does give them a nonstandard alternative property called \"text\" that it can read reliably. Other browsers don't have that property.\r\n        // So, use node.text where available, and node.nodeValue elsewhere\r\n        var commentNodesHaveTextProperty = document && document.createComment(\"test\").text === \"<!--test-->\";\r\n\r\n        var startCommentRegex = commentNodesHaveTextProperty ? /^<!--\\s*ko(?:\\s+([\\s\\S]+))?\\s*-->$/ : /^\\s*ko(?:\\s+([\\s\\S]+))?\\s*$/;\r\n        var endCommentRegex =   commentNodesHaveTextProperty ? /^<!--\\s*\\/ko\\s*-->$/ : /^\\s*\\/ko\\s*$/;\r\n        var htmlTagsWithOptionallyClosingChildren = { 'ul': true, 'ol': true };\r\n\r\n        function isStartComment(node) {\r\n            return (node.nodeType == 8) && startCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n        }\r\n\r\n        function isEndComment(node) {\r\n            return (node.nodeType == 8) && endCommentRegex.test(commentNodesHaveTextProperty ? node.text : node.nodeValue);\r\n        }\r\n\r\n        function isUnmatchedEndComment(node) {\r\n            return isEndComment(node) && !(ko.utils.domData.get(node, matchedEndCommentDataKey));\r\n        }\r\n\r\n        var matchedEndCommentDataKey = \"__ko_matchedEndComment__\"\r\n\r\n        function getVirtualChildren(startComment, allowUnbalanced) {\r\n            var currentNode = startComment;\r\n            var depth = 1;\r\n            var children = [];\r\n            while (currentNode = currentNode.nextSibling) {\r\n                if (isEndComment(currentNode)) {\r\n                    ko.utils.domData.set(currentNode, matchedEndCommentDataKey, true);\r\n                    depth--;\r\n                    if (depth === 0)\r\n                        return children;\r\n                }\r\n\r\n                children.push(currentNode);\r\n\r\n                if (isStartComment(currentNode))\r\n                    depth++;\r\n            }\r\n            if (!allowUnbalanced)\r\n                throw new Error(\"Cannot find closing comment tag to match: \" + startComment.nodeValue);\r\n            return null;\r\n        }\r\n\r\n        function getMatchingEndComment(startComment, allowUnbalanced) {\r\n            var allVirtualChildren = getVirtualChildren(startComment, allowUnbalanced);\r\n            if (allVirtualChildren) {\r\n                if (allVirtualChildren.length > 0)\r\n                    return allVirtualChildren[allVirtualChildren.length - 1].nextSibling;\r\n                return startComment.nextSibling;\r\n            } else\r\n                return null; // Must have no matching end comment, and allowUnbalanced is true\r\n        }\r\n\r\n        function getUnbalancedChildTags(node) {\r\n            // e.g., from <div>OK</div><!-- ko blah --><span>Another</span>, returns: <!-- ko blah --><span>Another</span>\r\n            //       from <div>OK</div><!-- /ko --><!-- /ko -->,             returns: <!-- /ko --><!-- /ko -->\r\n            var childNode = node.firstChild, captureRemaining = null;\r\n            if (childNode) {\r\n                do {\r\n                    if (captureRemaining)                   // We already hit an unbalanced node and are now just scooping up all subsequent nodes\r\n                        captureRemaining.push(childNode);\r\n                    else if (isStartComment(childNode)) {\r\n                        var matchingEndComment = getMatchingEndComment(childNode, /* allowUnbalanced: */ true);\r\n                        if (matchingEndComment)             // It's a balanced tag, so skip immediately to the end of this virtual set\r\n                            childNode = matchingEndComment;\r\n                        else\r\n                            captureRemaining = [childNode]; // It's unbalanced, so start capturing from this point\r\n                    } else if (isEndComment(childNode)) {\r\n                        captureRemaining = [childNode];     // It's unbalanced (if it wasn't, we'd have skipped over it already), so start capturing\r\n                    }\r\n                } while (childNode = childNode.nextSibling);\r\n            }\r\n            return captureRemaining;\r\n        }\r\n\r\n        ko.virtualElements = {\r\n            allowedBindings: {},\r\n\r\n            childNodes: function(node) {\r\n                return isStartComment(node) ? getVirtualChildren(node) : node.childNodes;\r\n            },\r\n\r\n            emptyNode: function(node) {\r\n                if (!isStartComment(node))\r\n                    ko.utils.emptyDomNode(node);\r\n                else {\r\n                    var virtualChildren = ko.virtualElements.childNodes(node);\r\n                    for (var i = 0, j = virtualChildren.length; i < j; i++)\r\n                        ko.removeNode(virtualChildren[i]);\r\n                }\r\n            },\r\n\r\n            setDomNodeChildren: function(node, childNodes) {\r\n                if (!isStartComment(node))\r\n                    ko.utils.setDomNodeChildren(node, childNodes);\r\n                else {\r\n                    ko.virtualElements.emptyNode(node);\r\n                    var endCommentNode = node.nextSibling; // Must be the next sibling, as we just emptied the children\r\n                    for (var i = 0, j = childNodes.length; i < j; i++)\r\n                        endCommentNode.parentNode.insertBefore(childNodes[i], endCommentNode);\r\n                }\r\n            },\r\n\r\n            prepend: function(containerNode, nodeToPrepend) {\r\n                if (!isStartComment(containerNode)) {\r\n                    if (containerNode.firstChild)\r\n                        containerNode.insertBefore(nodeToPrepend, containerNode.firstChild);\r\n                    else\r\n                        containerNode.appendChild(nodeToPrepend);\r\n                } else {\r\n                    // Start comments must always have a parent and at least one following sibling (the end comment)\r\n                    containerNode.parentNode.insertBefore(nodeToPrepend, containerNode.nextSibling);\r\n                }\r\n            },\r\n\r\n            insertAfter: function(containerNode, nodeToInsert, insertAfterNode) {\r\n                if (!insertAfterNode) {\r\n                    ko.virtualElements.prepend(containerNode, nodeToInsert);\r\n                } else if (!isStartComment(containerNode)) {\r\n                    // Insert after insertion point\r\n                    if (insertAfterNode.nextSibling)\r\n                        containerNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\r\n                    else\r\n                        containerNode.appendChild(nodeToInsert);\r\n                } else {\r\n                    // Children of start comments must always have a parent and at least one following sibling (the end comment)\r\n                    containerNode.parentNode.insertBefore(nodeToInsert, insertAfterNode.nextSibling);\r\n                }\r\n            },\r\n\r\n            firstChild: function(node) {\r\n                if (!isStartComment(node)) {\r\n                    if (node.firstChild && isEndComment(node.firstChild)) {\r\n                        throw new Error(\"Found invalid end comment, as the first child of \" + node);\r\n                    }\r\n                    return node.firstChild;\r\n                } else if (!node.nextSibling || isEndComment(node.nextSibling)) {\r\n                    return null;\r\n                } else {\r\n                    return node.nextSibling;\r\n                }\r\n            },\r\n\r\n            nextSibling: function(node) {\r\n                if (isStartComment(node)) {\r\n                    node = getMatchingEndComment(node);\r\n                }\r\n\r\n                if (node.nextSibling && isEndComment(node.nextSibling)) {\r\n                    if (isUnmatchedEndComment(node.nextSibling)) {\r\n                        throw Error(\"Found end comment without a matching opening comment, as child of \" + node);\r\n                    } else {\r\n                        return null;\r\n                    }\r\n                } else {\r\n                    return node.nextSibling;\r\n                }\r\n            },\r\n\r\n            hasBindingValue: isStartComment,\r\n\r\n            virtualNodeBindingValue: function(node) {\r\n                var regexMatch = (commentNodesHaveTextProperty ? node.text : node.nodeValue).match(startCommentRegex);\r\n                return regexMatch ? regexMatch[1] : null;\r\n            },\r\n\r\n            normaliseVirtualElementDomStructure: function(elementVerified) {\r\n                // Workaround for https://github.com/SteveSanderson/knockout/issues/155\r\n                // (IE <= 8 or IE 9 quirks mode parses your HTML weirdly, treating closing </li> tags as if they don't exist, thereby moving comment nodes\r\n                // that are direct descendants of <ul> into the preceding <li>)\r\n                if (!htmlTagsWithOptionallyClosingChildren[ko.utils.tagNameLower(elementVerified)])\r\n                    return;\r\n\r\n                // Scan immediate children to see if they contain unbalanced comment tags. If they do, those comment tags\r\n                // must be intended to appear *after* that child, so move them there.\r\n                var childNode = elementVerified.firstChild;\r\n                if (childNode) {\r\n                    do {\r\n                        if (childNode.nodeType === 1) {\r\n                            var unbalancedTags = getUnbalancedChildTags(childNode);\r\n                            if (unbalancedTags) {\r\n                                // Fix up the DOM by moving the unbalanced tags to where they most likely were intended to be placed - *after* the child\r\n                                var nodeToInsertBefore = childNode.nextSibling;\r\n                                for (var i = 0; i < unbalancedTags.length; i++) {\r\n                                    if (nodeToInsertBefore)\r\n                                        elementVerified.insertBefore(unbalancedTags[i], nodeToInsertBefore);\r\n                                    else\r\n                                        elementVerified.appendChild(unbalancedTags[i]);\r\n                                }\r\n                            }\r\n                        }\r\n                    } while (childNode = childNode.nextSibling);\r\n                }\r\n            }\r\n        };\r\n    })();\r\n    ko.exportSymbol('virtualElements', ko.virtualElements);\r\n    ko.exportSymbol('virtualElements.allowedBindings', ko.virtualElements.allowedBindings);\r\n    ko.exportSymbol('virtualElements.emptyNode', ko.virtualElements.emptyNode);\r\n    //ko.exportSymbol('virtualElements.firstChild', ko.virtualElements.firstChild);     // firstChild is not minified\r\n    ko.exportSymbol('virtualElements.insertAfter', ko.virtualElements.insertAfter);\r\n    //ko.exportSymbol('virtualElements.nextSibling', ko.virtualElements.nextSibling);   // nextSibling is not minified\r\n    ko.exportSymbol('virtualElements.prepend', ko.virtualElements.prepend);\r\n    ko.exportSymbol('virtualElements.setDomNodeChildren', ko.virtualElements.setDomNodeChildren);\r\n    (function() {\r\n        var defaultBindingAttributeName = \"data-bind\";\r\n\r\n        ko.bindingProvider = function() {\r\n            this.bindingCache = {};\r\n        };\r\n\r\n        ko.utils.extend(ko.bindingProvider.prototype, {\r\n            'nodeHasBindings': function(node) {\r\n                switch (node.nodeType) {\r\n                    case 1: // Element\r\n                        return node.getAttribute(defaultBindingAttributeName) != null\r\n                            || ko.components['getComponentNameForNode'](node);\r\n                    case 8: // Comment node\r\n                        return ko.virtualElements.hasBindingValue(node);\r\n                    default: return false;\r\n                }\r\n            },\r\n\r\n            'getBindings': function(node, bindingContext) {\r\n                var bindingsString = this['getBindingsString'](node, bindingContext),\r\n                    parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node) : null;\r\n                return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ false);\r\n            },\r\n\r\n            'getBindingAccessors': function(node, bindingContext) {\r\n                var bindingsString = this['getBindingsString'](node, bindingContext),\r\n                    parsedBindings = bindingsString ? this['parseBindingsString'](bindingsString, bindingContext, node, { 'valueAccessors': true }) : null;\r\n                return ko.components.addBindingsForCustomElement(parsedBindings, node, bindingContext, /* valueAccessors */ true);\r\n            },\r\n\r\n            // The following function is only used internally by this default provider.\r\n            // It's not part of the interface definition for a general binding provider.\r\n            'getBindingsString': function(node, bindingContext) {\r\n                switch (node.nodeType) {\r\n                    case 1: return node.getAttribute(defaultBindingAttributeName);   // Element\r\n                    case 8: return ko.virtualElements.virtualNodeBindingValue(node); // Comment node\r\n                    default: return null;\r\n                }\r\n            },\r\n\r\n            // The following function is only used internally by this default provider.\r\n            // It's not part of the interface definition for a general binding provider.\r\n            'parseBindingsString': function(bindingsString, bindingContext, node, options) {\r\n                try {\r\n                    var bindingFunction = createBindingsStringEvaluatorViaCache(bindingsString, this.bindingCache, options);\r\n                    return bindingFunction(bindingContext, node);\r\n                } catch (ex) {\r\n                    ex.message = \"Unable to parse bindings.\\nBindings value: \" + bindingsString + \"\\nMessage: \" + ex.message;\r\n                    throw ex;\r\n                }\r\n            }\r\n        });\r\n\r\n        ko.bindingProvider['instance'] = new ko.bindingProvider();\r\n\r\n        function createBindingsStringEvaluatorViaCache(bindingsString, cache, options) {\r\n            var cacheKey = bindingsString + (options && options['valueAccessors'] || '');\r\n            return cache[cacheKey]\r\n                || (cache[cacheKey] = createBindingsStringEvaluator(bindingsString, options));\r\n        }\r\n\r\n        function createBindingsStringEvaluator(bindingsString, options) {\r\n            // Build the source for a function that evaluates \"expression\"\r\n            // For each scope variable, add an extra level of \"with\" nesting\r\n            // Example result: with(sc1) { with(sc0) { return (expression) } }\r\n            var rewrittenBindings = ko.expressionRewriting.preProcessBindings(bindingsString, options),\r\n                functionBody = \"with($context){with($data||{}){return{\" + rewrittenBindings + \"}}}\";\r\n            return new Function(\"$context\", \"$element\", functionBody);\r\n        }\r\n    })();\r\n\r\n    ko.exportSymbol('bindingProvider', ko.bindingProvider);\r\n    (function () {\r\n        // Hide or don't minify context properties, see https://github.com/knockout/knockout/issues/2294\r\n        var contextSubscribable = ko.utils.createSymbolOrString('_subscribable');\r\n        var contextAncestorBindingInfo = ko.utils.createSymbolOrString('_ancestorBindingInfo');\r\n\r\n        ko.bindingHandlers = {};\r\n\r\n        // The following element types will not be recursed into during binding.\r\n        var bindingDoesNotRecurseIntoElementTypes = {\r\n            // Don't want bindings that operate on text nodes to mutate <script> and <textarea> contents,\r\n            // because it's unexpected and a potential XSS issue.\r\n            // Also bindings should not operate on <template> elements since this breaks in Internet Explorer\r\n            // and because such elements' contents are always intended to be bound in a different context\r\n            // from where they appear in the document.\r\n            'script': true,\r\n            'textarea': true,\r\n            'template': true\r\n        };\r\n\r\n        // Use an overridable method for retrieving binding handlers so that plugins may support dynamically created handlers\r\n        ko['getBindingHandler'] = function(bindingKey) {\r\n            return ko.bindingHandlers[bindingKey];\r\n        };\r\n\r\n        var inheritParentVm = {};\r\n\r\n        // The ko.bindingContext constructor is only called directly to create the root context. For child\r\n        // contexts, use bindingContext.createChildContext or bindingContext.extend.\r\n        ko.bindingContext = function(dataItemOrAccessor, parentContext, dataItemAlias, extendCallback, options) {\r\n\r\n            // The binding context object includes static properties for the current, parent, and root view models.\r\n            // If a view model is actually stored in an observable, the corresponding binding context object, and\r\n            // any child contexts, must be updated when the view model is changed.\r\n            function updateContext() {\r\n                // Most of the time, the context will directly get a view model object, but if a function is given,\r\n                // we call the function to retrieve the view model. If the function accesses any observables or returns\r\n                // an observable, the dependency is tracked, and those observables can later cause the binding\r\n                // context to be updated.\r\n                var dataItemOrObservable = isFunc ? realDataItemOrAccessor() : realDataItemOrAccessor,\r\n                    dataItem = ko.utils.unwrapObservable(dataItemOrObservable);\r\n\r\n                if (parentContext) {\r\n                    // When a \"parent\" context is given, register a dependency on the parent context. Thus whenever the\r\n                    // parent context is updated, this context will also be updated.\r\n                    if (parentContext[contextSubscribable])\r\n                        parentContext[contextSubscribable]();\r\n\r\n                    // Copy $root and any custom properties from the parent context\r\n                    ko.utils.extend(self, parentContext);\r\n\r\n                    // Copy Symbol properties\r\n                    if (contextAncestorBindingInfo in parentContext) {\r\n                        self[contextAncestorBindingInfo] = parentContext[contextAncestorBindingInfo];\r\n                    }\r\n                } else {\r\n                    self['$parents'] = [];\r\n                    self['$root'] = dataItem;\r\n\r\n                    // Export 'ko' in the binding context so it will be available in bindings and templates\r\n                    // even if 'ko' isn't exported as a global, such as when using an AMD loader.\r\n                    // See https://github.com/SteveSanderson/knockout/issues/490\r\n                    self['ko'] = ko;\r\n                }\r\n\r\n                self[contextSubscribable] = subscribable;\r\n\r\n                if (shouldInheritData) {\r\n                    dataItem = self['$data'];\r\n                } else {\r\n                    self['$rawData'] = dataItemOrObservable;\r\n                    self['$data'] = dataItem;\r\n                }\r\n\r\n                if (dataItemAlias)\r\n                    self[dataItemAlias] = dataItem;\r\n\r\n                // The extendCallback function is provided when creating a child context or extending a context.\r\n                // It handles the specific actions needed to finish setting up the binding context. Actions in this\r\n                // function could also add dependencies to this binding context.\r\n                if (extendCallback)\r\n                    extendCallback(self, parentContext, dataItem);\r\n\r\n                return self['$data'];\r\n            }\r\n\r\n            var self = this,\r\n                shouldInheritData = dataItemOrAccessor === inheritParentVm,\r\n                realDataItemOrAccessor = shouldInheritData ? undefined : dataItemOrAccessor,\r\n                isFunc = typeof(realDataItemOrAccessor) == \"function\" && !ko.isObservable(realDataItemOrAccessor),\r\n                nodes,\r\n                subscribable;\r\n\r\n            if (options && options['exportDependencies']) {\r\n                // The \"exportDependencies\" option means that the calling code will track any dependencies and re-create\r\n                // the binding context when they change.\r\n                updateContext();\r\n            } else {\r\n                subscribable = ko.pureComputed(updateContext);\r\n                subscribable.peek();\r\n\r\n                // At this point, the binding context has been initialized, and the \"subscribable\" computed observable is\r\n                // subscribed to any observables that were accessed in the process. If there is nothing to track, the\r\n                // computed will be inactive, and we can safely throw it away. If it's active, the computed is stored in\r\n                // the context object.\r\n                if (subscribable.isActive()) {\r\n                    // Always notify because even if the model ($data) hasn't changed, other context properties might have changed\r\n                    subscribable['equalityComparer'] = null;\r\n                } else {\r\n                    self[contextSubscribable] = undefined;\r\n                }\r\n            }\r\n        }\r\n\r\n        // Extend the binding context hierarchy with a new view model object. If the parent context is watching\r\n        // any observables, the new child context will automatically get a dependency on the parent context.\r\n        // But this does not mean that the $data value of the child context will also get updated. If the child\r\n        // view model also depends on the parent view model, you must provide a function that returns the correct\r\n        // view model on each update.\r\n        ko.bindingContext.prototype['createChildContext'] = function (dataItemOrAccessor, dataItemAlias, extendCallback, options) {\r\n            if (!options && dataItemAlias && typeof dataItemAlias == \"object\") {\r\n                options = dataItemAlias;\r\n                dataItemAlias = options['as'];\r\n                extendCallback = options['extend'];\r\n            }\r\n\r\n            if (dataItemAlias && options && options['noChildContext']) {\r\n                var isFunc = typeof(dataItemOrAccessor) == \"function\" && !ko.isObservable(dataItemOrAccessor);\r\n                return new ko.bindingContext(inheritParentVm, this, null, function (self) {\r\n                    if (extendCallback)\r\n                        extendCallback(self);\r\n                    self[dataItemAlias] = isFunc ? dataItemOrAccessor() : dataItemOrAccessor;\r\n                }, options);\r\n            }\r\n\r\n            return new ko.bindingContext(dataItemOrAccessor, this, dataItemAlias, function (self, parentContext) {\r\n                // Extend the context hierarchy by setting the appropriate pointers\r\n                self['$parentContext'] = parentContext;\r\n                self['$parent'] = parentContext['$data'];\r\n                self['$parents'] = (parentContext['$parents'] || []).slice(0);\r\n                self['$parents'].unshift(self['$parent']);\r\n                if (extendCallback)\r\n                    extendCallback(self);\r\n            }, options);\r\n        };\r\n\r\n        // Extend the binding context with new custom properties. This doesn't change the context hierarchy.\r\n        // Similarly to \"child\" contexts, provide a function here to make sure that the correct values are set\r\n        // when an observable view model is updated.\r\n        ko.bindingContext.prototype['extend'] = function(properties) {\r\n            // If the parent context references an observable view model, \"contextSubscribable\" will always be the\r\n            // latest view model object. If not, \"contextSubscribable\" isn't set, and we can use the static \"$data\" value.\r\n            return new ko.bindingContext(inheritParentVm, this, null, function(self, parentContext) {\r\n                ko.utils.extend(self, typeof(properties) == \"function\" ? properties(self) : properties);\r\n            });\r\n        };\r\n\r\n        var boundElementDomDataKey = ko.utils.domData.nextKey();\r\n\r\n        function asyncContextDispose(node) {\r\n            var bindingInfo = ko.utils.domData.get(node, boundElementDomDataKey),\r\n                asyncContext = bindingInfo && bindingInfo.asyncContext;\r\n            if (asyncContext) {\r\n                bindingInfo.asyncContext = null;\r\n                asyncContext.notifyAncestor();\r\n            }\r\n        }\r\n        function AsyncCompleteContext(node, bindingInfo, ancestorBindingInfo) {\r\n            this.node = node;\r\n            this.bindingInfo = bindingInfo;\r\n            this.asyncDescendants = [];\r\n            this.childrenComplete = false;\r\n\r\n            if (!bindingInfo.asyncContext) {\r\n                ko.utils.domNodeDisposal.addDisposeCallback(node, asyncContextDispose);\r\n            }\r\n\r\n            if (ancestorBindingInfo && ancestorBindingInfo.asyncContext) {\r\n                ancestorBindingInfo.asyncContext.asyncDescendants.push(node);\r\n                this.ancestorBindingInfo = ancestorBindingInfo;\r\n            }\r\n        }\r\n        AsyncCompleteContext.prototype.notifyAncestor = function () {\r\n            if (this.ancestorBindingInfo && this.ancestorBindingInfo.asyncContext) {\r\n                this.ancestorBindingInfo.asyncContext.descendantComplete(this.node);\r\n            }\r\n        };\r\n        AsyncCompleteContext.prototype.descendantComplete = function (node) {\r\n            ko.utils.arrayRemoveItem(this.asyncDescendants, node);\r\n            if (!this.asyncDescendants.length && this.childrenComplete) {\r\n                this.completeChildren();\r\n            }\r\n        };\r\n        AsyncCompleteContext.prototype.completeChildren = function () {\r\n            this.childrenComplete = true;\r\n            if (this.bindingInfo.asyncContext && !this.asyncDescendants.length) {\r\n                this.bindingInfo.asyncContext = null;\r\n                ko.utils.domNodeDisposal.removeDisposeCallback(this.node, asyncContextDispose);\r\n                ko.bindingEvent.notify(this.node, ko.bindingEvent.descendantsComplete);\r\n                this.notifyAncestor();\r\n            }\r\n        };\r\n\r\n        ko.bindingEvent = {\r\n            childrenComplete: \"childrenComplete\",\r\n            descendantsComplete : \"descendantsComplete\",\r\n\r\n            subscribe: function (node, event, callback, context) {\r\n                var bindingInfo = ko.utils.domData.getOrSet(node, boundElementDomDataKey, {});\r\n                if (!bindingInfo.eventSubscribable) {\r\n                    bindingInfo.eventSubscribable = new ko.subscribable;\r\n                }\r\n                return bindingInfo.eventSubscribable.subscribe(callback, context, event);\r\n            },\r\n\r\n            notify: function (node, event) {\r\n                var bindingInfo = ko.utils.domData.get(node, boundElementDomDataKey);\r\n                if (bindingInfo) {\r\n                    if (bindingInfo.eventSubscribable) {\r\n                        bindingInfo.eventSubscribable['notifySubscribers'](node, event);\r\n                    }\r\n                    if (event == ko.bindingEvent.childrenComplete) {\r\n                        if (bindingInfo.asyncContext) {\r\n                            bindingInfo.asyncContext.completeChildren();\r\n                        } else if (bindingInfo.asyncContext === undefined && bindingInfo.eventSubscribable && bindingInfo.eventSubscribable.hasSubscriptionsForEvent(ko.bindingEvent.descendantsComplete)) {\r\n                            // It's currently an error to register a descendantsComplete handler for a node that was never registered as completing asynchronously.\r\n                            // That's because without the asyncContext, we don't have a way to know that all descendants have completed.\r\n                            throw new Error(\"descendantsComplete event not supported for bindings on this node\");\r\n                        }\r\n                    }\r\n                }\r\n            },\r\n\r\n            startPossiblyAsyncContentBinding: function (node, bindingContext) {\r\n                var bindingInfo = ko.utils.domData.getOrSet(node, boundElementDomDataKey, {});\r\n\r\n                if (!bindingInfo.asyncContext) {\r\n                    bindingInfo.asyncContext = new AsyncCompleteContext(node, bindingInfo, bindingContext[contextAncestorBindingInfo]);\r\n                }\r\n\r\n                // If the provided context was already extended with this node's binding info, just return the extended context\r\n                if (bindingContext[contextAncestorBindingInfo] == bindingInfo) {\r\n                    return bindingContext;\r\n                }\r\n\r\n                return bindingContext['extend'](function (ctx) {\r\n                    ctx[contextAncestorBindingInfo] = bindingInfo;\r\n                });\r\n            }\r\n        };\r\n\r\n        // Returns the valueAccessor function for a binding value\r\n        function makeValueAccessor(value) {\r\n            return function() {\r\n                return value;\r\n            };\r\n        }\r\n\r\n        // Returns the value of a valueAccessor function\r\n        function evaluateValueAccessor(valueAccessor) {\r\n            return valueAccessor();\r\n        }\r\n\r\n        // Given a function that returns bindings, create and return a new object that contains\r\n        // binding value-accessors functions. Each accessor function calls the original function\r\n        // so that it always gets the latest value and all dependencies are captured. This is used\r\n        // by ko.applyBindingsToNode and getBindingsAndMakeAccessors.\r\n        function makeAccessorsFromFunction(callback) {\r\n            return ko.utils.objectMap(ko.dependencyDetection.ignore(callback), function(value, key) {\r\n                return function() {\r\n                    return callback()[key];\r\n                };\r\n            });\r\n        }\r\n\r\n        // Given a bindings function or object, create and return a new object that contains\r\n        // binding value-accessors functions. This is used by ko.applyBindingsToNode.\r\n        function makeBindingAccessors(bindings, context, node) {\r\n            if (typeof bindings === 'function') {\r\n                return makeAccessorsFromFunction(bindings.bind(null, context, node));\r\n            } else {\r\n                return ko.utils.objectMap(bindings, makeValueAccessor);\r\n            }\r\n        }\r\n\r\n        // This function is used if the binding provider doesn't include a getBindingAccessors function.\r\n        // It must be called with 'this' set to the provider instance.\r\n        function getBindingsAndMakeAccessors(node, context) {\r\n            return makeAccessorsFromFunction(this['getBindings'].bind(this, node, context));\r\n        }\r\n\r\n        function validateThatBindingIsAllowedForVirtualElements(bindingName) {\r\n            var validator = ko.virtualElements.allowedBindings[bindingName];\r\n            if (!validator)\r\n                throw new Error(\"The binding '\" + bindingName + \"' cannot be used with virtual elements\")\r\n        }\r\n\r\n        function applyBindingsToDescendantsInternal(bindingContext, elementOrVirtualElement) {\r\n            var nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);\r\n\r\n            if (nextInQueue) {\r\n                var currentChild,\r\n                    provider = ko.bindingProvider['instance'],\r\n                    preprocessNode = provider['preprocessNode'];\r\n\r\n                // Preprocessing allows a binding provider to mutate a node before bindings are applied to it. For example it's\r\n                // possible to insert new siblings after it, and/or replace the node with a different one. This can be used to\r\n                // implement custom binding syntaxes, such as {{ value }} for string interpolation, or custom element types that\r\n                // trigger insertion of <template> contents at that point in the document.\r\n                if (preprocessNode) {\r\n                    while (currentChild = nextInQueue) {\r\n                        nextInQueue = ko.virtualElements.nextSibling(currentChild);\r\n                        preprocessNode.call(provider, currentChild);\r\n                    }\r\n                    // Reset nextInQueue for the next loop\r\n                    nextInQueue = ko.virtualElements.firstChild(elementOrVirtualElement);\r\n                }\r\n\r\n                while (currentChild = nextInQueue) {\r\n                    // Keep a record of the next child *before* applying bindings, in case the binding removes the current child from its position\r\n                    nextInQueue = ko.virtualElements.nextSibling(currentChild);\r\n                    applyBindingsToNodeAndDescendantsInternal(bindingContext, currentChild);\r\n                }\r\n            }\r\n            ko.bindingEvent.notify(elementOrVirtualElement, ko.bindingEvent.childrenComplete);\r\n        }\r\n\r\n        function applyBindingsToNodeAndDescendantsInternal(bindingContext, nodeVerified) {\r\n            var bindingContextForDescendants = bindingContext;\r\n\r\n            var isElement = (nodeVerified.nodeType === 1);\r\n            if (isElement) // Workaround IE <= 8 HTML parsing weirdness\r\n                ko.virtualElements.normaliseVirtualElementDomStructure(nodeVerified);\r\n\r\n            // Perf optimisation: Apply bindings only if...\r\n            // (1) We need to store the binding info for the node (all element nodes)\r\n            // (2) It might have bindings (e.g., it has a data-bind attribute, or it's a marker for a containerless template)\r\n            var shouldApplyBindings = isElement || ko.bindingProvider['instance']['nodeHasBindings'](nodeVerified);\r\n            if (shouldApplyBindings)\r\n                bindingContextForDescendants = applyBindingsToNodeInternal(nodeVerified, null, bindingContext)['bindingContextForDescendants'];\r\n\r\n            if (bindingContextForDescendants && !bindingDoesNotRecurseIntoElementTypes[ko.utils.tagNameLower(nodeVerified)]) {\r\n                applyBindingsToDescendantsInternal(bindingContextForDescendants, nodeVerified);\r\n            }\r\n        }\r\n\r\n        function topologicalSortBindings(bindings) {\r\n            // Depth-first sort\r\n            var result = [],                // The list of key/handler pairs that we will return\r\n                bindingsConsidered = {},    // A temporary record of which bindings are already in 'result'\r\n                cyclicDependencyStack = []; // Keeps track of a depth-search so that, if there's a cycle, we know which bindings caused it\r\n            ko.utils.objectForEach(bindings, function pushBinding(bindingKey) {\r\n                if (!bindingsConsidered[bindingKey]) {\r\n                    var binding = ko['getBindingHandler'](bindingKey);\r\n                    if (binding) {\r\n                        // First add dependencies (if any) of the current binding\r\n                        if (binding['after']) {\r\n                            cyclicDependencyStack.push(bindingKey);\r\n                            ko.utils.arrayForEach(binding['after'], function(bindingDependencyKey) {\r\n                                if (bindings[bindingDependencyKey]) {\r\n                                    if (ko.utils.arrayIndexOf(cyclicDependencyStack, bindingDependencyKey) !== -1) {\r\n                                        throw Error(\"Cannot combine the following bindings, because they have a cyclic dependency: \" + cyclicDependencyStack.join(\", \"));\r\n                                    } else {\r\n                                        pushBinding(bindingDependencyKey);\r\n                                    }\r\n                                }\r\n                            });\r\n                            cyclicDependencyStack.length--;\r\n                        }\r\n                        // Next add the current binding\r\n                        result.push({ key: bindingKey, handler: binding });\r\n                    }\r\n                    bindingsConsidered[bindingKey] = true;\r\n                }\r\n            });\r\n\r\n            return result;\r\n        }\r\n\r\n        function applyBindingsToNodeInternal(node, sourceBindings, bindingContext) {\r\n            var bindingInfo = ko.utils.domData.getOrSet(node, boundElementDomDataKey, {});\r\n\r\n            // Prevent multiple applyBindings calls for the same node, except when a binding value is specified\r\n            var alreadyBound = bindingInfo.alreadyBound;\r\n            if (!sourceBindings) {\r\n                if (alreadyBound) {\r\n                    throw Error(\"You cannot apply bindings multiple times to the same element.\");\r\n                }\r\n                bindingInfo.alreadyBound = true;\r\n            }\r\n            if (!alreadyBound) {\r\n                bindingInfo.context = bindingContext;\r\n            }\r\n\r\n            // Use bindings if given, otherwise fall back on asking the bindings provider to give us some bindings\r\n            var bindings;\r\n            if (sourceBindings && typeof sourceBindings !== 'function') {\r\n                bindings = sourceBindings;\r\n            } else {\r\n                var provider = ko.bindingProvider['instance'],\r\n                    getBindings = provider['getBindingAccessors'] || getBindingsAndMakeAccessors;\r\n\r\n                // Get the binding from the provider within a computed observable so that we can update the bindings whenever\r\n                // the binding context is updated or if the binding provider accesses observables.\r\n                var bindingsUpdater = ko.dependentObservable(\r\n                    function() {\r\n                        bindings = sourceBindings ? sourceBindings(bindingContext, node) : getBindings.call(provider, node, bindingContext);\r\n                        // Register a dependency on the binding context to support observable view models.\r\n                        if (bindings && bindingContext[contextSubscribable])\r\n                            bindingContext[contextSubscribable]();\r\n                        return bindings;\r\n                    },\r\n                    null, { disposeWhenNodeIsRemoved: node }\r\n                );\r\n\r\n                if (!bindings || !bindingsUpdater.isActive())\r\n                    bindingsUpdater = null;\r\n            }\r\n\r\n            var contextToExtend = bindingContext;\r\n            var bindingHandlerThatControlsDescendantBindings;\r\n            if (bindings) {\r\n                // Return the value accessor for a given binding. When bindings are static (won't be updated because of a binding\r\n                // context update), just return the value accessor from the binding. Otherwise, return a function that always gets\r\n                // the latest binding value and registers a dependency on the binding updater.\r\n                var getValueAccessor = bindingsUpdater\r\n                    ? function(bindingKey) {\r\n                        return function() {\r\n                            return evaluateValueAccessor(bindingsUpdater()[bindingKey]);\r\n                        };\r\n                    } : function(bindingKey) {\r\n                        return bindings[bindingKey];\r\n                    };\r\n\r\n                // Use of allBindings as a function is maintained for backwards compatibility, but its use is deprecated\r\n                function allBindings() {\r\n                    return ko.utils.objectMap(bindingsUpdater ? bindingsUpdater() : bindings, evaluateValueAccessor);\r\n                }\r\n                // The following is the 3.x allBindings API\r\n                allBindings['get'] = function(key) {\r\n                    return bindings[key] && evaluateValueAccessor(getValueAccessor(key));\r\n                };\r\n                allBindings['has'] = function(key) {\r\n                    return key in bindings;\r\n                };\r\n\r\n                if (ko.bindingEvent.childrenComplete in bindings) {\r\n                    ko.bindingEvent.subscribe(node, ko.bindingEvent.childrenComplete, function () {\r\n                        var callback = evaluateValueAccessor(bindings[ko.bindingEvent.childrenComplete]);\r\n                        if (callback) {\r\n                            var nodes = ko.virtualElements.childNodes(node);\r\n                            if (nodes.length) {\r\n                                callback(nodes, ko.dataFor(nodes[0]));\r\n                            }\r\n                        }\r\n                    });\r\n                }\r\n\r\n                if (ko.bindingEvent.descendantsComplete in bindings) {\r\n                    contextToExtend = ko.bindingEvent.startPossiblyAsyncContentBinding(node, bindingContext);\r\n                    ko.bindingEvent.subscribe(node, ko.bindingEvent.descendantsComplete, function () {\r\n                        var callback = evaluateValueAccessor(bindings[ko.bindingEvent.descendantsComplete]);\r\n                        if (callback && ko.virtualElements.firstChild(node)) {\r\n                            callback(node);\r\n                        }\r\n                    });\r\n                }\r\n\r\n                // First put the bindings into the right order\r\n                var orderedBindings = topologicalSortBindings(bindings);\r\n\r\n                // Go through the sorted bindings, calling init and update for each\r\n                ko.utils.arrayForEach(orderedBindings, function(bindingKeyAndHandler) {\r\n                    // Note that topologicalSortBindings has already filtered out any nonexistent binding handlers,\r\n                    // so bindingKeyAndHandler.handler will always be nonnull.\r\n                    var handlerInitFn = bindingKeyAndHandler.handler[\"init\"],\r\n                        handlerUpdateFn = bindingKeyAndHandler.handler[\"update\"],\r\n                        bindingKey = bindingKeyAndHandler.key;\r\n\r\n                    if (node.nodeType === 8) {\r\n                        validateThatBindingIsAllowedForVirtualElements(bindingKey);\r\n                    }\r\n\r\n                    try {\r\n                        // Run init, ignoring any dependencies\r\n                        if (typeof handlerInitFn == \"function\") {\r\n                            ko.dependencyDetection.ignore(function() {\r\n                                var initResult = handlerInitFn(node, getValueAccessor(bindingKey), allBindings, contextToExtend['$data'], contextToExtend);\r\n\r\n                                // If this binding handler claims to control descendant bindings, make a note of this\r\n                                if (initResult && initResult['controlsDescendantBindings']) {\r\n                                    if (bindingHandlerThatControlsDescendantBindings !== undefined)\r\n                                        throw new Error(\"Multiple bindings (\" + bindingHandlerThatControlsDescendantBindings + \" and \" + bindingKey + \") are trying to control descendant bindings of the same element. You cannot use these bindings together on the same element.\");\r\n                                    bindingHandlerThatControlsDescendantBindings = bindingKey;\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        // Run update in its own computed wrapper\r\n                        if (typeof handlerUpdateFn == \"function\") {\r\n                            ko.dependentObservable(\r\n                                function() {\r\n                                    handlerUpdateFn(node, getValueAccessor(bindingKey), allBindings, contextToExtend['$data'], contextToExtend);\r\n                                },\r\n                                null,\r\n                                { disposeWhenNodeIsRemoved: node }\r\n                            );\r\n                        }\r\n                    } catch (ex) {\r\n                        ex.message = \"Unable to process binding \\\"\" + bindingKey + \": \" + bindings[bindingKey] + \"\\\"\\nMessage: \" + ex.message;\r\n                        throw ex;\r\n                    }\r\n                });\r\n            }\r\n\r\n            var shouldBindDescendants = bindingHandlerThatControlsDescendantBindings === undefined;\r\n            return {\r\n                'shouldBindDescendants': shouldBindDescendants,\r\n                'bindingContextForDescendants': shouldBindDescendants && contextToExtend\r\n            };\r\n        };\r\n\r\n        ko.storedBindingContextForNode = function (node) {\r\n            var bindingInfo = ko.utils.domData.get(node, boundElementDomDataKey);\r\n            return bindingInfo && bindingInfo.context;\r\n        }\r\n\r\n        function getBindingContext(viewModelOrBindingContext, extendContextCallback) {\r\n            return viewModelOrBindingContext && (viewModelOrBindingContext instanceof ko.bindingContext)\r\n                ? viewModelOrBindingContext\r\n                : new ko.bindingContext(viewModelOrBindingContext, undefined, undefined, extendContextCallback);\r\n        }\r\n\r\n        ko.applyBindingAccessorsToNode = function (node, bindings, viewModelOrBindingContext) {\r\n            if (node.nodeType === 1) // If it's an element, workaround IE <= 8 HTML parsing weirdness\r\n                ko.virtualElements.normaliseVirtualElementDomStructure(node);\r\n            return applyBindingsToNodeInternal(node, bindings, getBindingContext(viewModelOrBindingContext));\r\n        };\r\n\r\n        ko.applyBindingsToNode = function (node, bindings, viewModelOrBindingContext) {\r\n            var context = getBindingContext(viewModelOrBindingContext);\r\n            return ko.applyBindingAccessorsToNode(node, makeBindingAccessors(bindings, context, node), context);\r\n        };\r\n\r\n        ko.applyBindingsToDescendants = function(viewModelOrBindingContext, rootNode) {\r\n            if (rootNode.nodeType === 1 || rootNode.nodeType === 8)\r\n                applyBindingsToDescendantsInternal(getBindingContext(viewModelOrBindingContext), rootNode);\r\n        };\r\n\r\n        ko.applyBindings = function (viewModelOrBindingContext, rootNode, extendContextCallback) {\r\n            // If jQuery is loaded after Knockout, we won't initially have access to it. So save it here.\r\n            if (!jQueryInstance && window['jQuery']) {\r\n                jQueryInstance = window['jQuery'];\r\n            }\r\n\r\n            if (arguments.length < 2) {\r\n                rootNode = document.body;\r\n                if (!rootNode) {\r\n                    throw Error(\"ko.applyBindings: could not find document.body; has the document been loaded?\");\r\n                }\r\n            } else if (!rootNode || (rootNode.nodeType !== 1 && rootNode.nodeType !== 8)) {\r\n                throw Error(\"ko.applyBindings: first parameter should be your view model; second parameter should be a DOM node\");\r\n            }\r\n\r\n            applyBindingsToNodeAndDescendantsInternal(getBindingContext(viewModelOrBindingContext, extendContextCallback), rootNode);\r\n        };\r\n\r\n        // Retrieving binding context from arbitrary nodes\r\n        ko.contextFor = function(node) {\r\n            // We can only do something meaningful for elements and comment nodes (in particular, not text nodes, as IE can't store domdata for them)\r\n            if (node && (node.nodeType === 1 || node.nodeType === 8)) {\r\n                return ko.storedBindingContextForNode(node);\r\n            }\r\n            return undefined;\r\n        };\r\n        ko.dataFor = function(node) {\r\n            var context = ko.contextFor(node);\r\n            return context ? context['$data'] : undefined;\r\n        };\r\n\r\n        ko.exportSymbol('bindingHandlers', ko.bindingHandlers);\r\n        ko.exportSymbol('bindingEvent', ko.bindingEvent);\r\n        ko.exportSymbol('bindingEvent.subscribe', ko.bindingEvent.subscribe);\r\n        ko.exportSymbol('applyBindings', ko.applyBindings);\r\n        ko.exportSymbol('applyBindingsToDescendants', ko.applyBindingsToDescendants);\r\n        ko.exportSymbol('applyBindingAccessorsToNode', ko.applyBindingAccessorsToNode);\r\n        ko.exportSymbol('applyBindingsToNode', ko.applyBindingsToNode);\r\n        ko.exportSymbol('contextFor', ko.contextFor);\r\n        ko.exportSymbol('dataFor', ko.dataFor);\r\n    })();\r\n    (function(undefined) {\r\n        var loadingSubscribablesCache = {}, // Tracks component loads that are currently in flight\r\n            loadedDefinitionsCache = {};    // Tracks component loads that have already completed\r\n\r\n        ko.components = {\r\n            get: function(componentName, callback) {\r\n                var cachedDefinition = getObjectOwnProperty(loadedDefinitionsCache, componentName);\r\n                if (cachedDefinition) {\r\n                    // It's already loaded and cached. Reuse the same definition object.\r\n                    // Note that for API consistency, even cache hits complete asynchronously by default.\r\n                    // You can bypass this by putting synchronous:true on your component config.\r\n                    if (cachedDefinition.isSynchronousComponent) {\r\n                        ko.dependencyDetection.ignore(function() { // See comment in loaderRegistryBehaviors.js for reasoning\r\n                            callback(cachedDefinition.definition);\r\n                        });\r\n                    } else {\r\n                        ko.tasks.schedule(function() { callback(cachedDefinition.definition); });\r\n                    }\r\n                } else {\r\n                    // Join the loading process that is already underway, or start a new one.\r\n                    loadComponentAndNotify(componentName, callback);\r\n                }\r\n            },\r\n\r\n            clearCachedDefinition: function(componentName) {\r\n                delete loadedDefinitionsCache[componentName];\r\n            },\r\n\r\n            _getFirstResultFromLoaders: getFirstResultFromLoaders\r\n        };\r\n\r\n        function getObjectOwnProperty(obj, propName) {\r\n            return Object.prototype.hasOwnProperty.call(obj, propName) ? obj[propName] : undefined;\r\n        }\r\n\r\n        function loadComponentAndNotify(componentName, callback) {\r\n            var subscribable = getObjectOwnProperty(loadingSubscribablesCache, componentName),\r\n                completedAsync;\r\n            if (!subscribable) {\r\n                // It's not started loading yet. Start loading, and when it's done, move it to loadedDefinitionsCache.\r\n                subscribable = loadingSubscribablesCache[componentName] = new ko.subscribable();\r\n                subscribable.subscribe(callback);\r\n\r\n                beginLoadingComponent(componentName, function(definition, config) {\r\n                    var isSynchronousComponent = !!(config && config['synchronous']);\r\n                    loadedDefinitionsCache[componentName] = { definition: definition, isSynchronousComponent: isSynchronousComponent };\r\n                    delete loadingSubscribablesCache[componentName];\r\n\r\n                    // For API consistency, all loads complete asynchronously. However we want to avoid\r\n                    // adding an extra task schedule if it's unnecessary (i.e., the completion is already\r\n                    // async).\r\n                    //\r\n                    // You can bypass the 'always asynchronous' feature by putting the synchronous:true\r\n                    // flag on your component configuration when you register it.\r\n                    if (completedAsync || isSynchronousComponent) {\r\n                        // Note that notifySubscribers ignores any dependencies read within the callback.\r\n                        // See comment in loaderRegistryBehaviors.js for reasoning\r\n                        subscribable['notifySubscribers'](definition);\r\n                    } else {\r\n                        ko.tasks.schedule(function() {\r\n                            subscribable['notifySubscribers'](definition);\r\n                        });\r\n                    }\r\n                });\r\n                completedAsync = true;\r\n            } else {\r\n                subscribable.subscribe(callback);\r\n            }\r\n        }\r\n\r\n        function beginLoadingComponent(componentName, callback) {\r\n            getFirstResultFromLoaders('getConfig', [componentName], function(config) {\r\n                if (config) {\r\n                    // We have a config, so now load its definition\r\n                    getFirstResultFromLoaders('loadComponent', [componentName, config], function(definition) {\r\n                        callback(definition, config);\r\n                    });\r\n                } else {\r\n                    // The component has no config - it's unknown to all the loaders.\r\n                    // Note that this is not an error (e.g., a module loading error) - that would abort the\r\n                    // process and this callback would not run. For this callback to run, all loaders must\r\n                    // have confirmed they don't know about this component.\r\n                    callback(null, null);\r\n                }\r\n            });\r\n        }\r\n\r\n        function getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders) {\r\n            // On the first call in the stack, start with the full set of loaders\r\n            if (!candidateLoaders) {\r\n                candidateLoaders = ko.components['loaders'].slice(0); // Use a copy, because we'll be mutating this array\r\n            }\r\n\r\n            // Try the next candidate\r\n            var currentCandidateLoader = candidateLoaders.shift();\r\n            if (currentCandidateLoader) {\r\n                var methodInstance = currentCandidateLoader[methodName];\r\n                if (methodInstance) {\r\n                    var wasAborted = false,\r\n                        synchronousReturnValue = methodInstance.apply(currentCandidateLoader, argsExceptCallback.concat(function(result) {\r\n                            if (wasAborted) {\r\n                                callback(null);\r\n                            } else if (result !== null) {\r\n                                // This candidate returned a value. Use it.\r\n                                callback(result);\r\n                            } else {\r\n                                // Try the next candidate\r\n                                getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\r\n                            }\r\n                        }));\r\n\r\n                    // Currently, loaders may not return anything synchronously. This leaves open the possibility\r\n                    // that we'll extend the API to support synchronous return values in the future. It won't be\r\n                    // a breaking change, because currently no loader is allowed to return anything except undefined.\r\n                    if (synchronousReturnValue !== undefined) {\r\n                        wasAborted = true;\r\n\r\n                        // Method to suppress exceptions will remain undocumented. This is only to keep\r\n                        // KO's specs running tidily, since we can observe the loading got aborted without\r\n                        // having exceptions cluttering up the console too.\r\n                        if (!currentCandidateLoader['suppressLoaderExceptions']) {\r\n                            throw new Error('Component loaders must supply values by invoking the callback, not by returning values synchronously.');\r\n                        }\r\n                    }\r\n                } else {\r\n                    // This candidate doesn't have the relevant handler. Synchronously move on to the next one.\r\n                    getFirstResultFromLoaders(methodName, argsExceptCallback, callback, candidateLoaders);\r\n                }\r\n            } else {\r\n                // No candidates returned a value\r\n                callback(null);\r\n            }\r\n        }\r\n\r\n        // Reference the loaders via string name so it's possible for developers\r\n        // to replace the whole array by assigning to ko.components.loaders\r\n        ko.components['loaders'] = [];\r\n\r\n        ko.exportSymbol('components', ko.components);\r\n        ko.exportSymbol('components.get', ko.components.get);\r\n        ko.exportSymbol('components.clearCachedDefinition', ko.components.clearCachedDefinition);\r\n    })();\r\n    (function(undefined) {\r\n\r\n        // The default loader is responsible for two things:\r\n        // 1. Maintaining the default in-memory registry of component configuration objects\r\n        //    (i.e., the thing you're writing to when you call ko.components.register(someName, ...))\r\n        // 2. Answering requests for components by fetching configuration objects\r\n        //    from that default in-memory registry and resolving them into standard\r\n        //    component definition objects (of the form { createViewModel: ..., template: ... })\r\n        // Custom loaders may override either of these facilities, i.e.,\r\n        // 1. To supply configuration objects from some other source (e.g., conventions)\r\n        // 2. Or, to resolve configuration objects by loading viewmodels/templates via arbitrary logic.\r\n\r\n        var defaultConfigRegistry = {};\r\n\r\n        ko.components.register = function(componentName, config) {\r\n            if (!config) {\r\n                throw new Error('Invalid configuration for ' + componentName);\r\n            }\r\n\r\n            if (ko.components.isRegistered(componentName)) {\r\n                throw new Error('Component ' + componentName + ' is already registered');\r\n            }\r\n\r\n            defaultConfigRegistry[componentName] = config;\r\n        };\r\n\r\n        ko.components.isRegistered = function(componentName) {\r\n            return Object.prototype.hasOwnProperty.call(defaultConfigRegistry, componentName);\r\n        };\r\n\r\n        ko.components.unregister = function(componentName) {\r\n            delete defaultConfigRegistry[componentName];\r\n            ko.components.clearCachedDefinition(componentName);\r\n        };\r\n\r\n        ko.components.defaultLoader = {\r\n            'getConfig': function(componentName, callback) {\r\n                var result = ko.components.isRegistered(componentName)\r\n                    ? defaultConfigRegistry[componentName]\r\n                    : null;\r\n                callback(result);\r\n            },\r\n\r\n            'loadComponent': function(componentName, config, callback) {\r\n                var errorCallback = makeErrorCallback(componentName);\r\n                possiblyGetConfigFromAmd(errorCallback, config, function(loadedConfig) {\r\n                    resolveConfig(componentName, errorCallback, loadedConfig, callback);\r\n                });\r\n            },\r\n\r\n            'loadTemplate': function(componentName, templateConfig, callback) {\r\n                resolveTemplate(makeErrorCallback(componentName), templateConfig, callback);\r\n            },\r\n\r\n            'loadViewModel': function(componentName, viewModelConfig, callback) {\r\n                resolveViewModel(makeErrorCallback(componentName), viewModelConfig, callback);\r\n            }\r\n        };\r\n\r\n        var createViewModelKey = 'createViewModel';\r\n\r\n        // Takes a config object of the form { template: ..., viewModel: ... }, and asynchronously convert it\r\n        // into the standard component definition format:\r\n        //    { template: <ArrayOfDomNodes>, createViewModel: function(params, componentInfo) { ... } }.\r\n        // Since both template and viewModel may need to be resolved asynchronously, both tasks are performed\r\n        // in parallel, and the results joined when both are ready. We don't depend on any promises infrastructure,\r\n        // so this is implemented manually below.\r\n        function resolveConfig(componentName, errorCallback, config, callback) {\r\n            var result = {},\r\n                makeCallBackWhenZero = 2,\r\n                tryIssueCallback = function() {\r\n                    if (--makeCallBackWhenZero === 0) {\r\n                        callback(result);\r\n                    }\r\n                },\r\n                templateConfig = config['template'],\r\n                viewModelConfig = config['viewModel'];\r\n\r\n            if (templateConfig) {\r\n                possiblyGetConfigFromAmd(errorCallback, templateConfig, function(loadedConfig) {\r\n                    ko.components._getFirstResultFromLoaders('loadTemplate', [componentName, loadedConfig], function(resolvedTemplate) {\r\n                        result['template'] = resolvedTemplate;\r\n                        tryIssueCallback();\r\n                    });\r\n                });\r\n            } else {\r\n                tryIssueCallback();\r\n            }\r\n\r\n            if (viewModelConfig) {\r\n                possiblyGetConfigFromAmd(errorCallback, viewModelConfig, function(loadedConfig) {\r\n                    ko.components._getFirstResultFromLoaders('loadViewModel', [componentName, loadedConfig], function(resolvedViewModel) {\r\n                        result[createViewModelKey] = resolvedViewModel;\r\n                        tryIssueCallback();\r\n                    });\r\n                });\r\n            } else {\r\n                tryIssueCallback();\r\n            }\r\n        }\r\n\r\n        function resolveTemplate(errorCallback, templateConfig, callback) {\r\n            if (typeof templateConfig === 'string') {\r\n                // Markup - parse it\r\n                callback(ko.utils.parseHtmlFragment(templateConfig));\r\n            } else if (templateConfig instanceof Array) {\r\n                // Assume already an array of DOM nodes - pass through unchanged\r\n                callback(templateConfig);\r\n            } else if (isDocumentFragment(templateConfig)) {\r\n                // Document fragment - use its child nodes\r\n                callback(ko.utils.makeArray(templateConfig.childNodes));\r\n            } else if (templateConfig['element']) {\r\n                var element = templateConfig['element'];\r\n                if (isDomElement(element)) {\r\n                    // Element instance - copy its child nodes\r\n                    callback(cloneNodesFromTemplateSourceElement(element));\r\n                } else if (typeof element === 'string') {\r\n                    // Element ID - find it, then copy its child nodes\r\n                    var elemInstance = document.getElementById(element);\r\n                    if (elemInstance) {\r\n                        callback(cloneNodesFromTemplateSourceElement(elemInstance));\r\n                    } else {\r\n                        errorCallback('Cannot find element with ID ' + element);\r\n                    }\r\n                } else {\r\n                    errorCallback('Unknown element type: ' + element);\r\n                }\r\n            } else {\r\n                errorCallback('Unknown template value: ' + templateConfig);\r\n            }\r\n        }\r\n\r\n        function resolveViewModel(errorCallback, viewModelConfig, callback) {\r\n            if (typeof viewModelConfig === 'function') {\r\n                // Constructor - convert to standard factory function format\r\n                // By design, this does *not* supply componentInfo to the constructor, as the intent is that\r\n                // componentInfo contains non-viewmodel data (e.g., the component's element) that should only\r\n                // be used in factory functions, not viewmodel constructors.\r\n                callback(function (params /*, componentInfo */) {\r\n                    return new viewModelConfig(params);\r\n                });\r\n            } else if (typeof viewModelConfig[createViewModelKey] === 'function') {\r\n                // Already a factory function - use it as-is\r\n                callback(viewModelConfig[createViewModelKey]);\r\n            } else if ('instance' in viewModelConfig) {\r\n                // Fixed object instance - promote to createViewModel format for API consistency\r\n                var fixedInstance = viewModelConfig['instance'];\r\n                callback(function (params, componentInfo) {\r\n                    return fixedInstance;\r\n                });\r\n            } else if ('viewModel' in viewModelConfig) {\r\n                // Resolved AMD module whose value is of the form { viewModel: ... }\r\n                resolveViewModel(errorCallback, viewModelConfig['viewModel'], callback);\r\n            } else {\r\n                errorCallback('Unknown viewModel value: ' + viewModelConfig);\r\n            }\r\n        }\r\n\r\n        function cloneNodesFromTemplateSourceElement(elemInstance) {\r\n            switch (ko.utils.tagNameLower(elemInstance)) {\r\n                case 'script':\r\n                    return ko.utils.parseHtmlFragment(elemInstance.text);\r\n                case 'textarea':\r\n                    return ko.utils.parseHtmlFragment(elemInstance.value);\r\n                case 'template':\r\n                    // For browsers with proper <template> element support (i.e., where the .content property\r\n                    // gives a document fragment), use that document fragment.\r\n                    if (isDocumentFragment(elemInstance.content)) {\r\n                        return ko.utils.cloneNodes(elemInstance.content.childNodes);\r\n                    }\r\n            }\r\n\r\n            // Regular elements such as <div>, and <template> elements on old browsers that don't really\r\n            // understand <template> and just treat it as a regular container\r\n            return ko.utils.cloneNodes(elemInstance.childNodes);\r\n        }\r\n\r\n        function isDomElement(obj) {\r\n            if (window['HTMLElement']) {\r\n                return obj instanceof HTMLElement;\r\n            } else {\r\n                return obj && obj.tagName && obj.nodeType === 1;\r\n            }\r\n        }\r\n\r\n        function isDocumentFragment(obj) {\r\n            if (window['DocumentFragment']) {\r\n                return obj instanceof DocumentFragment;\r\n            } else {\r\n                return obj && obj.nodeType === 11;\r\n            }\r\n        }\r\n\r\n        function possiblyGetConfigFromAmd(errorCallback, config, callback) {\r\n            if (typeof config['require'] === 'string') {\r\n                // The config is the value of an AMD module\r\n                if (amdRequire || window['require']) {\r\n                    (amdRequire || window['require'])([config['require']], callback);\r\n                } else {\r\n                    errorCallback('Uses require, but no AMD loader is present');\r\n                }\r\n            } else {\r\n                callback(config);\r\n            }\r\n        }\r\n\r\n        function makeErrorCallback(componentName) {\r\n            return function (message) {\r\n                throw new Error('Component \\'' + componentName + '\\': ' + message);\r\n            };\r\n        }\r\n\r\n        ko.exportSymbol('components.register', ko.components.register);\r\n        ko.exportSymbol('components.isRegistered', ko.components.isRegistered);\r\n        ko.exportSymbol('components.unregister', ko.components.unregister);\r\n\r\n        // Expose the default loader so that developers can directly ask it for configuration\r\n        // or to resolve configuration\r\n        ko.exportSymbol('components.defaultLoader', ko.components.defaultLoader);\r\n\r\n        // By default, the default loader is the only registered component loader\r\n        ko.components['loaders'].push(ko.components.defaultLoader);\r\n\r\n        // Privately expose the underlying config registry for use in old-IE shim\r\n        ko.components._allRegisteredComponents = defaultConfigRegistry;\r\n    })();\r\n    (function (undefined) {\r\n        // Overridable API for determining which component name applies to a given node. By overriding this,\r\n        // you can for example map specific tagNames to components that are not preregistered.\r\n        ko.components['getComponentNameForNode'] = function(node) {\r\n            var tagNameLower = ko.utils.tagNameLower(node);\r\n            if (ko.components.isRegistered(tagNameLower)) {\r\n                // Try to determine that this node can be considered a *custom* element; see https://github.com/knockout/knockout/issues/1603\r\n                if (tagNameLower.indexOf('-') != -1 || ('' + node) == \"[object HTMLUnknownElement]\" || (ko.utils.ieVersion <= 8 && node.tagName === tagNameLower)) {\r\n                    return tagNameLower;\r\n                }\r\n            }\r\n        };\r\n\r\n        ko.components.addBindingsForCustomElement = function(allBindings, node, bindingContext, valueAccessors) {\r\n            // Determine if it's really a custom element matching a component\r\n            if (node.nodeType === 1) {\r\n                var componentName = ko.components['getComponentNameForNode'](node);\r\n                if (componentName) {\r\n                    // It does represent a component, so add a component binding for it\r\n                    allBindings = allBindings || {};\r\n\r\n                    if (allBindings['component']) {\r\n                        // Avoid silently overwriting some other 'component' binding that may already be on the element\r\n                        throw new Error('Cannot use the \"component\" binding on a custom element matching a component');\r\n                    }\r\n\r\n                    var componentBindingValue = { 'name': componentName, 'params': getComponentParamsFromCustomElement(node, bindingContext) };\r\n\r\n                    allBindings['component'] = valueAccessors\r\n                        ? function() { return componentBindingValue; }\r\n                        : componentBindingValue;\r\n                }\r\n            }\r\n\r\n            return allBindings;\r\n        }\r\n\r\n        var nativeBindingProviderInstance = new ko.bindingProvider();\r\n\r\n        function getComponentParamsFromCustomElement(elem, bindingContext) {\r\n            var paramsAttribute = elem.getAttribute('params');\r\n\r\n            if (paramsAttribute) {\r\n                var params = nativeBindingProviderInstance['parseBindingsString'](paramsAttribute, bindingContext, elem, { 'valueAccessors': true, 'bindingParams': true }),\r\n                    rawParamComputedValues = ko.utils.objectMap(params, function(paramValue, paramName) {\r\n                        return ko.computed(paramValue, null, { disposeWhenNodeIsRemoved: elem });\r\n                    }),\r\n                    result = ko.utils.objectMap(rawParamComputedValues, function(paramValueComputed, paramName) {\r\n                        var paramValue = paramValueComputed.peek();\r\n                        // Does the evaluation of the parameter value unwrap any observables?\r\n                        if (!paramValueComputed.isActive()) {\r\n                            // No it doesn't, so there's no need for any computed wrapper. Just pass through the supplied value directly.\r\n                            // Example: \"someVal: firstName, age: 123\" (whether or not firstName is an observable/computed)\r\n                            return paramValue;\r\n                        } else {\r\n                            // Yes it does. Supply a computed property that unwraps both the outer (binding expression)\r\n                            // level of observability, and any inner (resulting model value) level of observability.\r\n                            // This means the component doesn't have to worry about multiple unwrapping. If the value is a\r\n                            // writable observable, the computed will also be writable and pass the value on to the observable.\r\n                            return ko.computed({\r\n                                'read': function() {\r\n                                    return ko.utils.unwrapObservable(paramValueComputed());\r\n                                },\r\n                                'write': ko.isWriteableObservable(paramValue) && function(value) {\r\n                                    paramValueComputed()(value);\r\n                                },\r\n                                disposeWhenNodeIsRemoved: elem\r\n                            });\r\n                        }\r\n                    });\r\n\r\n                // Give access to the raw computeds, as long as that wouldn't overwrite any custom param also called '$raw'\r\n                // This is in case the developer wants to react to outer (binding) observability separately from inner\r\n                // (model value) observability, or in case the model value observable has subobservables.\r\n                if (!Object.prototype.hasOwnProperty.call(result, '$raw')) {\r\n                    result['$raw'] = rawParamComputedValues;\r\n                }\r\n\r\n                return result;\r\n            } else {\r\n                // For consistency, absence of a \"params\" attribute is treated the same as the presence of\r\n                // any empty one. Otherwise component viewmodels need special code to check whether or not\r\n                // 'params' or 'params.$raw' is null/undefined before reading subproperties, which is annoying.\r\n                return { '$raw': {} };\r\n            }\r\n        }\r\n\r\n        // --------------------------------------------------------------------------------\r\n        // Compatibility code for older (pre-HTML5) IE browsers\r\n\r\n        if (ko.utils.ieVersion < 9) {\r\n            // Whenever you preregister a component, enable it as a custom element in the current document\r\n            ko.components['register'] = (function(originalFunction) {\r\n                return function(componentName) {\r\n                    document.createElement(componentName); // Allows IE<9 to parse markup containing the custom element\r\n                    return originalFunction.apply(this, arguments);\r\n                }\r\n            })(ko.components['register']);\r\n\r\n            // Whenever you create a document fragment, enable all preregistered component names as custom elements\r\n            // This is needed to make innerShiv/jQuery HTML parsing correctly handle the custom elements\r\n            document.createDocumentFragment = (function(originalFunction) {\r\n                return function() {\r\n                    var newDocFrag = originalFunction(),\r\n                        allComponents = ko.components._allRegisteredComponents;\r\n                    for (var componentName in allComponents) {\r\n                        if (Object.prototype.hasOwnProperty.call(allComponents, componentName)) {\r\n                            newDocFrag.createElement(componentName);\r\n                        }\r\n                    }\r\n                    return newDocFrag;\r\n                };\r\n            })(document.createDocumentFragment);\r\n        }\r\n    })();(function(undefined) {\r\n        var componentLoadingOperationUniqueId = 0;\r\n\r\n        ko.bindingHandlers['component'] = {\r\n            'init': function(element, valueAccessor, ignored1, ignored2, bindingContext) {\r\n                var currentViewModel,\r\n                    currentLoadingOperationId,\r\n                    afterRenderSub,\r\n                    disposeAssociatedComponentViewModel = function () {\r\n                        var currentViewModelDispose = currentViewModel && currentViewModel['dispose'];\r\n                        if (typeof currentViewModelDispose === 'function') {\r\n                            currentViewModelDispose.call(currentViewModel);\r\n                        }\r\n                        if (afterRenderSub) {\r\n                            afterRenderSub.dispose();\r\n                        }\r\n                        afterRenderSub = null;\r\n                        currentViewModel = null;\r\n                        // Any in-flight loading operation is no longer relevant, so make sure we ignore its completion\r\n                        currentLoadingOperationId = null;\r\n                    },\r\n                    originalChildNodes = ko.utils.makeArray(ko.virtualElements.childNodes(element));\r\n\r\n                ko.virtualElements.emptyNode(element);\r\n                ko.utils.domNodeDisposal.addDisposeCallback(element, disposeAssociatedComponentViewModel);\r\n\r\n                ko.computed(function () {\r\n                    var value = ko.utils.unwrapObservable(valueAccessor()),\r\n                        componentName, componentParams;\r\n\r\n                    if (typeof value === 'string') {\r\n                        componentName = value;\r\n                    } else {\r\n                        componentName = ko.utils.unwrapObservable(value['name']);\r\n                        componentParams = ko.utils.unwrapObservable(value['params']);\r\n                    }\r\n\r\n                    if (!componentName) {\r\n                        throw new Error('No component name specified');\r\n                    }\r\n\r\n                    var asyncContext = ko.bindingEvent.startPossiblyAsyncContentBinding(element, bindingContext);\r\n\r\n                    var loadingOperationId = currentLoadingOperationId = ++componentLoadingOperationUniqueId;\r\n                    ko.components.get(componentName, function(componentDefinition) {\r\n                        // If this is not the current load operation for this element, ignore it.\r\n                        if (currentLoadingOperationId !== loadingOperationId) {\r\n                            return;\r\n                        }\r\n\r\n                        // Clean up previous state\r\n                        disposeAssociatedComponentViewModel();\r\n\r\n                        // Instantiate and bind new component. Implicitly this cleans any old DOM nodes.\r\n                        if (!componentDefinition) {\r\n                            throw new Error('Unknown component \\'' + componentName + '\\'');\r\n                        }\r\n                        cloneTemplateIntoElement(componentName, componentDefinition, element);\r\n\r\n                        var componentInfo = {\r\n                            'element': element,\r\n                            'templateNodes': originalChildNodes\r\n                        };\r\n\r\n                        var componentViewModel = createViewModel(componentDefinition, componentParams, componentInfo),\r\n                            childBindingContext = asyncContext['createChildContext'](componentViewModel, {\r\n                                'extend': function(ctx) {\r\n                                    ctx['$component'] = componentViewModel;\r\n                                    ctx['$componentTemplateNodes'] = originalChildNodes;\r\n                                }\r\n                            });\r\n\r\n                        if (componentViewModel && componentViewModel['koDescendantsComplete']) {\r\n                            afterRenderSub = ko.bindingEvent.subscribe(element, ko.bindingEvent.descendantsComplete, componentViewModel['koDescendantsComplete'], componentViewModel);\r\n                        }\r\n\r\n                        currentViewModel = componentViewModel;\r\n                        ko.applyBindingsToDescendants(childBindingContext, element);\r\n                    });\r\n                }, null, { disposeWhenNodeIsRemoved: element });\r\n\r\n                return { 'controlsDescendantBindings': true };\r\n            }\r\n        };\r\n\r\n        ko.virtualElements.allowedBindings['component'] = true;\r\n\r\n        function cloneTemplateIntoElement(componentName, componentDefinition, element) {\r\n            var template = componentDefinition['template'];\r\n            if (!template) {\r\n                throw new Error('Component \\'' + componentName + '\\' has no template');\r\n            }\r\n\r\n            var clonedNodesArray = ko.utils.cloneNodes(template);\r\n            ko.virtualElements.setDomNodeChildren(element, clonedNodesArray);\r\n        }\r\n\r\n        function createViewModel(componentDefinition, componentParams, componentInfo) {\r\n            var componentViewModelFactory = componentDefinition['createViewModel'];\r\n            return componentViewModelFactory\r\n                ? componentViewModelFactory.call(componentDefinition, componentParams, componentInfo)\r\n                : componentParams; // Template-only component\r\n        }\r\n\r\n    })();\r\n    var attrHtmlToJavaScriptMap = { 'class': 'className', 'for': 'htmlFor' };\r\n    ko.bindingHandlers['attr'] = {\r\n        'update': function(element, valueAccessor, allBindings) {\r\n            var value = ko.utils.unwrapObservable(valueAccessor()) || {};\r\n            ko.utils.objectForEach(value, function(attrName, attrValue) {\r\n                attrValue = ko.utils.unwrapObservable(attrValue);\r\n\r\n                // Find the namespace of this attribute, if any.\r\n                var prefixLen = attrName.indexOf(':');\r\n                var namespace = \"lookupNamespaceURI\" in element && prefixLen > 0 && element.lookupNamespaceURI(attrName.substr(0, prefixLen));\r\n\r\n                // To cover cases like \"attr: { checked:someProp }\", we want to remove the attribute entirely\r\n                // when someProp is a \"no value\"-like value (strictly null, false, or undefined)\r\n                // (because the absence of the \"checked\" attr is how to mark an element as not checked, etc.)\r\n                var toRemove = (attrValue === false) || (attrValue === null) || (attrValue === undefined);\r\n                if (toRemove) {\r\n                    namespace ? element.removeAttributeNS(namespace, attrName) : element.removeAttribute(attrName);\r\n                } else {\r\n                    attrValue = attrValue.toString();\r\n                }\r\n\r\n                // In IE <= 7 and IE8 Quirks Mode, you have to use the JavaScript property name instead of the\r\n                // HTML attribute name for certain attributes. IE8 Standards Mode supports the correct behavior,\r\n                // but instead of figuring out the mode, we'll just set the attribute through the JavaScript\r\n                // property for IE <= 8.\r\n                if (ko.utils.ieVersion <= 8 && attrName in attrHtmlToJavaScriptMap) {\r\n                    attrName = attrHtmlToJavaScriptMap[attrName];\r\n                    if (toRemove)\r\n                        element.removeAttribute(attrName);\r\n                    else\r\n                        element[attrName] = attrValue;\r\n                } else if (!toRemove) {\r\n                    namespace ? element.setAttributeNS(namespace, attrName, attrValue) : element.setAttribute(attrName, attrValue);\r\n                }\r\n\r\n                // Treat \"name\" specially - although you can think of it as an attribute, it also needs\r\n                // special handling on older versions of IE (https://github.com/SteveSanderson/knockout/pull/333)\r\n                // Deliberately being case-sensitive here because XHTML would regard \"Name\" as a different thing\r\n                // entirely, and there's no strong reason to allow for such casing in HTML.\r\n                if (attrName === \"name\") {\r\n                    ko.utils.setElementName(element, toRemove ? \"\" : attrValue);\r\n                }\r\n            });\r\n        }\r\n    };\r\n    (function() {\r\n\r\n    ko.bindingHandlers['checked'] = {\r\n        'after': ['value', 'attr'],\r\n        'init': function (element, valueAccessor, allBindings) {\r\n            var checkedValue = ko.pureComputed(function() {\r\n                // Treat \"value\" like \"checkedValue\" when it is included with \"checked\" binding\r\n                if (allBindings['has']('checkedValue')) {\r\n                    return ko.utils.unwrapObservable(allBindings.get('checkedValue'));\r\n                } else if (useElementValue) {\r\n                    if (allBindings['has']('value')) {\r\n                        return ko.utils.unwrapObservable(allBindings.get('value'));\r\n                    } else {\r\n                        return element.value;\r\n                    }\r\n                }\r\n            });\r\n\r\n            function updateModel() {\r\n                // This updates the model value from the view value.\r\n                // It runs in response to DOM events (click) and changes in checkedValue.\r\n                var isChecked = element.checked,\r\n                    elemValue = checkedValue();\r\n\r\n                // When we're first setting up this computed, don't change any model state.\r\n                if (ko.computedContext.isInitial()) {\r\n                    return;\r\n                }\r\n\r\n                // We can ignore unchecked radio buttons, because some other radio\r\n                // button will be checked, and that one can take care of updating state.\r\n                // Also ignore value changes to an already unchecked checkbox.\r\n                if (!isChecked && (isRadio || ko.computedContext.getDependenciesCount())) {\r\n                    return;\r\n                }\r\n\r\n                var modelValue = ko.dependencyDetection.ignore(valueAccessor);\r\n                if (valueIsArray) {\r\n                    var writableValue = rawValueIsNonArrayObservable ? modelValue.peek() : modelValue,\r\n                        saveOldValue = oldElemValue;\r\n                    oldElemValue = elemValue;\r\n\r\n                    if (saveOldValue !== elemValue) {\r\n                        // When we're responding to the checkedValue changing, and the element is\r\n                        // currently checked, replace the old elem value with the new elem value\r\n                        // in the model array.\r\n                        if (isChecked) {\r\n                            ko.utils.addOrRemoveItem(writableValue, elemValue, true);\r\n                            ko.utils.addOrRemoveItem(writableValue, saveOldValue, false);\r\n                        }\r\n                    } else {\r\n                        // When we're responding to the user having checked/unchecked a checkbox,\r\n                        // add/remove the element value to the model array.\r\n                        ko.utils.addOrRemoveItem(writableValue, elemValue, isChecked);\r\n                    }\r\n\r\n                    if (rawValueIsNonArrayObservable && ko.isWriteableObservable(modelValue)) {\r\n                        modelValue(writableValue);\r\n                    }\r\n                } else {\r\n                    if (isCheckbox) {\r\n                        if (elemValue === undefined) {\r\n                            elemValue = isChecked;\r\n                        } else if (!isChecked) {\r\n                            elemValue = undefined;\r\n                        }\r\n                    }\r\n                    ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'checked', elemValue, true);\r\n                }\r\n            };\r\n\r\n            function updateView() {\r\n                // This updates the view value from the model value.\r\n                // It runs in response to changes in the bound (checked) value.\r\n                var modelValue = ko.utils.unwrapObservable(valueAccessor()),\r\n                    elemValue = checkedValue();\r\n\r\n                if (valueIsArray) {\r\n                    // When a checkbox is bound to an array, being checked represents its value being present in that array\r\n                    element.checked = ko.utils.arrayIndexOf(modelValue, elemValue) >= 0;\r\n                    oldElemValue = elemValue;\r\n                } else if (isCheckbox && elemValue === undefined) {\r\n                    // When a checkbox is bound to any other value (not an array) and \"checkedValue\" is not defined,\r\n                    // being checked represents the value being trueish\r\n                    element.checked = !!modelValue;\r\n                } else {\r\n                    // Otherwise, being checked means that the checkbox or radio button's value corresponds to the model value\r\n                    element.checked = (checkedValue() === modelValue);\r\n                }\r\n            };\r\n\r\n            var isCheckbox = element.type == \"checkbox\",\r\n                isRadio = element.type == \"radio\";\r\n\r\n            // Only bind to check boxes and radio buttons\r\n            if (!isCheckbox && !isRadio) {\r\n                return;\r\n            }\r\n\r\n            var rawValue = valueAccessor(),\r\n                valueIsArray = isCheckbox && (ko.utils.unwrapObservable(rawValue) instanceof Array),\r\n                rawValueIsNonArrayObservable = !(valueIsArray && rawValue.push && rawValue.splice),\r\n                useElementValue = isRadio || valueIsArray,\r\n                oldElemValue = valueIsArray ? checkedValue() : undefined;\r\n\r\n            // IE 6 won't allow radio buttons to be selected unless they have a name\r\n            if (isRadio && !element.name)\r\n                ko.bindingHandlers['uniqueName']['init'](element, function() { return true });\r\n\r\n            // Set up two computeds to update the binding:\r\n\r\n            // The first responds to changes in the checkedValue value and to element clicks\r\n            ko.computed(updateModel, null, { disposeWhenNodeIsRemoved: element });\r\n            ko.utils.registerEventHandler(element, \"click\", updateModel);\r\n\r\n            // The second responds to changes in the model value (the one associated with the checked binding)\r\n            ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\r\n\r\n            rawValue = undefined;\r\n        }\r\n    };\r\n    ko.expressionRewriting.twoWayBindings['checked'] = true;\r\n\r\n    ko.bindingHandlers['checkedValue'] = {\r\n        'update': function (element, valueAccessor) {\r\n            element.value = ko.utils.unwrapObservable(valueAccessor());\r\n        }\r\n    };\r\n\r\n    })();var classesWrittenByBindingKey = '__ko__cssValue';\r\n    ko.bindingHandlers['class'] = {\r\n        'update': function (element, valueAccessor) {\r\n            var value = ko.utils.stringTrim(ko.utils.unwrapObservable(valueAccessor()));\r\n            ko.utils.toggleDomNodeCssClass(element, element[classesWrittenByBindingKey], false);\r\n            element[classesWrittenByBindingKey] = value;\r\n            ko.utils.toggleDomNodeCssClass(element, value, true);\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers['css'] = {\r\n        'update': function (element, valueAccessor) {\r\n            var value = ko.utils.unwrapObservable(valueAccessor());\r\n            if (value !== null && typeof value == \"object\") {\r\n                ko.utils.objectForEach(value, function(className, shouldHaveClass) {\r\n                    shouldHaveClass = ko.utils.unwrapObservable(shouldHaveClass);\r\n                    ko.utils.toggleDomNodeCssClass(element, className, shouldHaveClass);\r\n                });\r\n            } else {\r\n                ko.bindingHandlers['class']['update'](element, valueAccessor);\r\n            }\r\n        }\r\n    };\r\n    ko.bindingHandlers['enable'] = {\r\n        'update': function (element, valueAccessor) {\r\n            var value = ko.utils.unwrapObservable(valueAccessor());\r\n            if (value && element.disabled)\r\n                element.removeAttribute(\"disabled\");\r\n            else if ((!value) && (!element.disabled))\r\n                element.disabled = true;\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers['disable'] = {\r\n        'update': function (element, valueAccessor) {\r\n            ko.bindingHandlers['enable']['update'](element, function() { return !ko.utils.unwrapObservable(valueAccessor()) });\r\n        }\r\n    };\r\n    // For certain common events (currently just 'click'), allow a simplified data-binding syntax\r\n    // e.g. click:handler instead of the usual full-length event:{click:handler}\r\n    function makeEventHandlerShortcut(eventName) {\r\n        ko.bindingHandlers[eventName] = {\r\n            'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                var newValueAccessor = function () {\r\n                    var result = {};\r\n                    result[eventName] = valueAccessor();\r\n                    return result;\r\n                };\r\n                return ko.bindingHandlers['event']['init'].call(this, element, newValueAccessor, allBindings, viewModel, bindingContext);\r\n            }\r\n        }\r\n    }\r\n\r\n    ko.bindingHandlers['event'] = {\r\n        'init' : function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var eventsToHandle = valueAccessor() || {};\r\n            ko.utils.objectForEach(eventsToHandle, function(eventName) {\r\n                if (typeof eventName == \"string\") {\r\n                    ko.utils.registerEventHandler(element, eventName, function (event) {\r\n                        var handlerReturnValue;\r\n                        var handlerFunction = valueAccessor()[eventName];\r\n                        if (!handlerFunction)\r\n                            return;\r\n\r\n                        try {\r\n                            // Take all the event args, and prefix with the viewmodel\r\n                            var argsForHandler = ko.utils.makeArray(arguments);\r\n                            viewModel = bindingContext['$data'];\r\n                            argsForHandler.unshift(viewModel);\r\n                            handlerReturnValue = handlerFunction.apply(viewModel, argsForHandler);\r\n                        } finally {\r\n                            if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\r\n                                if (event.preventDefault)\r\n                                    event.preventDefault();\r\n                                else\r\n                                    event.returnValue = false;\r\n                            }\r\n                        }\r\n\r\n                        var bubble = allBindings.get(eventName + 'Bubble') !== false;\r\n                        if (!bubble) {\r\n                            event.cancelBubble = true;\r\n                            if (event.stopPropagation)\r\n                                event.stopPropagation();\r\n                        }\r\n                    });\r\n                }\r\n            });\r\n        }\r\n    };\r\n    // \"foreach: someExpression\" is equivalent to \"template: { foreach: someExpression }\"\r\n    // \"foreach: { data: someExpression, afterAdd: myfn }\" is equivalent to \"template: { foreach: someExpression, afterAdd: myfn }\"\r\n    ko.bindingHandlers['foreach'] = {\r\n        makeTemplateValueAccessor: function(valueAccessor) {\r\n            return function() {\r\n                var modelValue = valueAccessor(),\r\n                    unwrappedValue = ko.utils.peekObservable(modelValue);    // Unwrap without setting a dependency here\r\n\r\n                // If unwrappedValue is the array, pass in the wrapped value on its own\r\n                // The value will be unwrapped and tracked within the template binding\r\n                // (See https://github.com/SteveSanderson/knockout/issues/523)\r\n                if ((!unwrappedValue) || typeof unwrappedValue.length == \"number\")\r\n                    return { 'foreach': modelValue, 'templateEngine': ko.nativeTemplateEngine.instance };\r\n\r\n                // If unwrappedValue.data is the array, preserve all relevant options and unwrap again value so we get updates\r\n                ko.utils.unwrapObservable(modelValue);\r\n                return {\r\n                    'foreach': unwrappedValue['data'],\r\n                    'as': unwrappedValue['as'],\r\n                    'noChildContext': unwrappedValue['noChildContext'],\r\n                    'includeDestroyed': unwrappedValue['includeDestroyed'],\r\n                    'afterAdd': unwrappedValue['afterAdd'],\r\n                    'beforeRemove': unwrappedValue['beforeRemove'],\r\n                    'afterRender': unwrappedValue['afterRender'],\r\n                    'beforeMove': unwrappedValue['beforeMove'],\r\n                    'afterMove': unwrappedValue['afterMove'],\r\n                    'templateEngine': ko.nativeTemplateEngine.instance\r\n                };\r\n            };\r\n        },\r\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            return ko.bindingHandlers['template']['init'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor));\r\n        },\r\n        'update': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            return ko.bindingHandlers['template']['update'](element, ko.bindingHandlers['foreach'].makeTemplateValueAccessor(valueAccessor), allBindings, viewModel, bindingContext);\r\n        }\r\n    };\r\n    ko.expressionRewriting.bindingRewriteValidators['foreach'] = false; // Can't rewrite control flow bindings\r\n    ko.virtualElements.allowedBindings['foreach'] = true;\r\n    var hasfocusUpdatingProperty = '__ko_hasfocusUpdating';\r\n    var hasfocusLastValue = '__ko_hasfocusLastValue';\r\n    ko.bindingHandlers['hasfocus'] = {\r\n        'init': function(element, valueAccessor, allBindings) {\r\n            var handleElementFocusChange = function(isFocused) {\r\n                // Where possible, ignore which event was raised and determine focus state using activeElement,\r\n                // as this avoids phantom focus/blur events raised when changing tabs in modern browsers.\r\n                // However, not all KO-targeted browsers (Firefox 2) support activeElement. For those browsers,\r\n                // prevent a loss of focus when changing tabs/windows by setting a flag that prevents hasfocus\r\n                // from calling 'blur()' on the element when it loses focus.\r\n                // Discussion at https://github.com/SteveSanderson/knockout/pull/352\r\n                element[hasfocusUpdatingProperty] = true;\r\n                var ownerDoc = element.ownerDocument;\r\n                if (\"activeElement\" in ownerDoc) {\r\n                    var active;\r\n                    try {\r\n                        active = ownerDoc.activeElement;\r\n                    } catch(e) {\r\n                        // IE9 throws if you access activeElement during page load (see issue #703)\r\n                        active = ownerDoc.body;\r\n                    }\r\n                    isFocused = (active === element);\r\n                }\r\n                var modelValue = valueAccessor();\r\n                ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'hasfocus', isFocused, true);\r\n\r\n                //cache the latest value, so we can avoid unnecessarily calling focus/blur in the update function\r\n                element[hasfocusLastValue] = isFocused;\r\n                element[hasfocusUpdatingProperty] = false;\r\n            };\r\n            var handleElementFocusIn = handleElementFocusChange.bind(null, true);\r\n            var handleElementFocusOut = handleElementFocusChange.bind(null, false);\r\n\r\n            ko.utils.registerEventHandler(element, \"focus\", handleElementFocusIn);\r\n            ko.utils.registerEventHandler(element, \"focusin\", handleElementFocusIn); // For IE\r\n            ko.utils.registerEventHandler(element, \"blur\",  handleElementFocusOut);\r\n            ko.utils.registerEventHandler(element, \"focusout\",  handleElementFocusOut); // For IE\r\n\r\n            // Assume element is not focused (prevents \"blur\" being called initially)\r\n            element[hasfocusLastValue] = false;\r\n        },\r\n        'update': function(element, valueAccessor) {\r\n            var value = !!ko.utils.unwrapObservable(valueAccessor());\r\n\r\n            if (!element[hasfocusUpdatingProperty] && element[hasfocusLastValue] !== value) {\r\n                value ? element.focus() : element.blur();\r\n\r\n                // In IE, the blur method doesn't always cause the element to lose focus (for example, if the window is not in focus).\r\n                // Setting focus to the body element does seem to be reliable in IE, but should only be used if we know that the current\r\n                // element was focused already.\r\n                if (!value && element[hasfocusLastValue]) {\r\n                    element.ownerDocument.body.focus();\r\n                }\r\n\r\n                // For IE, which doesn't reliably fire \"focus\" or \"blur\" events synchronously\r\n                ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, value ? \"focusin\" : \"focusout\"]);\r\n            }\r\n        }\r\n    };\r\n    ko.expressionRewriting.twoWayBindings['hasfocus'] = true;\r\n\r\n    ko.bindingHandlers['hasFocus'] = ko.bindingHandlers['hasfocus']; // Make \"hasFocus\" an alias\r\n    ko.expressionRewriting.twoWayBindings['hasFocus'] = 'hasfocus';\r\n    ko.bindingHandlers['html'] = {\r\n        'init': function() {\r\n            // Prevent binding on the dynamically-injected HTML (as developers are unlikely to expect that, and it has security implications)\r\n            return { 'controlsDescendantBindings': true };\r\n        },\r\n        'update': function (element, valueAccessor) {\r\n            // setHtml will unwrap the value if needed\r\n            ko.utils.setHtml(element, valueAccessor());\r\n        }\r\n    };\r\n    (function () {\r\n\r\n    // Makes a binding like with or if\r\n    function makeWithIfBinding(bindingKey, isWith, isNot) {\r\n        ko.bindingHandlers[bindingKey] = {\r\n            'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                var savedNodes, wrapCondition = true, withOptions, ifCondition, completeOnRender, needAsyncContext;\r\n\r\n                if (isWith) {\r\n                    var as = allBindings.get('as'), noChildContext = allBindings.get('noChildContext');\r\n                    wrapCondition = as && noChildContext;\r\n                    withOptions = { 'as': as, 'noChildContext': noChildContext };\r\n                }\r\n\r\n                if (wrapCondition) {\r\n                    ifCondition = ko.computed(function() {\r\n                        return !isNot !== !ko.utils.unwrapObservable(valueAccessor());\r\n                    }, null, { disposeWhenNodeIsRemoved: element });\r\n                }\r\n\r\n                completeOnRender = allBindings.get(\"completeOn\") == \"render\";\r\n                needAsyncContext = completeOnRender || allBindings['has'](ko.bindingEvent.descendantsComplete);\r\n\r\n                ko.computed(function() {\r\n                    var value = wrapCondition ? ifCondition() : ko.utils.unwrapObservable(valueAccessor()),\r\n                        shouldDisplay = !!value,\r\n                        isFirstRender = !savedNodes;\r\n\r\n                    // Save a copy of the inner nodes on the initial update, but only if we have dependencies.\r\n                    if (isFirstRender && ko.computedContext.getDependenciesCount()) {\r\n                        savedNodes = ko.utils.cloneNodes(ko.virtualElements.childNodes(element), true /* shouldCleanNodes */);\r\n                    }\r\n\r\n                    if (needAsyncContext) {\r\n                        bindingContext = ko.bindingEvent.startPossiblyAsyncContentBinding(element, bindingContext);\r\n                    }\r\n\r\n                    if (shouldDisplay) {\r\n                        if (!isFirstRender) {\r\n                            ko.virtualElements.setDomNodeChildren(element, ko.utils.cloneNodes(savedNodes));\r\n                        }\r\n\r\n                        var childContext;\r\n                        if (isWith) {\r\n                            childContext = bindingContext['createChildContext'](typeof value == \"function\" ? value : valueAccessor, withOptions);\r\n                        } else if (ifCondition.isActive()) {\r\n                            childContext = bindingContext['extend'](function() { ifCondition(); return null; });\r\n                        } else {\r\n                            childContext = bindingContext;\r\n                        }\r\n\r\n                        ko.applyBindingsToDescendants(childContext, element);\r\n                    } else {\r\n                        ko.virtualElements.emptyNode(element);\r\n\r\n                        if (!completeOnRender) {\r\n                            ko.bindingEvent.notify(element, ko.bindingEvent.childrenComplete);\r\n                        }\r\n                    }\r\n                }, null, { disposeWhenNodeIsRemoved: element });\r\n\r\n                return { 'controlsDescendantBindings': true };\r\n            }\r\n        };\r\n        ko.expressionRewriting.bindingRewriteValidators[bindingKey] = false; // Can't rewrite control flow bindings\r\n        ko.virtualElements.allowedBindings[bindingKey] = true;\r\n    }\r\n\r\n    // Construct the actual binding handlers\r\n    makeWithIfBinding('if');\r\n    makeWithIfBinding('ifnot', false /* isWith */, true /* isNot */);\r\n    makeWithIfBinding('with', true /* isWith */);\r\n\r\n    })();ko.bindingHandlers['let'] = {\r\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            // Make a modified binding context, with extra properties, and apply it to descendant elements\r\n            var innerContext = bindingContext['extend'](valueAccessor);\r\n            ko.applyBindingsToDescendants(innerContext, element);\r\n\r\n            return { 'controlsDescendantBindings': true };\r\n        }\r\n    };\r\n    ko.virtualElements.allowedBindings['let'] = true;\r\n    var captionPlaceholder = {};\r\n    ko.bindingHandlers['options'] = {\r\n        'init': function(element) {\r\n            if (ko.utils.tagNameLower(element) !== \"select\")\r\n                throw new Error(\"options binding applies only to SELECT elements\");\r\n\r\n            // Remove all existing <option>s.\r\n            while (element.length > 0) {\r\n                element.remove(0);\r\n            }\r\n\r\n            // Ensures that the binding processor doesn't try to bind the options\r\n            return { 'controlsDescendantBindings': true };\r\n        },\r\n        'update': function (element, valueAccessor, allBindings) {\r\n            function selectedOptions() {\r\n                return ko.utils.arrayFilter(element.options, function (node) { return node.selected; });\r\n            }\r\n\r\n            var selectWasPreviouslyEmpty = element.length == 0,\r\n                multiple = element.multiple,\r\n                previousScrollTop = (!selectWasPreviouslyEmpty && multiple) ? element.scrollTop : null,\r\n                unwrappedArray = ko.utils.unwrapObservable(valueAccessor()),\r\n                valueAllowUnset = allBindings.get('valueAllowUnset') && allBindings['has']('value'),\r\n                includeDestroyed = allBindings.get('optionsIncludeDestroyed'),\r\n                arrayToDomNodeChildrenOptions = {},\r\n                captionValue,\r\n                filteredArray,\r\n                previousSelectedValues = [];\r\n\r\n            if (!valueAllowUnset) {\r\n                if (multiple) {\r\n                    previousSelectedValues = ko.utils.arrayMap(selectedOptions(), ko.selectExtensions.readValue);\r\n                } else if (element.selectedIndex >= 0) {\r\n                    previousSelectedValues.push(ko.selectExtensions.readValue(element.options[element.selectedIndex]));\r\n                }\r\n            }\r\n\r\n            if (unwrappedArray) {\r\n                if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\r\n                    unwrappedArray = [unwrappedArray];\r\n\r\n                // Filter out any entries marked as destroyed\r\n                filteredArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\r\n                    return includeDestroyed || item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\r\n                });\r\n\r\n                // If caption is included, add it to the array\r\n                if (allBindings['has']('optionsCaption')) {\r\n                    captionValue = ko.utils.unwrapObservable(allBindings.get('optionsCaption'));\r\n                    // If caption value is null or undefined, don't show a caption\r\n                    if (captionValue !== null && captionValue !== undefined) {\r\n                        filteredArray.unshift(captionPlaceholder);\r\n                    }\r\n                }\r\n            } else {\r\n                // If a falsy value is provided (e.g. null), we'll simply empty the select element\r\n            }\r\n\r\n            function applyToObject(object, predicate, defaultValue) {\r\n                var predicateType = typeof predicate;\r\n                if (predicateType == \"function\")    // Given a function; run it against the data value\r\n                    return predicate(object);\r\n                else if (predicateType == \"string\") // Given a string; treat it as a property name on the data value\r\n                    return object[predicate];\r\n                else                                // Given no optionsText arg; use the data value itself\r\n                    return defaultValue;\r\n            }\r\n\r\n            // The following functions can run at two different times:\r\n            // The first is when the whole array is being updated directly from this binding handler.\r\n            // The second is when an observable value for a specific array entry is updated.\r\n            // oldOptions will be empty in the first case, but will be filled with the previously generated option in the second.\r\n            var itemUpdate = false;\r\n            function optionForArrayItem(arrayEntry, index, oldOptions) {\r\n                if (oldOptions.length) {\r\n                    previousSelectedValues = !valueAllowUnset && oldOptions[0].selected ? [ ko.selectExtensions.readValue(oldOptions[0]) ] : [];\r\n                    itemUpdate = true;\r\n                }\r\n                var option = element.ownerDocument.createElement(\"option\");\r\n                if (arrayEntry === captionPlaceholder) {\r\n                    ko.utils.setTextContent(option, allBindings.get('optionsCaption'));\r\n                    ko.selectExtensions.writeValue(option, undefined);\r\n                } else {\r\n                    // Apply a value to the option element\r\n                    var optionValue = applyToObject(arrayEntry, allBindings.get('optionsValue'), arrayEntry);\r\n                    ko.selectExtensions.writeValue(option, ko.utils.unwrapObservable(optionValue));\r\n\r\n                    // Apply some text to the option element\r\n                    var optionText = applyToObject(arrayEntry, allBindings.get('optionsText'), optionValue);\r\n                    ko.utils.setTextContent(option, optionText);\r\n                }\r\n                return [option];\r\n            }\r\n\r\n            // By using a beforeRemove callback, we delay the removal until after new items are added. This fixes a selection\r\n            // problem in IE<=8 and Firefox. See https://github.com/knockout/knockout/issues/1208\r\n            arrayToDomNodeChildrenOptions['beforeRemove'] =\r\n                function (option) {\r\n                    element.removeChild(option);\r\n                };\r\n\r\n            function setSelectionCallback(arrayEntry, newOptions) {\r\n                if (itemUpdate && valueAllowUnset) {\r\n                    // The model value is authoritative, so make sure its value is the one selected\r\n                    // There is no need to use dependencyDetection.ignore since setDomNodeChildrenFromArrayMapping does so already.\r\n                    ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\r\n                } else if (previousSelectedValues.length) {\r\n                    // IE6 doesn't like us to assign selection to OPTION nodes before they're added to the document.\r\n                    // That's why we first added them without selection. Now it's time to set the selection.\r\n                    var isSelected = ko.utils.arrayIndexOf(previousSelectedValues, ko.selectExtensions.readValue(newOptions[0])) >= 0;\r\n                    ko.utils.setOptionNodeSelectionState(newOptions[0], isSelected);\r\n\r\n                    // If this option was changed from being selected during a single-item update, notify the change\r\n                    if (itemUpdate && !isSelected) {\r\n                        ko.dependencyDetection.ignore(ko.utils.triggerEvent, null, [element, \"change\"]);\r\n                    }\r\n                }\r\n            }\r\n\r\n            var callback = setSelectionCallback;\r\n            if (allBindings['has']('optionsAfterRender') && typeof allBindings.get('optionsAfterRender') == \"function\") {\r\n                callback = function(arrayEntry, newOptions) {\r\n                    setSelectionCallback(arrayEntry, newOptions);\r\n                    ko.dependencyDetection.ignore(allBindings.get('optionsAfterRender'), null, [newOptions[0], arrayEntry !== captionPlaceholder ? arrayEntry : undefined]);\r\n                }\r\n            }\r\n\r\n            ko.utils.setDomNodeChildrenFromArrayMapping(element, filteredArray, optionForArrayItem, arrayToDomNodeChildrenOptions, callback);\r\n\r\n            ko.dependencyDetection.ignore(function () {\r\n                if (valueAllowUnset) {\r\n                    // The model value is authoritative, so make sure its value is the one selected\r\n                    ko.selectExtensions.writeValue(element, ko.utils.unwrapObservable(allBindings.get('value')), true /* allowUnset */);\r\n                } else {\r\n                    // Determine if the selection has changed as a result of updating the options list\r\n                    var selectionChanged;\r\n                    if (multiple) {\r\n                        // For a multiple-select box, compare the new selection count to the previous one\r\n                        // But if nothing was selected before, the selection can't have changed\r\n                        selectionChanged = previousSelectedValues.length && selectedOptions().length < previousSelectedValues.length;\r\n                    } else {\r\n                        // For a single-select box, compare the current value to the previous value\r\n                        // But if nothing was selected before or nothing is selected now, just look for a change in selection\r\n                        selectionChanged = (previousSelectedValues.length && element.selectedIndex >= 0)\r\n                            ? (ko.selectExtensions.readValue(element.options[element.selectedIndex]) !== previousSelectedValues[0])\r\n                            : (previousSelectedValues.length || element.selectedIndex >= 0);\r\n                    }\r\n\r\n                    // Ensure consistency between model value and selected option.\r\n                    // If the dropdown was changed so that selection is no longer the same,\r\n                    // notify the value or selectedOptions binding.\r\n                    if (selectionChanged) {\r\n                        ko.utils.triggerEvent(element, \"change\");\r\n                    }\r\n                }\r\n            });\r\n\r\n            // Workaround for IE bug\r\n            ko.utils.ensureSelectElementIsRenderedCorrectly(element);\r\n\r\n            if (previousScrollTop && Math.abs(previousScrollTop - element.scrollTop) > 20)\r\n                element.scrollTop = previousScrollTop;\r\n        }\r\n    };\r\n    ko.bindingHandlers['options'].optionValueDomDataKey = ko.utils.domData.nextKey();\r\n    ko.bindingHandlers['selectedOptions'] = {\r\n        'after': ['options', 'foreach'],\r\n        'init': function (element, valueAccessor, allBindings) {\r\n            ko.utils.registerEventHandler(element, \"change\", function () {\r\n                var value = valueAccessor(), valueToWrite = [];\r\n                ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\r\n                    if (node.selected)\r\n                        valueToWrite.push(ko.selectExtensions.readValue(node));\r\n                });\r\n                ko.expressionRewriting.writeValueToProperty(value, allBindings, 'selectedOptions', valueToWrite);\r\n            });\r\n        },\r\n        'update': function (element, valueAccessor) {\r\n            if (ko.utils.tagNameLower(element) != \"select\")\r\n                throw new Error(\"values binding applies only to SELECT elements\");\r\n\r\n            var newValue = ko.utils.unwrapObservable(valueAccessor()),\r\n                previousScrollTop = element.scrollTop;\r\n\r\n            if (newValue && typeof newValue.length == \"number\") {\r\n                ko.utils.arrayForEach(element.getElementsByTagName(\"option\"), function(node) {\r\n                    var isSelected = ko.utils.arrayIndexOf(newValue, ko.selectExtensions.readValue(node)) >= 0;\r\n                    if (node.selected != isSelected) {      // This check prevents flashing of the select element in IE\r\n                        ko.utils.setOptionNodeSelectionState(node, isSelected);\r\n                    }\r\n                });\r\n            }\r\n\r\n            element.scrollTop = previousScrollTop;\r\n        }\r\n    };\r\n    ko.expressionRewriting.twoWayBindings['selectedOptions'] = true;\r\n    ko.bindingHandlers['style'] = {\r\n        'update': function (element, valueAccessor) {\r\n            var value = ko.utils.unwrapObservable(valueAccessor() || {});\r\n            ko.utils.objectForEach(value, function(styleName, styleValue) {\r\n                styleValue = ko.utils.unwrapObservable(styleValue);\r\n\r\n                if (styleValue === null || styleValue === undefined || styleValue === false) {\r\n                    // Empty string removes the value, whereas null/undefined have no effect\r\n                    styleValue = \"\";\r\n                }\r\n\r\n                if (jQueryInstance) {\r\n                    jQueryInstance(element)['css'](styleName, styleValue);\r\n                } else if (/^--/.test(styleName)) {\r\n                    // Is styleName a custom CSS property?\r\n                    element.style.setProperty(styleName, styleValue);\r\n                } else {\r\n                    styleName = styleName.replace(/-(\\w)/g, function (all, letter) {\r\n                        return letter.toUpperCase();\r\n                    });\r\n\r\n                    var previousStyle = element.style[styleName];\r\n                    element.style[styleName] = styleValue;\r\n\r\n                    if (styleValue !== previousStyle && element.style[styleName] == previousStyle && !isNaN(styleValue)) {\r\n                        element.style[styleName] = styleValue + \"px\";\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    ko.bindingHandlers['submit'] = {\r\n        'init': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            if (typeof valueAccessor() != \"function\")\r\n                throw new Error(\"The value for a submit binding must be a function\");\r\n            ko.utils.registerEventHandler(element, \"submit\", function (event) {\r\n                var handlerReturnValue;\r\n                var value = valueAccessor();\r\n                try { handlerReturnValue = value.call(bindingContext['$data'], element); }\r\n                finally {\r\n                    if (handlerReturnValue !== true) { // Normally we want to prevent default action. Developer can override this be explicitly returning true.\r\n                        if (event.preventDefault)\r\n                            event.preventDefault();\r\n                        else\r\n                            event.returnValue = false;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    };\r\n    ko.bindingHandlers['text'] = {\r\n        'init': function() {\r\n            // Prevent binding on the dynamically-injected text node (as developers are unlikely to expect that, and it has security implications).\r\n            // It should also make things faster, as we no longer have to consider whether the text node might be bindable.\r\n            return { 'controlsDescendantBindings': true };\r\n        },\r\n        'update': function (element, valueAccessor) {\r\n            ko.utils.setTextContent(element, valueAccessor());\r\n        }\r\n    };\r\n    ko.virtualElements.allowedBindings['text'] = true;\r\n    (function () {\r\n\r\n    if (window && window.navigator) {\r\n        var parseVersion = function (matches) {\r\n            if (matches) {\r\n                return parseFloat(matches[1]);\r\n            }\r\n        };\r\n\r\n        // Detect various browser versions because some old versions don't fully support the 'input' event\r\n        var userAgent = window.navigator.userAgent,\r\n            operaVersion, chromeVersion, safariVersion, firefoxVersion, ieVersion, edgeVersion;\r\n\r\n        (operaVersion = window.opera && window.opera.version && parseInt(window.opera.version()))\r\n            || (edgeVersion = parseVersion(userAgent.match(/Edge\\/([^ ]+)$/)))\r\n            || (chromeVersion = parseVersion(userAgent.match(/Chrome\\/([^ ]+)/)))\r\n            || (safariVersion = parseVersion(userAgent.match(/Version\\/([^ ]+) Safari/)))\r\n            || (firefoxVersion = parseVersion(userAgent.match(/Firefox\\/([^ ]+)/)))\r\n            || (ieVersion = ko.utils.ieVersion || parseVersion(userAgent.match(/MSIE ([^ ]+)/)))      // Detects up to IE 10\r\n            || (ieVersion = parseVersion(userAgent.match(/rv:([^ )]+)/)));      // Detects IE 11\r\n    }\r\n\r\n    // IE 8 and 9 have bugs that prevent the normal events from firing when the value changes.\r\n    // But it does fire the 'selectionchange' event on many of those, presumably because the\r\n    // cursor is moving and that counts as the selection changing. The 'selectionchange' event is\r\n    // fired at the document level only and doesn't directly indicate which element changed. We\r\n    // set up just one event handler for the document and use 'activeElement' to determine which\r\n    // element was changed.\r\n    if (ieVersion >= 8 && ieVersion < 10) {\r\n        var selectionChangeRegisteredName = ko.utils.domData.nextKey(),\r\n            selectionChangeHandlerName = ko.utils.domData.nextKey();\r\n        var selectionChangeHandler = function(event) {\r\n            var target = this.activeElement,\r\n                handler = target && ko.utils.domData.get(target, selectionChangeHandlerName);\r\n            if (handler) {\r\n                handler(event);\r\n            }\r\n        };\r\n        var registerForSelectionChangeEvent = function (element, handler) {\r\n            var ownerDoc = element.ownerDocument;\r\n            if (!ko.utils.domData.get(ownerDoc, selectionChangeRegisteredName)) {\r\n                ko.utils.domData.set(ownerDoc, selectionChangeRegisteredName, true);\r\n                ko.utils.registerEventHandler(ownerDoc, 'selectionchange', selectionChangeHandler);\r\n            }\r\n            ko.utils.domData.set(element, selectionChangeHandlerName, handler);\r\n        };\r\n    }\r\n\r\n    ko.bindingHandlers['textInput'] = {\r\n        'init': function (element, valueAccessor, allBindings) {\r\n\r\n            var previousElementValue = element.value,\r\n                timeoutHandle,\r\n                elementValueBeforeEvent;\r\n\r\n            var updateModel = function (event) {\r\n                clearTimeout(timeoutHandle);\r\n                elementValueBeforeEvent = timeoutHandle = undefined;\r\n\r\n                var elementValue = element.value;\r\n                if (previousElementValue !== elementValue) {\r\n                    // Provide a way for tests to know exactly which event was processed\r\n                    if (DEBUG && event) element['_ko_textInputProcessedEvent'] = event.type;\r\n                    previousElementValue = elementValue;\r\n                    ko.expressionRewriting.writeValueToProperty(valueAccessor(), allBindings, 'textInput', elementValue);\r\n                }\r\n            };\r\n\r\n            var deferUpdateModel = function (event) {\r\n                if (!timeoutHandle) {\r\n                    // The elementValueBeforeEvent variable is set *only* during the brief gap between an\r\n                    // event firing and the updateModel function running. This allows us to ignore model\r\n                    // updates that are from the previous state of the element, usually due to techniques\r\n                    // such as rateLimit. Such updates, if not ignored, can cause keystrokes to be lost.\r\n                    elementValueBeforeEvent = element.value;\r\n                    var handler = DEBUG ? updateModel.bind(element, {type: event.type}) : updateModel;\r\n                    timeoutHandle = ko.utils.setTimeout(handler, 4);\r\n                }\r\n            };\r\n\r\n            // IE9 will mess up the DOM if you handle events synchronously which results in DOM changes (such as other bindings);\r\n            // so we'll make sure all updates are asynchronous\r\n            var ieUpdateModel = ko.utils.ieVersion == 9 ? deferUpdateModel : updateModel,\r\n                ourUpdate = false;\r\n\r\n            var updateView = function () {\r\n                var modelValue = ko.utils.unwrapObservable(valueAccessor());\r\n\r\n                if (modelValue === null || modelValue === undefined) {\r\n                    modelValue = '';\r\n                }\r\n\r\n                if (elementValueBeforeEvent !== undefined && modelValue === elementValueBeforeEvent) {\r\n                    ko.utils.setTimeout(updateView, 4);\r\n                    return;\r\n                }\r\n\r\n                // Update the element only if the element and model are different. On some browsers, updating the value\r\n                // will move the cursor to the end of the input, which would be bad while the user is typing.\r\n                if (element.value !== modelValue) {\r\n                    ourUpdate = true;  // Make sure we ignore events (propertychange) that result from updating the value\r\n                    element.value = modelValue;\r\n                    ourUpdate = false;\r\n                    previousElementValue = element.value; // In case the browser changes the value (see #2281)\r\n                }\r\n            };\r\n\r\n            var onEvent = function (event, handler) {\r\n                ko.utils.registerEventHandler(element, event, handler);\r\n            };\r\n\r\n            if (DEBUG && ko.bindingHandlers['textInput']['_forceUpdateOn']) {\r\n                // Provide a way for tests to specify exactly which events are bound\r\n                ko.utils.arrayForEach(ko.bindingHandlers['textInput']['_forceUpdateOn'], function(eventName) {\r\n                    if (eventName.slice(0,5) == 'after') {\r\n                        onEvent(eventName.slice(5), deferUpdateModel);\r\n                    } else {\r\n                        onEvent(eventName, updateModel);\r\n                    }\r\n                });\r\n            } else {\r\n                if (ieVersion) {\r\n                    // All versions (including 11) of Internet Explorer have a bug that they don't generate an input or propertychange event when ESC is pressed\r\n                    onEvent('keypress', updateModel);\r\n                }\r\n                if (ieVersion < 11) {\r\n                    // Internet Explorer <= 8 doesn't support the 'input' event, but does include 'propertychange' that fires whenever\r\n                    // any property of an element changes. Unlike 'input', it also fires if a property is changed from JavaScript code,\r\n                    // but that's an acceptable compromise for this binding. IE 9 and 10 support 'input', but since they don't always\r\n                    // fire it when using autocomplete, we'll use 'propertychange' for them also.\r\n                    onEvent('propertychange', function(event) {\r\n                        if (!ourUpdate && event.propertyName === 'value') {\r\n                            ieUpdateModel(event);\r\n                        }\r\n                    });\r\n                }\r\n                if (ieVersion == 8) {\r\n                    // IE 8 has a bug where it fails to fire 'propertychange' on the first update following a value change from\r\n                    // JavaScript code. It also doesn't fire if you clear the entire value. To fix this, we bind to the following\r\n                    // events too.\r\n                    onEvent('keyup', updateModel);      // A single keystoke\r\n                    onEvent('keydown', updateModel);    // The first character when a key is held down\r\n                }\r\n                if (registerForSelectionChangeEvent) {\r\n                    // Internet Explorer 9 doesn't fire the 'input' event when deleting text, including using\r\n                    // the backspace, delete, or ctrl-x keys, clicking the 'x' to clear the input, dragging text\r\n                    // out of the field, and cutting or deleting text using the context menu. 'selectionchange'\r\n                    // can detect all of those except dragging text out of the field, for which we use 'dragend'.\r\n                    // These are also needed in IE8 because of the bug described above.\r\n                    registerForSelectionChangeEvent(element, ieUpdateModel);  // 'selectionchange' covers cut, paste, drop, delete, etc.\r\n                    onEvent('dragend', deferUpdateModel);\r\n                }\r\n\r\n                if (!ieVersion || ieVersion >= 9) {\r\n                    // All other supported browsers support the 'input' event, which fires whenever the content of the element is changed\r\n                    // through the user interface.\r\n                    onEvent('input', ieUpdateModel);\r\n                }\r\n\r\n                if (safariVersion < 5 && ko.utils.tagNameLower(element) === \"textarea\") {\r\n                    // Safari <5 doesn't fire the 'input' event for <textarea> elements (it does fire 'textInput'\r\n                    // but only when typing). So we'll just catch as much as we can with keydown, cut, and paste.\r\n                    onEvent('keydown', deferUpdateModel);\r\n                    onEvent('paste', deferUpdateModel);\r\n                    onEvent('cut', deferUpdateModel);\r\n                } else if (operaVersion < 11) {\r\n                    // Opera 10 doesn't always fire the 'input' event for cut, paste, undo & drop operations.\r\n                    // We can try to catch some of those using 'keydown'.\r\n                    onEvent('keydown', deferUpdateModel);\r\n                } else if (firefoxVersion < 4.0) {\r\n                    // Firefox <= 3.6 doesn't fire the 'input' event when text is filled in through autocomplete\r\n                    onEvent('DOMAutoComplete', updateModel);\r\n\r\n                    // Firefox <=3.5 doesn't fire the 'input' event when text is dropped into the input.\r\n                    onEvent('dragdrop', updateModel);       // <3.5\r\n                    onEvent('drop', updateModel);           // 3.5\r\n                } else if (edgeVersion && element.type === \"number\") {\r\n                    // Microsoft Edge doesn't fire 'input' or 'change' events for number inputs when\r\n                    // the value is changed via the up / down arrow keys\r\n                    onEvent('keydown', deferUpdateModel);\r\n                }\r\n            }\r\n\r\n            // Bind to the change event so that we can catch programmatic updates of the value that fire this event.\r\n            onEvent('change', updateModel);\r\n\r\n            // To deal with browsers that don't notify any kind of event for some changes (IE, Safari, etc.)\r\n            onEvent('blur', updateModel);\r\n\r\n            ko.computed(updateView, null, { disposeWhenNodeIsRemoved: element });\r\n        }\r\n    };\r\n    ko.expressionRewriting.twoWayBindings['textInput'] = true;\r\n\r\n    // textinput is an alias for textInput\r\n    ko.bindingHandlers['textinput'] = {\r\n        // preprocess is the only way to set up a full alias\r\n        'preprocess': function (value, name, addBinding) {\r\n            addBinding('textInput', value);\r\n        }\r\n    };\r\n\r\n    })();ko.bindingHandlers['uniqueName'] = {\r\n        'init': function (element, valueAccessor) {\r\n            if (valueAccessor()) {\r\n                var name = \"ko_unique_\" + (++ko.bindingHandlers['uniqueName'].currentIndex);\r\n                ko.utils.setElementName(element, name);\r\n            }\r\n        }\r\n    };\r\n    ko.bindingHandlers['uniqueName'].currentIndex = 0;\r\n    ko.bindingHandlers['using'] = {\r\n        'init': function(element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n            var innerContext = bindingContext['createChildContext'](valueAccessor);\r\n            ko.applyBindingsToDescendants(innerContext, element);\r\n\r\n            return { 'controlsDescendantBindings': true };\r\n        }\r\n    };\r\n    ko.virtualElements.allowedBindings['using'] = true;\r\n    ko.bindingHandlers['value'] = {\r\n        'after': ['options', 'foreach'],\r\n        'init': function (element, valueAccessor, allBindings) {\r\n            var tagName = ko.utils.tagNameLower(element),\r\n                isInputElement = tagName == \"input\";\r\n\r\n            // If the value binding is placed on a radio/checkbox, then just pass through to checkedValue and quit\r\n            if (isInputElement && (element.type == \"checkbox\" || element.type == \"radio\")) {\r\n                ko.applyBindingAccessorsToNode(element, { 'checkedValue': valueAccessor });\r\n                return;\r\n            }\r\n\r\n            // Always catch \"change\" event; possibly other events too if asked\r\n            var eventsToCatch = [\"change\"];\r\n            var requestedEventsToCatch = allBindings.get(\"valueUpdate\");\r\n            var propertyChangedFired = false;\r\n            var elementValueBeforeEvent = null;\r\n\r\n            if (requestedEventsToCatch) {\r\n                if (typeof requestedEventsToCatch == \"string\") // Allow both individual event names, and arrays of event names\r\n                    requestedEventsToCatch = [requestedEventsToCatch];\r\n                ko.utils.arrayPushAll(eventsToCatch, requestedEventsToCatch);\r\n                eventsToCatch = ko.utils.arrayGetDistinctValues(eventsToCatch);\r\n            }\r\n\r\n            var valueUpdateHandler = function() {\r\n                elementValueBeforeEvent = null;\r\n                propertyChangedFired = false;\r\n                var modelValue = valueAccessor();\r\n                var elementValue = ko.selectExtensions.readValue(element);\r\n                ko.expressionRewriting.writeValueToProperty(modelValue, allBindings, 'value', elementValue);\r\n            }\r\n\r\n            // Workaround for https://github.com/SteveSanderson/knockout/issues/122\r\n            // IE doesn't fire \"change\" events on textboxes if the user selects a value from its autocomplete list\r\n            var ieAutoCompleteHackNeeded = ko.utils.ieVersion && isInputElement && element.type == \"text\"\r\n                                           && element.autocomplete != \"off\" && (!element.form || element.form.autocomplete != \"off\");\r\n            if (ieAutoCompleteHackNeeded && ko.utils.arrayIndexOf(eventsToCatch, \"propertychange\") == -1) {\r\n                ko.utils.registerEventHandler(element, \"propertychange\", function () { propertyChangedFired = true });\r\n                ko.utils.registerEventHandler(element, \"focus\", function () { propertyChangedFired = false });\r\n                ko.utils.registerEventHandler(element, \"blur\", function() {\r\n                    if (propertyChangedFired) {\r\n                        valueUpdateHandler();\r\n                    }\r\n                });\r\n            }\r\n\r\n            ko.utils.arrayForEach(eventsToCatch, function(eventName) {\r\n                // The syntax \"after<eventname>\" means \"run the handler asynchronously after the event\"\r\n                // This is useful, for example, to catch \"keydown\" events after the browser has updated the control\r\n                // (otherwise, ko.selectExtensions.readValue(this) will receive the control's value *before* the key event)\r\n                var handler = valueUpdateHandler;\r\n                if (ko.utils.stringStartsWith(eventName, \"after\")) {\r\n                    handler = function() {\r\n                        // The elementValueBeforeEvent variable is non-null *only* during the brief gap between\r\n                        // a keyX event firing and the valueUpdateHandler running, which is scheduled to happen\r\n                        // at the earliest asynchronous opportunity. We store this temporary information so that\r\n                        // if, between keyX and valueUpdateHandler, the underlying model value changes separately,\r\n                        // we can overwrite that model value change with the value the user just typed. Otherwise,\r\n                        // techniques like rateLimit can trigger model changes at critical moments that will\r\n                        // override the user's inputs, causing keystrokes to be lost.\r\n                        elementValueBeforeEvent = ko.selectExtensions.readValue(element);\r\n                        ko.utils.setTimeout(valueUpdateHandler, 0);\r\n                    };\r\n                    eventName = eventName.substring(\"after\".length);\r\n                }\r\n                ko.utils.registerEventHandler(element, eventName, handler);\r\n            });\r\n\r\n            var updateFromModel;\r\n\r\n            if (isInputElement && element.type == \"file\") {\r\n                // For file input elements, can only write the empty string\r\n                updateFromModel = function () {\r\n                    var newValue = ko.utils.unwrapObservable(valueAccessor());\r\n                    if (newValue === null || newValue === undefined || newValue === \"\") {\r\n                        element.value = \"\";\r\n                    } else {\r\n                        ko.dependencyDetection.ignore(valueUpdateHandler);  // reset the model to match the element\r\n                    }\r\n                }\r\n            } else {\r\n                updateFromModel = function () {\r\n                    var newValue = ko.utils.unwrapObservable(valueAccessor());\r\n                    var elementValue = ko.selectExtensions.readValue(element);\r\n\r\n                    if (elementValueBeforeEvent !== null && newValue === elementValueBeforeEvent) {\r\n                        ko.utils.setTimeout(updateFromModel, 0);\r\n                        return;\r\n                    }\r\n\r\n                    var valueHasChanged = newValue !== elementValue;\r\n\r\n                    if (valueHasChanged || elementValue === undefined) {\r\n                        if (tagName === \"select\") {\r\n                            var allowUnset = allBindings.get('valueAllowUnset');\r\n                            ko.selectExtensions.writeValue(element, newValue, allowUnset);\r\n                            if (!allowUnset && newValue !== ko.selectExtensions.readValue(element)) {\r\n                                // If you try to set a model value that can't be represented in an already-populated dropdown, reject that change,\r\n                                // because you're not allowed to have a model value that disagrees with a visible UI selection.\r\n                                ko.dependencyDetection.ignore(valueUpdateHandler);\r\n                            }\r\n                        } else {\r\n                            ko.selectExtensions.writeValue(element, newValue);\r\n                        }\r\n                    }\r\n                };\r\n            }\r\n\r\n            ko.computed(updateFromModel, null, { disposeWhenNodeIsRemoved: element });\r\n        },\r\n        'update': function() {} // Keep for backwards compatibility with code that may have wrapped value binding\r\n    };\r\n    ko.expressionRewriting.twoWayBindings['value'] = true;\r\n    ko.bindingHandlers['visible'] = {\r\n        'update': function (element, valueAccessor) {\r\n            var value = ko.utils.unwrapObservable(valueAccessor());\r\n            var isCurrentlyVisible = !(element.style.display == \"none\");\r\n            if (value && !isCurrentlyVisible)\r\n                element.style.display = \"\";\r\n            else if ((!value) && isCurrentlyVisible)\r\n                element.style.display = \"none\";\r\n        }\r\n    };\r\n\r\n    ko.bindingHandlers['hidden'] = {\r\n        'update': function (element, valueAccessor) {\r\n            ko.bindingHandlers['visible']['update'](element, function() { return !ko.utils.unwrapObservable(valueAccessor()) });\r\n        }\r\n    };\r\n    // 'click' is just a shorthand for the usual full-length event:{click:handler}\r\n    makeEventHandlerShortcut('click');\r\n    // If you want to make a custom template engine,\r\n    //\r\n    // [1] Inherit from this class (like ko.nativeTemplateEngine does)\r\n    // [2] Override 'renderTemplateSource', supplying a function with this signature:\r\n    //\r\n    //        function (templateSource, bindingContext, options) {\r\n    //            // - templateSource.text() is the text of the template you should render\r\n    //            // - bindingContext.$data is the data you should pass into the template\r\n    //            //   - you might also want to make bindingContext.$parent, bindingContext.$parents,\r\n    //            //     and bindingContext.$root available in the template too\r\n    //            // - options gives you access to any other properties set on \"data-bind: { template: options }\"\r\n    //            // - templateDocument is the document object of the template\r\n    //            //\r\n    //            // Return value: an array of DOM nodes\r\n    //        }\r\n    //\r\n    // [3] Override 'createJavaScriptEvaluatorBlock', supplying a function with this signature:\r\n    //\r\n    //        function (script) {\r\n    //            // Return value: Whatever syntax means \"Evaluate the JavaScript statement 'script' and output the result\"\r\n    //            //               For example, the jquery.tmpl template engine converts 'someScript' to '${ someScript }'\r\n    //        }\r\n    //\r\n    //     This is only necessary if you want to allow data-bind attributes to reference arbitrary template variables.\r\n    //     If you don't want to allow that, you can set the property 'allowTemplateRewriting' to false (like ko.nativeTemplateEngine does)\r\n    //     and then you don't need to override 'createJavaScriptEvaluatorBlock'.\r\n\r\n    ko.templateEngine = function () { };\r\n\r\n    ko.templateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\r\n        throw new Error(\"Override renderTemplateSource\");\r\n    };\r\n\r\n    ko.templateEngine.prototype['createJavaScriptEvaluatorBlock'] = function (script) {\r\n        throw new Error(\"Override createJavaScriptEvaluatorBlock\");\r\n    };\r\n\r\n    ko.templateEngine.prototype['makeTemplateSource'] = function(template, templateDocument) {\r\n        // Named template\r\n        if (typeof template == \"string\") {\r\n            templateDocument = templateDocument || document;\r\n            var elem = templateDocument.getElementById(template);\r\n            if (!elem)\r\n                throw new Error(\"Cannot find template with ID \" + template);\r\n            return new ko.templateSources.domElement(elem);\r\n        } else if ((template.nodeType == 1) || (template.nodeType == 8)) {\r\n            // Anonymous template\r\n            return new ko.templateSources.anonymousTemplate(template);\r\n        } else\r\n            throw new Error(\"Unknown template type: \" + template);\r\n    };\r\n\r\n    ko.templateEngine.prototype['renderTemplate'] = function (template, bindingContext, options, templateDocument) {\r\n        var templateSource = this['makeTemplateSource'](template, templateDocument);\r\n        return this['renderTemplateSource'](templateSource, bindingContext, options, templateDocument);\r\n    };\r\n\r\n    ko.templateEngine.prototype['isTemplateRewritten'] = function (template, templateDocument) {\r\n        // Skip rewriting if requested\r\n        if (this['allowTemplateRewriting'] === false)\r\n            return true;\r\n        return this['makeTemplateSource'](template, templateDocument)['data'](\"isRewritten\");\r\n    };\r\n\r\n    ko.templateEngine.prototype['rewriteTemplate'] = function (template, rewriterCallback, templateDocument) {\r\n        var templateSource = this['makeTemplateSource'](template, templateDocument);\r\n        var rewritten = rewriterCallback(templateSource['text']());\r\n        templateSource['text'](rewritten);\r\n        templateSource['data'](\"isRewritten\", true);\r\n    };\r\n\r\n    ko.exportSymbol('templateEngine', ko.templateEngine);\r\n\r\n    ko.templateRewriting = (function () {\r\n        var memoizeDataBindingAttributeSyntaxRegex = /(<([a-z]+\\d*)(?:\\s+(?!data-bind\\s*=\\s*)[a-z0-9\\-]+(?:=(?:\\\"[^\\\"]*\\\"|\\'[^\\']*\\'|[^>]*))?)*\\s+)data-bind\\s*=\\s*([\"'])([\\s\\S]*?)\\3/gi;\r\n        var memoizeVirtualContainerBindingSyntaxRegex = /<!--\\s*ko\\b\\s*([\\s\\S]*?)\\s*-->/g;\r\n\r\n        function validateDataBindValuesForRewriting(keyValueArray) {\r\n            var allValidators = ko.expressionRewriting.bindingRewriteValidators;\r\n            for (var i = 0; i < keyValueArray.length; i++) {\r\n                var key = keyValueArray[i]['key'];\r\n                if (Object.prototype.hasOwnProperty.call(allValidators, key)) {\r\n                    var validator = allValidators[key];\r\n\r\n                    if (typeof validator === \"function\") {\r\n                        var possibleErrorMessage = validator(keyValueArray[i]['value']);\r\n                        if (possibleErrorMessage)\r\n                            throw new Error(possibleErrorMessage);\r\n                    } else if (!validator) {\r\n                        throw new Error(\"This template engine does not support the '\" + key + \"' binding within its templates\");\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        function constructMemoizedTagReplacement(dataBindAttributeValue, tagToRetain, nodeName, templateEngine) {\r\n            var dataBindKeyValueArray = ko.expressionRewriting.parseObjectLiteral(dataBindAttributeValue);\r\n            validateDataBindValuesForRewriting(dataBindKeyValueArray);\r\n            var rewrittenDataBindAttributeValue = ko.expressionRewriting.preProcessBindings(dataBindKeyValueArray, {'valueAccessors':true});\r\n\r\n            // For no obvious reason, Opera fails to evaluate rewrittenDataBindAttributeValue unless it's wrapped in an additional\r\n            // anonymous function, even though Opera's built-in debugger can evaluate it anyway. No other browser requires this\r\n            // extra indirection.\r\n            var applyBindingsToNextSiblingScript =\r\n                \"ko.__tr_ambtns(function($context,$element){return(function(){return{ \" + rewrittenDataBindAttributeValue + \" } })()},'\" + nodeName.toLowerCase() + \"')\";\r\n            return templateEngine['createJavaScriptEvaluatorBlock'](applyBindingsToNextSiblingScript) + tagToRetain;\r\n        }\r\n\r\n        return {\r\n            ensureTemplateIsRewritten: function (template, templateEngine, templateDocument) {\r\n                if (!templateEngine['isTemplateRewritten'](template, templateDocument))\r\n                    templateEngine['rewriteTemplate'](template, function (htmlString) {\r\n                        return ko.templateRewriting.memoizeBindingAttributeSyntax(htmlString, templateEngine);\r\n                    }, templateDocument);\r\n            },\r\n\r\n            memoizeBindingAttributeSyntax: function (htmlString, templateEngine) {\r\n                return htmlString.replace(memoizeDataBindingAttributeSyntaxRegex, function () {\r\n                    return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[4], /* tagToRetain: */ arguments[1], /* nodeName: */ arguments[2], templateEngine);\r\n                }).replace(memoizeVirtualContainerBindingSyntaxRegex, function() {\r\n                    return constructMemoizedTagReplacement(/* dataBindAttributeValue: */ arguments[1], /* tagToRetain: */ \"<!-- ko -->\", /* nodeName: */ \"#comment\", templateEngine);\r\n                });\r\n            },\r\n\r\n            applyMemoizedBindingsToNextSibling: function (bindings, nodeName) {\r\n                return ko.memoization.memoize(function (domNode, bindingContext) {\r\n                    var nodeToBind = domNode.nextSibling;\r\n                    if (nodeToBind && nodeToBind.nodeName.toLowerCase() === nodeName) {\r\n                        ko.applyBindingAccessorsToNode(nodeToBind, bindings, bindingContext);\r\n                    }\r\n                });\r\n            }\r\n        }\r\n    })();\r\n\r\n\r\n    // Exported only because it has to be referenced by string lookup from within rewritten template\r\n    ko.exportSymbol('__tr_ambtns', ko.templateRewriting.applyMemoizedBindingsToNextSibling);\r\n    (function() {\r\n        // A template source represents a read/write way of accessing a template. This is to eliminate the need for template loading/saving\r\n        // logic to be duplicated in every template engine (and means they can all work with anonymous templates, etc.)\r\n        //\r\n        // Two are provided by default:\r\n        //  1. ko.templateSources.domElement       - reads/writes the text content of an arbitrary DOM element\r\n        //  2. ko.templateSources.anonymousElement - uses ko.utils.domData to read/write text *associated* with the DOM element, but\r\n        //                                           without reading/writing the actual element text content, since it will be overwritten\r\n        //                                           with the rendered template output.\r\n        // You can implement your own template source if you want to fetch/store templates somewhere other than in DOM elements.\r\n        // Template sources need to have the following functions:\r\n        //   text() \t\t\t- returns the template text from your storage location\r\n        //   text(value)\t\t- writes the supplied template text to your storage location\r\n        //   data(key)\t\t\t- reads values stored using data(key, value) - see below\r\n        //   data(key, value)\t- associates \"value\" with this template and the key \"key\". Is used to store information like \"isRewritten\".\r\n        //\r\n        // Optionally, template sources can also have the following functions:\r\n        //   nodes()            - returns a DOM element containing the nodes of this template, where available\r\n        //   nodes(value)       - writes the given DOM element to your storage location\r\n        // If a DOM element is available for a given template source, template engines are encouraged to use it in preference over text()\r\n        // for improved speed. However, all templateSources must supply text() even if they don't supply nodes().\r\n        //\r\n        // Once you've implemented a templateSource, make your template engine use it by subclassing whatever template engine you were\r\n        // using and overriding \"makeTemplateSource\" to return an instance of your custom template source.\r\n\r\n        ko.templateSources = {};\r\n\r\n        // ---- ko.templateSources.domElement -----\r\n\r\n        // template types\r\n        var templateScript = 1,\r\n            templateTextArea = 2,\r\n            templateTemplate = 3,\r\n            templateElement = 4;\r\n\r\n        ko.templateSources.domElement = function(element) {\r\n            this.domElement = element;\r\n\r\n            if (element) {\r\n                var tagNameLower = ko.utils.tagNameLower(element);\r\n                this.templateType =\r\n                    tagNameLower === \"script\" ? templateScript :\r\n                    tagNameLower === \"textarea\" ? templateTextArea :\r\n                        // For browsers with proper <template> element support, where the .content property gives a document fragment\r\n                    tagNameLower == \"template\" && element.content && element.content.nodeType === 11 ? templateTemplate :\r\n                    templateElement;\r\n            }\r\n        }\r\n\r\n        ko.templateSources.domElement.prototype['text'] = function(/* valueToWrite */) {\r\n            var elemContentsProperty = this.templateType === templateScript ? \"text\"\r\n                                     : this.templateType === templateTextArea ? \"value\"\r\n                                     : \"innerHTML\";\r\n\r\n            if (arguments.length == 0) {\r\n                return this.domElement[elemContentsProperty];\r\n            } else {\r\n                var valueToWrite = arguments[0];\r\n                if (elemContentsProperty === \"innerHTML\")\r\n                    ko.utils.setHtml(this.domElement, valueToWrite);\r\n                else\r\n                    this.domElement[elemContentsProperty] = valueToWrite;\r\n            }\r\n        };\r\n\r\n        var dataDomDataPrefix = ko.utils.domData.nextKey() + \"_\";\r\n        ko.templateSources.domElement.prototype['data'] = function(key /*, valueToWrite */) {\r\n            if (arguments.length === 1) {\r\n                return ko.utils.domData.get(this.domElement, dataDomDataPrefix + key);\r\n            } else {\r\n                ko.utils.domData.set(this.domElement, dataDomDataPrefix + key, arguments[1]);\r\n            }\r\n        };\r\n\r\n        var templatesDomDataKey = ko.utils.domData.nextKey();\r\n        function getTemplateDomData(element) {\r\n            return ko.utils.domData.get(element, templatesDomDataKey) || {};\r\n        }\r\n        function setTemplateDomData(element, data) {\r\n            ko.utils.domData.set(element, templatesDomDataKey, data);\r\n        }\r\n\r\n        ko.templateSources.domElement.prototype['nodes'] = function(/* valueToWrite */) {\r\n            var element = this.domElement;\r\n            if (arguments.length == 0) {\r\n                var templateData = getTemplateDomData(element),\r\n                    nodes = templateData.containerData || (\r\n                        this.templateType === templateTemplate ? element.content :\r\n                        this.templateType === templateElement ? element :\r\n                        undefined);\r\n                if (!nodes || templateData.alwaysCheckText) {\r\n                    // If the template is associated with an element that stores the template as text,\r\n                    // parse and cache the nodes whenever there's new text content available. This allows\r\n                    // the user to update the template content by updating the text of template node.\r\n                    var text = this['text']();\r\n                    if (text) {\r\n                        nodes = ko.utils.parseHtmlForTemplateNodes(text, element.ownerDocument);\r\n                        this['text'](\"\");   // clear the text from the node\r\n                        setTemplateDomData(element, {containerData: nodes, alwaysCheckText: true});\r\n                    }\r\n                }\r\n                return nodes;\r\n            } else {\r\n                var valueToWrite = arguments[0];\r\n                setTemplateDomData(element, {containerData: valueToWrite});\r\n            }\r\n        };\r\n\r\n        // ---- ko.templateSources.anonymousTemplate -----\r\n        // Anonymous templates are normally saved/retrieved as DOM nodes through \"nodes\".\r\n        // For compatibility, you can also read \"text\"; it will be serialized from the nodes on demand.\r\n        // Writing to \"text\" is still supported, but then the template data will not be available as DOM nodes.\r\n\r\n        ko.templateSources.anonymousTemplate = function(element) {\r\n            this.domElement = element;\r\n        }\r\n        ko.templateSources.anonymousTemplate.prototype = new ko.templateSources.domElement();\r\n        ko.templateSources.anonymousTemplate.prototype.constructor = ko.templateSources.anonymousTemplate;\r\n        ko.templateSources.anonymousTemplate.prototype['text'] = function(/* valueToWrite */) {\r\n            if (arguments.length == 0) {\r\n                var templateData = getTemplateDomData(this.domElement);\r\n                if (templateData.textData === undefined && templateData.containerData)\r\n                    templateData.textData = templateData.containerData.innerHTML;\r\n                return templateData.textData;\r\n            } else {\r\n                var valueToWrite = arguments[0];\r\n                setTemplateDomData(this.domElement, {textData: valueToWrite});\r\n            }\r\n        };\r\n\r\n        ko.exportSymbol('templateSources', ko.templateSources);\r\n        ko.exportSymbol('templateSources.domElement', ko.templateSources.domElement);\r\n        ko.exportSymbol('templateSources.anonymousTemplate', ko.templateSources.anonymousTemplate);\r\n    })();\r\n    (function () {\r\n        var _templateEngine;\r\n        ko.setTemplateEngine = function (templateEngine) {\r\n            if ((templateEngine != undefined) && !(templateEngine instanceof ko.templateEngine))\r\n                throw new Error(\"templateEngine must inherit from ko.templateEngine\");\r\n            _templateEngine = templateEngine;\r\n        }\r\n\r\n        function invokeForEachNodeInContinuousRange(firstNode, lastNode, action) {\r\n            var node, nextInQueue = firstNode, firstOutOfRangeNode = ko.virtualElements.nextSibling(lastNode);\r\n            while (nextInQueue && ((node = nextInQueue) !== firstOutOfRangeNode)) {\r\n                nextInQueue = ko.virtualElements.nextSibling(node);\r\n                action(node, nextInQueue);\r\n            }\r\n        }\r\n\r\n        function activateBindingsOnContinuousNodeArray(continuousNodeArray, bindingContext) {\r\n            // To be used on any nodes that have been rendered by a template and have been inserted into some parent element\r\n            // Walks through continuousNodeArray (which *must* be continuous, i.e., an uninterrupted sequence of sibling nodes, because\r\n            // the algorithm for walking them relies on this), and for each top-level item in the virtual-element sense,\r\n            // (1) Does a regular \"applyBindings\" to associate bindingContext with this node and to activate any non-memoized bindings\r\n            // (2) Unmemoizes any memos in the DOM subtree (e.g., to activate bindings that had been memoized during template rewriting)\r\n\r\n            if (continuousNodeArray.length) {\r\n                var firstNode = continuousNodeArray[0],\r\n                    lastNode = continuousNodeArray[continuousNodeArray.length - 1],\r\n                    parentNode = firstNode.parentNode,\r\n                    provider = ko.bindingProvider['instance'],\r\n                    preprocessNode = provider['preprocessNode'];\r\n\r\n                if (preprocessNode) {\r\n                    invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node, nextNodeInRange) {\r\n                        var nodePreviousSibling = node.previousSibling;\r\n                        var newNodes = preprocessNode.call(provider, node);\r\n                        if (newNodes) {\r\n                            if (node === firstNode)\r\n                                firstNode = newNodes[0] || nextNodeInRange;\r\n                            if (node === lastNode)\r\n                                lastNode = newNodes[newNodes.length - 1] || nodePreviousSibling;\r\n                        }\r\n                    });\r\n\r\n                    // Because preprocessNode can change the nodes, including the first and last nodes, update continuousNodeArray to match.\r\n                    // We need the full set, including inner nodes, because the unmemoize step might remove the first node (and so the real\r\n                    // first node needs to be in the array).\r\n                    continuousNodeArray.length = 0;\r\n                    if (!firstNode) { // preprocessNode might have removed all the nodes, in which case there's nothing left to do\r\n                        return;\r\n                    }\r\n                    if (firstNode === lastNode) {\r\n                        continuousNodeArray.push(firstNode);\r\n                    } else {\r\n                        continuousNodeArray.push(firstNode, lastNode);\r\n                        ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\r\n                    }\r\n                }\r\n\r\n                // Need to applyBindings *before* unmemoziation, because unmemoization might introduce extra nodes (that we don't want to re-bind)\r\n                // whereas a regular applyBindings won't introduce new memoized nodes\r\n                invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\r\n                    if (node.nodeType === 1 || node.nodeType === 8)\r\n                        ko.applyBindings(bindingContext, node);\r\n                });\r\n                invokeForEachNodeInContinuousRange(firstNode, lastNode, function(node) {\r\n                    if (node.nodeType === 1 || node.nodeType === 8)\r\n                        ko.memoization.unmemoizeDomNodeAndDescendants(node, [bindingContext]);\r\n                });\r\n\r\n                // Make sure any changes done by applyBindings or unmemoize are reflected in the array\r\n                ko.utils.fixUpContinuousNodeArray(continuousNodeArray, parentNode);\r\n            }\r\n        }\r\n\r\n        function getFirstNodeFromPossibleArray(nodeOrNodeArray) {\r\n            return nodeOrNodeArray.nodeType ? nodeOrNodeArray\r\n                                            : nodeOrNodeArray.length > 0 ? nodeOrNodeArray[0]\r\n                                            : null;\r\n        }\r\n\r\n        function executeTemplate(targetNodeOrNodeArray, renderMode, template, bindingContext, options) {\r\n            options = options || {};\r\n            var firstTargetNode = targetNodeOrNodeArray && getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n            var templateDocument = (firstTargetNode || template || {}).ownerDocument;\r\n            var templateEngineToUse = (options['templateEngine'] || _templateEngine);\r\n            ko.templateRewriting.ensureTemplateIsRewritten(template, templateEngineToUse, templateDocument);\r\n            var renderedNodesArray = templateEngineToUse['renderTemplate'](template, bindingContext, options, templateDocument);\r\n\r\n            // Loosely check result is an array of DOM nodes\r\n            if ((typeof renderedNodesArray.length != \"number\") || (renderedNodesArray.length > 0 && typeof renderedNodesArray[0].nodeType != \"number\"))\r\n                throw new Error(\"Template engine must return an array of DOM nodes\");\r\n\r\n            var haveAddedNodesToParent = false;\r\n            switch (renderMode) {\r\n                case \"replaceChildren\":\r\n                    ko.virtualElements.setDomNodeChildren(targetNodeOrNodeArray, renderedNodesArray);\r\n                    haveAddedNodesToParent = true;\r\n                    break;\r\n                case \"replaceNode\":\r\n                    ko.utils.replaceDomNodes(targetNodeOrNodeArray, renderedNodesArray);\r\n                    haveAddedNodesToParent = true;\r\n                    break;\r\n                case \"ignoreTargetNode\": break;\r\n                default:\r\n                    throw new Error(\"Unknown renderMode: \" + renderMode);\r\n            }\r\n\r\n            if (haveAddedNodesToParent) {\r\n                activateBindingsOnContinuousNodeArray(renderedNodesArray, bindingContext);\r\n                if (options['afterRender']) {\r\n                    ko.dependencyDetection.ignore(options['afterRender'], null, [renderedNodesArray, bindingContext[options['as'] || '$data']]);\r\n                }\r\n                if (renderMode == \"replaceChildren\") {\r\n                    ko.bindingEvent.notify(targetNodeOrNodeArray, ko.bindingEvent.childrenComplete);\r\n                }\r\n            }\r\n\r\n            return renderedNodesArray;\r\n        }\r\n\r\n        function resolveTemplateName(template, data, context) {\r\n            // The template can be specified as:\r\n            if (ko.isObservable(template)) {\r\n                // 1. An observable, with string value\r\n                return template();\r\n            } else if (typeof template === 'function') {\r\n                // 2. A function of (data, context) returning a string\r\n                return template(data, context);\r\n            } else {\r\n                // 3. A string\r\n                return template;\r\n            }\r\n        }\r\n\r\n        ko.renderTemplate = function (template, dataOrBindingContext, options, targetNodeOrNodeArray, renderMode) {\r\n            options = options || {};\r\n            if ((options['templateEngine'] || _templateEngine) == undefined)\r\n                throw new Error(\"Set a template engine before calling renderTemplate\");\r\n            renderMode = renderMode || \"replaceChildren\";\r\n\r\n            if (targetNodeOrNodeArray) {\r\n                var firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n\r\n                var whenToDispose = function () { return (!firstTargetNode) || !ko.utils.domNodeIsAttachedToDocument(firstTargetNode); }; // Passive disposal (on next evaluation)\r\n                var activelyDisposeWhenNodeIsRemoved = (firstTargetNode && renderMode == \"replaceNode\") ? firstTargetNode.parentNode : firstTargetNode;\r\n\r\n                return ko.dependentObservable( // So the DOM is automatically updated when any dependency changes\r\n                    function () {\r\n                        // Ensure we've got a proper binding context to work with\r\n                        var bindingContext = (dataOrBindingContext && (dataOrBindingContext instanceof ko.bindingContext))\r\n                            ? dataOrBindingContext\r\n                            : new ko.bindingContext(dataOrBindingContext, null, null, null, { \"exportDependencies\": true });\r\n\r\n                        var templateName = resolveTemplateName(template, bindingContext['$data'], bindingContext),\r\n                            renderedNodesArray = executeTemplate(targetNodeOrNodeArray, renderMode, templateName, bindingContext, options);\r\n\r\n                        if (renderMode == \"replaceNode\") {\r\n                            targetNodeOrNodeArray = renderedNodesArray;\r\n                            firstTargetNode = getFirstNodeFromPossibleArray(targetNodeOrNodeArray);\r\n                        }\r\n                    },\r\n                    null,\r\n                    { disposeWhen: whenToDispose, disposeWhenNodeIsRemoved: activelyDisposeWhenNodeIsRemoved }\r\n                );\r\n            } else {\r\n                // We don't yet have a DOM node to evaluate, so use a memo and render the template later when there is a DOM node\r\n                return ko.memoization.memoize(function (domNode) {\r\n                    ko.renderTemplate(template, dataOrBindingContext, options, domNode, \"replaceNode\");\r\n                });\r\n            }\r\n        };\r\n\r\n        ko.renderTemplateForEach = function (template, arrayOrObservableArray, options, targetNode, parentBindingContext) {\r\n            // Since setDomNodeChildrenFromArrayMapping always calls executeTemplateForArrayItem and then\r\n            // activateBindingsCallback for added items, we can store the binding context in the former to use in the latter.\r\n            var arrayItemContext, asName = options['as'];\r\n\r\n            // This will be called by setDomNodeChildrenFromArrayMapping to get the nodes to add to targetNode\r\n            var executeTemplateForArrayItem = function (arrayValue, index) {\r\n                // Support selecting template as a function of the data being rendered\r\n                arrayItemContext = parentBindingContext['createChildContext'](arrayValue, {\r\n                    'as': asName,\r\n                    'noChildContext': options['noChildContext'],\r\n                    'extend': function(context) {\r\n                        context['$index'] = index;\r\n                        if (asName) {\r\n                            context[asName + \"Index\"] = index;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                var templateName = resolveTemplateName(template, arrayValue, arrayItemContext);\r\n                return executeTemplate(targetNode, \"ignoreTargetNode\", templateName, arrayItemContext, options);\r\n            };\r\n\r\n            // This will be called whenever setDomNodeChildrenFromArrayMapping has added nodes to targetNode\r\n            var activateBindingsCallback = function(arrayValue, addedNodesArray, index) {\r\n                activateBindingsOnContinuousNodeArray(addedNodesArray, arrayItemContext);\r\n                if (options['afterRender'])\r\n                    options['afterRender'](addedNodesArray, arrayValue);\r\n\r\n                // release the \"cache\" variable, so that it can be collected by\r\n                // the GC when its value isn't used from within the bindings anymore.\r\n                arrayItemContext = null;\r\n            };\r\n\r\n            var setDomNodeChildrenFromArrayMapping = function (newArray, changeList) {\r\n                // Call setDomNodeChildrenFromArrayMapping, ignoring any observables unwrapped within (most likely from a callback function).\r\n                // If the array items are observables, though, they will be unwrapped in executeTemplateForArrayItem and managed within setDomNodeChildrenFromArrayMapping.\r\n                ko.dependencyDetection.ignore(ko.utils.setDomNodeChildrenFromArrayMapping, null, [targetNode, newArray, executeTemplateForArrayItem, options, activateBindingsCallback, changeList]);\r\n                ko.bindingEvent.notify(targetNode, ko.bindingEvent.childrenComplete);\r\n            };\r\n\r\n            var shouldHideDestroyed = (options['includeDestroyed'] === false) || (ko.options['foreachHidesDestroyed'] && !options['includeDestroyed']);\r\n\r\n            if (!shouldHideDestroyed && !options['beforeRemove'] && ko.isObservableArray(arrayOrObservableArray)) {\r\n                setDomNodeChildrenFromArrayMapping(arrayOrObservableArray.peek());\r\n\r\n                var subscription = arrayOrObservableArray.subscribe(function (changeList) {\r\n                    setDomNodeChildrenFromArrayMapping(arrayOrObservableArray(), changeList);\r\n                }, null, \"arrayChange\");\r\n                subscription.disposeWhenNodeIsRemoved(targetNode);\r\n\r\n                return subscription;\r\n            } else {\r\n                return ko.dependentObservable(function () {\r\n                    var unwrappedArray = ko.utils.unwrapObservable(arrayOrObservableArray) || [];\r\n                    if (typeof unwrappedArray.length == \"undefined\") // Coerce single value into array\r\n                        unwrappedArray = [unwrappedArray];\r\n\r\n                    if (shouldHideDestroyed) {\r\n                        // Filter out any entries marked as destroyed\r\n                        unwrappedArray = ko.utils.arrayFilter(unwrappedArray, function(item) {\r\n                            return item === undefined || item === null || !ko.utils.unwrapObservable(item['_destroy']);\r\n                        });\r\n                    }\r\n                    setDomNodeChildrenFromArrayMapping(unwrappedArray);\r\n\r\n                }, null, { disposeWhenNodeIsRemoved: targetNode });\r\n            }\r\n        };\r\n\r\n        var templateComputedDomDataKey = ko.utils.domData.nextKey();\r\n        function disposeOldComputedAndStoreNewOne(element, newComputed) {\r\n            var oldComputed = ko.utils.domData.get(element, templateComputedDomDataKey);\r\n            if (oldComputed && (typeof(oldComputed.dispose) == 'function'))\r\n                oldComputed.dispose();\r\n            ko.utils.domData.set(element, templateComputedDomDataKey, (newComputed && (!newComputed.isActive || newComputed.isActive())) ? newComputed : undefined);\r\n        }\r\n\r\n        var cleanContainerDomDataKey = ko.utils.domData.nextKey();\r\n        ko.bindingHandlers['template'] = {\r\n            'init': function(element, valueAccessor) {\r\n                // Support anonymous templates\r\n                var bindingValue = ko.utils.unwrapObservable(valueAccessor());\r\n                if (typeof bindingValue == \"string\" || bindingValue['name']) {\r\n                    // It's a named template - clear the element\r\n                    ko.virtualElements.emptyNode(element);\r\n                } else if ('nodes' in bindingValue) {\r\n                    // We've been given an array of DOM nodes. Save them as the template source.\r\n                    // There is no known use case for the node array being an observable array (if the output\r\n                    // varies, put that behavior *into* your template - that's what templates are for), and\r\n                    // the implementation would be a mess, so assert that it's not observable.\r\n                    var nodes = bindingValue['nodes'] || [];\r\n                    if (ko.isObservable(nodes)) {\r\n                        throw new Error('The \"nodes\" option must be a plain, non-observable array.');\r\n                    }\r\n\r\n                    // If the nodes are already attached to a KO-generated container, we reuse that container without moving the\r\n                    // elements to a new one (we check only the first node, as the nodes are always moved together)\r\n                    var container = nodes[0] && nodes[0].parentNode;\r\n                    if (!container || !ko.utils.domData.get(container, cleanContainerDomDataKey)) {\r\n                        container = ko.utils.moveCleanedNodesToContainerElement(nodes);\r\n                        ko.utils.domData.set(container, cleanContainerDomDataKey, true);\r\n                    }\r\n\r\n                    new ko.templateSources.anonymousTemplate(element)['nodes'](container);\r\n                } else {\r\n                    // It's an anonymous template - store the element contents, then clear the element\r\n                    var templateNodes = ko.virtualElements.childNodes(element);\r\n                    if (templateNodes.length > 0) {\r\n                        var container = ko.utils.moveCleanedNodesToContainerElement(templateNodes); // This also removes the nodes from their current parent\r\n                        new ko.templateSources.anonymousTemplate(element)['nodes'](container);\r\n                    } else {\r\n                        throw new Error(\"Anonymous template defined, but no template content was provided\");\r\n                    }\r\n                }\r\n                return { 'controlsDescendantBindings': true };\r\n            },\r\n            'update': function (element, valueAccessor, allBindings, viewModel, bindingContext) {\r\n                var value = valueAccessor(),\r\n                    options = ko.utils.unwrapObservable(value),\r\n                    shouldDisplay = true,\r\n                    templateComputed = null,\r\n                    templateName;\r\n\r\n                if (typeof options == \"string\") {\r\n                    templateName = value;\r\n                    options = {};\r\n                } else {\r\n                    templateName = options['name'];\r\n\r\n                    // Support \"if\"/\"ifnot\" conditions\r\n                    if ('if' in options)\r\n                        shouldDisplay = ko.utils.unwrapObservable(options['if']);\r\n                    if (shouldDisplay && 'ifnot' in options)\r\n                        shouldDisplay = !ko.utils.unwrapObservable(options['ifnot']);\r\n                }\r\n\r\n                if ('foreach' in options) {\r\n                    // Render once for each data point (treating data set as empty if shouldDisplay==false)\r\n                    var dataArray = (shouldDisplay && options['foreach']) || [];\r\n                    templateComputed = ko.renderTemplateForEach(templateName || element, dataArray, options, element, bindingContext);\r\n                } else if (!shouldDisplay) {\r\n                    ko.virtualElements.emptyNode(element);\r\n                } else {\r\n                    // Render once for this single data point (or use the viewModel if no data was provided)\r\n                    var innerBindingContext = bindingContext;\r\n                    if ('data' in options) {\r\n                        innerBindingContext = bindingContext['createChildContext'](options['data'], {\r\n                            'as': options['as'],\r\n                            'noChildContext': options['noChildContext'],\r\n                            'exportDependencies': true\r\n                        });\r\n                    }\r\n                    templateComputed = ko.renderTemplate(templateName || element, innerBindingContext, options, element);\r\n                }\r\n\r\n                // It only makes sense to have a single template computed per element (otherwise which one should have its output displayed?)\r\n                disposeOldComputedAndStoreNewOne(element, templateComputed);\r\n            }\r\n        };\r\n\r\n        // Anonymous templates can't be rewritten. Give a nice error message if you try to do it.\r\n        ko.expressionRewriting.bindingRewriteValidators['template'] = function(bindingValue) {\r\n            var parsedBindingValue = ko.expressionRewriting.parseObjectLiteral(bindingValue);\r\n\r\n            if ((parsedBindingValue.length == 1) && parsedBindingValue[0]['unknown'])\r\n                return null; // It looks like a string literal, not an object literal, so treat it as a named template (which is allowed for rewriting)\r\n\r\n            if (ko.expressionRewriting.keyValueArrayContainsKey(parsedBindingValue, \"name\"))\r\n                return null; // Named templates can be rewritten, so return \"no error\"\r\n            return \"This template engine does not support anonymous templates nested within its templates\";\r\n        };\r\n\r\n        ko.virtualElements.allowedBindings['template'] = true;\r\n    })();\r\n\r\n    ko.exportSymbol('setTemplateEngine', ko.setTemplateEngine);\r\n    ko.exportSymbol('renderTemplate', ko.renderTemplate);\r\n    // Go through the items that have been added and deleted and try to find matches between them.\r\n    ko.utils.findMovesInArrayComparison = function (left, right, limitFailedCompares) {\r\n        if (left.length && right.length) {\r\n            var failedCompares, l, r, leftItem, rightItem;\r\n            for (failedCompares = l = 0; (!limitFailedCompares || failedCompares < limitFailedCompares) && (leftItem = left[l]); ++l) {\r\n                for (r = 0; rightItem = right[r]; ++r) {\r\n                    if (leftItem['value'] === rightItem['value']) {\r\n                        leftItem['moved'] = rightItem['index'];\r\n                        rightItem['moved'] = leftItem['index'];\r\n                        right.splice(r, 1);         // This item is marked as moved; so remove it from right list\r\n                        failedCompares = r = 0;     // Reset failed compares count because we're checking for consecutive failures\r\n                        break;\r\n                    }\r\n                }\r\n                failedCompares += r;\r\n            }\r\n        }\r\n    };\r\n\r\n    ko.utils.compareArrays = (function () {\r\n        var statusNotInOld = 'added', statusNotInNew = 'deleted';\r\n\r\n        // Simple calculation based on Levenshtein distance.\r\n        function compareArrays(oldArray, newArray, options) {\r\n            // For backward compatibility, if the third arg is actually a bool, interpret\r\n            // it as the old parameter 'dontLimitMoves'. Newer code should use { dontLimitMoves: true }.\r\n            options = (typeof options === 'boolean') ? { 'dontLimitMoves': options } : (options || {});\r\n            oldArray = oldArray || [];\r\n            newArray = newArray || [];\r\n\r\n            if (oldArray.length < newArray.length)\r\n                return compareSmallArrayToBigArray(oldArray, newArray, statusNotInOld, statusNotInNew, options);\r\n            else\r\n                return compareSmallArrayToBigArray(newArray, oldArray, statusNotInNew, statusNotInOld, options);\r\n        }\r\n\r\n        function compareSmallArrayToBigArray(smlArray, bigArray, statusNotInSml, statusNotInBig, options) {\r\n            var myMin = Math.min,\r\n                myMax = Math.max,\r\n                editDistanceMatrix = [],\r\n                smlIndex, smlIndexMax = smlArray.length,\r\n                bigIndex, bigIndexMax = bigArray.length,\r\n                compareRange = (bigIndexMax - smlIndexMax) || 1,\r\n                maxDistance = smlIndexMax + bigIndexMax + 1,\r\n                thisRow, lastRow,\r\n                bigIndexMaxForRow, bigIndexMinForRow;\r\n\r\n            for (smlIndex = 0; smlIndex <= smlIndexMax; smlIndex++) {\r\n                lastRow = thisRow;\r\n                editDistanceMatrix.push(thisRow = []);\r\n                bigIndexMaxForRow = myMin(bigIndexMax, smlIndex + compareRange);\r\n                bigIndexMinForRow = myMax(0, smlIndex - 1);\r\n                for (bigIndex = bigIndexMinForRow; bigIndex <= bigIndexMaxForRow; bigIndex++) {\r\n                    if (!bigIndex)\r\n                        thisRow[bigIndex] = smlIndex + 1;\r\n                    else if (!smlIndex)  // Top row - transform empty array into new array via additions\r\n                        thisRow[bigIndex] = bigIndex + 1;\r\n                    else if (smlArray[smlIndex - 1] === bigArray[bigIndex - 1])\r\n                        thisRow[bigIndex] = lastRow[bigIndex - 1];                  // copy value (no edit)\r\n                    else {\r\n                        var northDistance = lastRow[bigIndex] || maxDistance;       // not in big (deletion)\r\n                        var westDistance = thisRow[bigIndex - 1] || maxDistance;    // not in small (addition)\r\n                        thisRow[bigIndex] = myMin(northDistance, westDistance) + 1;\r\n                    }\r\n                }\r\n            }\r\n\r\n            var editScript = [], meMinusOne, notInSml = [], notInBig = [];\r\n            for (smlIndex = smlIndexMax, bigIndex = bigIndexMax; smlIndex || bigIndex;) {\r\n                meMinusOne = editDistanceMatrix[smlIndex][bigIndex] - 1;\r\n                if (bigIndex && meMinusOne === editDistanceMatrix[smlIndex][bigIndex-1]) {\r\n                    notInSml.push(editScript[editScript.length] = {     // added\r\n                        'status': statusNotInSml,\r\n                        'value': bigArray[--bigIndex],\r\n                        'index': bigIndex });\r\n                } else if (smlIndex && meMinusOne === editDistanceMatrix[smlIndex - 1][bigIndex]) {\r\n                    notInBig.push(editScript[editScript.length] = {     // deleted\r\n                        'status': statusNotInBig,\r\n                        'value': smlArray[--smlIndex],\r\n                        'index': smlIndex });\r\n                } else {\r\n                    --bigIndex;\r\n                    --smlIndex;\r\n                    if (!options['sparse']) {\r\n                        editScript.push({\r\n                            'status': \"retained\",\r\n                            'value': bigArray[bigIndex] });\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Set a limit on the number of consecutive non-matching comparisons; having it a multiple of\r\n            // smlIndexMax keeps the time complexity of this algorithm linear.\r\n            ko.utils.findMovesInArrayComparison(notInBig, notInSml, !options['dontLimitMoves'] && smlIndexMax * 10);\r\n\r\n            return editScript.reverse();\r\n        }\r\n\r\n        return compareArrays;\r\n    })();\r\n\r\n    ko.exportSymbol('utils.compareArrays', ko.utils.compareArrays);\r\n    (function () {\r\n        // Objective:\r\n        // * Given an input array, a container DOM node, and a function from array elements to arrays of DOM nodes,\r\n        //   map the array elements to arrays of DOM nodes, concatenate together all these arrays, and use them to populate the container DOM node\r\n        // * Next time we're given the same combination of things (with the array possibly having mutated), update the container DOM node\r\n        //   so that its children is again the concatenation of the mappings of the array elements, but don't re-map any array elements that we\r\n        //   previously mapped - retain those nodes, and just insert/delete other ones\r\n\r\n        // \"callbackAfterAddingNodes\" will be invoked after any \"mapping\"-generated nodes are inserted into the container node\r\n        // You can use this, for example, to activate bindings on those nodes.\r\n\r\n        function mapNodeAndRefreshWhenChanged(containerNode, mapping, valueToMap, callbackAfterAddingNodes, index) {\r\n            // Map this array value inside a dependentObservable so we re-map when any dependency changes\r\n            var mappedNodes = [];\r\n            var dependentObservable = ko.dependentObservable(function() {\r\n                var newMappedNodes = mapping(valueToMap, index, ko.utils.fixUpContinuousNodeArray(mappedNodes, containerNode)) || [];\r\n\r\n                // On subsequent evaluations, just replace the previously-inserted DOM nodes\r\n                if (mappedNodes.length > 0) {\r\n                    ko.utils.replaceDomNodes(mappedNodes, newMappedNodes);\r\n                    if (callbackAfterAddingNodes)\r\n                        ko.dependencyDetection.ignore(callbackAfterAddingNodes, null, [valueToMap, newMappedNodes, index]);\r\n                }\r\n\r\n                // Replace the contents of the mappedNodes array, thereby updating the record\r\n                // of which nodes would be deleted if valueToMap was itself later removed\r\n                mappedNodes.length = 0;\r\n                ko.utils.arrayPushAll(mappedNodes, newMappedNodes);\r\n            }, null, { disposeWhenNodeIsRemoved: containerNode, disposeWhen: function() { return !ko.utils.anyDomNodeIsAttachedToDocument(mappedNodes); } });\r\n            return { mappedNodes : mappedNodes, dependentObservable : (dependentObservable.isActive() ? dependentObservable : undefined) };\r\n        }\r\n\r\n        var lastMappingResultDomDataKey = ko.utils.domData.nextKey(),\r\n            deletedItemDummyValue = ko.utils.domData.nextKey();\r\n\r\n        ko.utils.setDomNodeChildrenFromArrayMapping = function (domNode, array, mapping, options, callbackAfterAddingNodes, editScript) {\r\n            array = array || [];\r\n            if (typeof array.length == \"undefined\") // Coerce single value into array\r\n                array = [array];\r\n\r\n            options = options || {};\r\n            var lastMappingResult = ko.utils.domData.get(domNode, lastMappingResultDomDataKey);\r\n            var isFirstExecution = !lastMappingResult;\r\n\r\n            // Build the new mapping result\r\n            var newMappingResult = [];\r\n            var lastMappingResultIndex = 0;\r\n            var newMappingResultIndex = 0;\r\n\r\n            var nodesToDelete = [];\r\n            var itemsToMoveFirstIndexes = [];\r\n            var itemsForBeforeRemoveCallbacks = [];\r\n            var itemsForMoveCallbacks = [];\r\n            var itemsForAfterAddCallbacks = [];\r\n            var mapData;\r\n            var countWaitingForRemove = 0;\r\n\r\n            function itemAdded(value) {\r\n                mapData = { arrayEntry: value, indexObservable: ko.observable(newMappingResultIndex++) };\r\n                newMappingResult.push(mapData);\r\n                if (!isFirstExecution) {\r\n                    itemsForAfterAddCallbacks.push(mapData);\r\n                }\r\n            }\r\n\r\n            function itemMovedOrRetained(oldPosition) {\r\n                mapData = lastMappingResult[oldPosition];\r\n                if (newMappingResultIndex !== oldPosition)\r\n                    itemsForMoveCallbacks.push(mapData);\r\n                // Since updating the index might change the nodes, do so before calling fixUpContinuousNodeArray\r\n                mapData.indexObservable(newMappingResultIndex++);\r\n                ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode);\r\n                newMappingResult.push(mapData);\r\n            }\r\n\r\n            function callCallback(callback, items) {\r\n                if (callback) {\r\n                    for (var i = 0, n = items.length; i < n; i++) {\r\n                        ko.utils.arrayForEach(items[i].mappedNodes, function(node) {\r\n                            callback(node, i, items[i].arrayEntry);\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (isFirstExecution) {\r\n                ko.utils.arrayForEach(array, itemAdded);\r\n            } else {\r\n                if (!editScript || (lastMappingResult && lastMappingResult['_countWaitingForRemove'])) {\r\n                    // Compare the provided array against the previous one\r\n                    var lastArray = isFirstExecution ? [] : ko.utils.arrayMap(lastMappingResult, function (x) { return x.arrayEntry; }),\r\n                        compareOptions = {\r\n                            'dontLimitMoves': options['dontLimitMoves'],\r\n                            'sparse': true\r\n                        };\r\n                    editScript = ko.utils.compareArrays(lastArray, array, compareOptions);\r\n                }\r\n\r\n                for (var i = 0, editScriptItem, movedIndex, itemIndex; editScriptItem = editScript[i]; i++) {\r\n                    movedIndex = editScriptItem['moved'];\r\n                    itemIndex = editScriptItem['index'];\r\n                    switch (editScriptItem['status']) {\r\n                        case \"deleted\":\r\n                            while (lastMappingResultIndex < itemIndex) {\r\n                                itemMovedOrRetained(lastMappingResultIndex++);\r\n                            }\r\n                            if (movedIndex === undefined) {\r\n                                mapData = lastMappingResult[lastMappingResultIndex];\r\n\r\n                                // Stop tracking changes to the mapping for these nodes\r\n                                if (mapData.dependentObservable) {\r\n                                    mapData.dependentObservable.dispose();\r\n                                    mapData.dependentObservable = undefined;\r\n                                }\r\n\r\n                                // Queue these nodes for later removal\r\n                                if (ko.utils.fixUpContinuousNodeArray(mapData.mappedNodes, domNode).length) {\r\n                                    if (options['beforeRemove']) {\r\n                                        newMappingResult.push(mapData);\r\n                                        countWaitingForRemove++;\r\n                                        if (mapData.arrayEntry === deletedItemDummyValue) {\r\n                                            mapData = null;\r\n                                        } else {\r\n                                            itemsForBeforeRemoveCallbacks.push(mapData);\r\n                                        }\r\n                                    }\r\n                                    if (mapData) {\r\n                                        nodesToDelete.push.apply(nodesToDelete, mapData.mappedNodes);\r\n                                    }\r\n                                }\r\n                            }\r\n                            lastMappingResultIndex++;\r\n                            break;\r\n\r\n                        case \"added\":\r\n                            while (newMappingResultIndex < itemIndex) {\r\n                                itemMovedOrRetained(lastMappingResultIndex++);\r\n                            }\r\n                            if (movedIndex !== undefined) {\r\n                                itemsToMoveFirstIndexes.push(newMappingResultIndex);\r\n                                itemMovedOrRetained(movedIndex);\r\n                            } else {\r\n                                itemAdded(editScriptItem['value']);\r\n                            }\r\n                            break;\r\n                    }\r\n                }\r\n\r\n                while (newMappingResultIndex < array.length) {\r\n                    itemMovedOrRetained(lastMappingResultIndex++);\r\n                }\r\n\r\n                // Record that the current view may still contain deleted items\r\n                // because it means we won't be able to use a provided editScript.\r\n                newMappingResult['_countWaitingForRemove'] = countWaitingForRemove;\r\n            }\r\n\r\n            // Store a copy of the array items we just considered so we can difference it next time\r\n            ko.utils.domData.set(domNode, lastMappingResultDomDataKey, newMappingResult);\r\n\r\n            // Call beforeMove first before any changes have been made to the DOM\r\n            callCallback(options['beforeMove'], itemsForMoveCallbacks);\r\n\r\n            // Next remove nodes for deleted items (or just clean if there's a beforeRemove callback)\r\n            ko.utils.arrayForEach(nodesToDelete, options['beforeRemove'] ? ko.cleanNode : ko.removeNode);\r\n\r\n            var i, j, nextNodeInDom, lastNode, nodeToInsert, mappedNodes, activeElement;\r\n\r\n            // Since most browsers remove the focus from an element when it's moved to another location,\r\n            // save the focused element and try to restore it later.\r\n            try {\r\n                activeElement = domNode.ownerDocument.activeElement;\r\n            } catch(e) {\r\n                // IE9 throws if you access activeElement during page load (see issue #703)\r\n            }\r\n\r\n            // Try to reduce overall moved nodes by first moving the ones that were marked as moved by the edit script\r\n            if (itemsToMoveFirstIndexes.length) {\r\n                while ((i = itemsToMoveFirstIndexes.shift()) != undefined) {\r\n                    mapData = newMappingResult[i];\r\n                    for (lastNode = undefined; i; ) {\r\n                        if ((mappedNodes = newMappingResult[--i].mappedNodes) && mappedNodes.length) {\r\n                            lastNode = mappedNodes[mappedNodes.length-1];\r\n                            break;\r\n                        }\r\n                    }\r\n                    for (j = 0; nodeToInsert = mapData.mappedNodes[j]; lastNode = nodeToInsert, j++) {\r\n                        ko.virtualElements.insertAfter(domNode, nodeToInsert, lastNode);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Next add/reorder the remaining items (will include deleted items if there's a beforeRemove callback)\r\n            for (i = 0, nextNodeInDom = ko.virtualElements.firstChild(domNode); mapData = newMappingResult[i]; i++) {\r\n                // Get nodes for newly added items\r\n                if (!mapData.mappedNodes)\r\n                    ko.utils.extend(mapData, mapNodeAndRefreshWhenChanged(domNode, mapping, mapData.arrayEntry, callbackAfterAddingNodes, mapData.indexObservable));\r\n\r\n                // Put nodes in the right place if they aren't there already\r\n                for (j = 0; nodeToInsert = mapData.mappedNodes[j]; nextNodeInDom = nodeToInsert.nextSibling, lastNode = nodeToInsert, j++) {\r\n                    if (nodeToInsert !== nextNodeInDom)\r\n                        ko.virtualElements.insertAfter(domNode, nodeToInsert, lastNode);\r\n                }\r\n\r\n                // Run the callbacks for newly added nodes (for example, to apply bindings, etc.)\r\n                if (!mapData.initialized && callbackAfterAddingNodes) {\r\n                    callbackAfterAddingNodes(mapData.arrayEntry, mapData.mappedNodes, mapData.indexObservable);\r\n                    mapData.initialized = true;\r\n                }\r\n            }\r\n\r\n            // Restore the focused element if it had lost focus\r\n            if (activeElement && domNode.ownerDocument.activeElement != activeElement) {\r\n                activeElement.focus();\r\n            }\r\n\r\n            // If there's a beforeRemove callback, call it after reordering.\r\n            // Note that we assume that the beforeRemove callback will usually be used to remove the nodes using\r\n            // some sort of animation, which is why we first reorder the nodes that will be removed. If the\r\n            // callback instead removes the nodes right away, it would be more efficient to skip reordering them.\r\n            // Perhaps we'll make that change in the future if this scenario becomes more common.\r\n            callCallback(options['beforeRemove'], itemsForBeforeRemoveCallbacks);\r\n\r\n            // Replace the stored values of deleted items with a dummy value. This provides two benefits: it marks this item\r\n            // as already \"removed\" so we won't call beforeRemove for it again, and it ensures that the item won't match up\r\n            // with an actual item in the array and appear as \"retained\" or \"moved\".\r\n            for (i = 0; i < itemsForBeforeRemoveCallbacks.length; ++i) {\r\n                itemsForBeforeRemoveCallbacks[i].arrayEntry = deletedItemDummyValue;\r\n            }\r\n\r\n            // Finally call afterMove and afterAdd callbacks\r\n            callCallback(options['afterMove'], itemsForMoveCallbacks);\r\n            callCallback(options['afterAdd'], itemsForAfterAddCallbacks);\r\n        }\r\n    })();\r\n\r\n    ko.exportSymbol('utils.setDomNodeChildrenFromArrayMapping', ko.utils.setDomNodeChildrenFromArrayMapping);\r\n    ko.nativeTemplateEngine = function () {\r\n        this['allowTemplateRewriting'] = false;\r\n    }\r\n\r\n    ko.nativeTemplateEngine.prototype = new ko.templateEngine();\r\n    ko.nativeTemplateEngine.prototype.constructor = ko.nativeTemplateEngine;\r\n    ko.nativeTemplateEngine.prototype['renderTemplateSource'] = function (templateSource, bindingContext, options, templateDocument) {\r\n        var useNodesIfAvailable = !(ko.utils.ieVersion < 9), // IE<9 cloneNode doesn't work properly\r\n            templateNodesFunc = useNodesIfAvailable ? templateSource['nodes'] : null,\r\n            templateNodes = templateNodesFunc ? templateSource['nodes']() : null;\r\n\r\n        if (templateNodes) {\r\n            return ko.utils.makeArray(templateNodes.cloneNode(true).childNodes);\r\n        } else {\r\n            var templateText = templateSource['text']();\r\n            return ko.utils.parseHtmlFragment(templateText, templateDocument);\r\n        }\r\n    };\r\n\r\n    ko.nativeTemplateEngine.instance = new ko.nativeTemplateEngine();\r\n    ko.setTemplateEngine(ko.nativeTemplateEngine.instance);\r\n\r\n    ko.exportSymbol('nativeTemplateEngine', ko.nativeTemplateEngine);\r\n    (function() {\r\n        ko.jqueryTmplTemplateEngine = function () {\r\n            // Detect which version of jquery-tmpl you're using. Unfortunately jquery-tmpl\r\n            // doesn't expose a version number, so we have to infer it.\r\n            // Note that as of Knockout 1.3, we only support jQuery.tmpl 1.0.0pre and later,\r\n            // which KO internally refers to as version \"2\", so older versions are no longer detected.\r\n            var jQueryTmplVersion = this.jQueryTmplVersion = (function() {\r\n                if (!jQueryInstance || !(jQueryInstance['tmpl']))\r\n                    return 0;\r\n                // Since it exposes no official version number, we use our own numbering system. To be updated as jquery-tmpl evolves.\r\n                try {\r\n                    if (jQueryInstance['tmpl']['tag']['tmpl']['open'].toString().indexOf('__') >= 0) {\r\n                        // Since 1.0.0pre, custom tags should append markup to an array called \"__\"\r\n                        return 2; // Final version of jquery.tmpl\r\n                    }\r\n                } catch(ex) { /* Apparently not the version we were looking for */ }\r\n\r\n                return 1; // Any older version that we don't support\r\n            })();\r\n\r\n            function ensureHasReferencedJQueryTemplates() {\r\n                if (jQueryTmplVersion < 2)\r\n                    throw new Error(\"Your version of jQuery.tmpl is too old. Please upgrade to jQuery.tmpl 1.0.0pre or later.\");\r\n            }\r\n\r\n            function executeTemplate(compiledTemplate, data, jQueryTemplateOptions) {\r\n                return jQueryInstance['tmpl'](compiledTemplate, data, jQueryTemplateOptions);\r\n            }\r\n\r\n            this['renderTemplateSource'] = function(templateSource, bindingContext, options, templateDocument) {\r\n                templateDocument = templateDocument || document;\r\n                options = options || {};\r\n                ensureHasReferencedJQueryTemplates();\r\n\r\n                // Ensure we have stored a precompiled version of this template (don't want to reparse on every render)\r\n                var precompiled = templateSource['data']('precompiled');\r\n                if (!precompiled) {\r\n                    var templateText = templateSource['text']() || \"\";\r\n                    // Wrap in \"with($whatever.koBindingContext) { ... }\"\r\n                    templateText = \"{{ko_with $item.koBindingContext}}\" + templateText + \"{{/ko_with}}\";\r\n\r\n                    precompiled = jQueryInstance['template'](null, templateText);\r\n                    templateSource['data']('precompiled', precompiled);\r\n                }\r\n\r\n                var data = [bindingContext['$data']]; // Prewrap the data in an array to stop jquery.tmpl from trying to unwrap any arrays\r\n                var jQueryTemplateOptions = jQueryInstance['extend']({ 'koBindingContext': bindingContext }, options['templateOptions']);\r\n\r\n                var resultNodes = executeTemplate(precompiled, data, jQueryTemplateOptions);\r\n                resultNodes['appendTo'](templateDocument.createElement(\"div\")); // Using \"appendTo\" forces jQuery/jQuery.tmpl to perform necessary cleanup work\r\n\r\n                jQueryInstance['fragments'] = {}; // Clear jQuery's fragment cache to avoid a memory leak after a large number of template renders\r\n                return resultNodes;\r\n            };\r\n\r\n            this['createJavaScriptEvaluatorBlock'] = function(script) {\r\n                return \"{{ko_code ((function() { return \" + script + \" })()) }}\";\r\n            };\r\n\r\n            this['addTemplate'] = function(templateName, templateMarkup) {\r\n                document.write(\"<script type='text/html' id='\" + templateName + \"'>\" + templateMarkup + \"<\" + \"/script>\");\r\n            };\r\n\r\n            if (jQueryTmplVersion > 0) {\r\n                jQueryInstance['tmpl']['tag']['ko_code'] = {\r\n                    open: \"__.push($1 || '');\"\r\n                };\r\n                jQueryInstance['tmpl']['tag']['ko_with'] = {\r\n                    open: \"with($1) {\",\r\n                    close: \"} \"\r\n                };\r\n            }\r\n        };\r\n\r\n        ko.jqueryTmplTemplateEngine.prototype = new ko.templateEngine();\r\n        ko.jqueryTmplTemplateEngine.prototype.constructor = ko.jqueryTmplTemplateEngine;\r\n\r\n        // Use this one by default *only if jquery.tmpl is referenced*\r\n        var jqueryTmplTemplateEngineInstance = new ko.jqueryTmplTemplateEngine();\r\n        if (jqueryTmplTemplateEngineInstance.jQueryTmplVersion > 0)\r\n            ko.setTemplateEngine(jqueryTmplTemplateEngineInstance);\r\n\r\n        ko.exportSymbol('jqueryTmplTemplateEngine', ko.jqueryTmplTemplateEngine);\r\n\r\n\r\n    })();\r\n\r\n    return ko;\r\n});\ndefine('skylark-knockout', ['skylark-knockout/main'], function (main) { return main; });\n\n"]}